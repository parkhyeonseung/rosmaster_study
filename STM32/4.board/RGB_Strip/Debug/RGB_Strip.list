
RGB_Strip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e4  080025e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080025e4  080025e4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e4  080025e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080025ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000010  080025fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080025fc  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000679d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbf  00000000  00000000  000267d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00028498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00028c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c12  00000000  00000000  00029280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7fb  00000000  00000000  00041e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c08b  00000000  00000000  0004c68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  000d8768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	080025ac 	.word	0x080025ac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	080025ac 	.word	0x080025ac

08000224 <Bsp_Led_Show_State_Handle>:
#define INTERVAL     50

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f001 fb07 	bl	800185a <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000002c 	.word	0x2000002c
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:

// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 f883 	bl	8000368 <Beep_On_Time>
	RGB_Init();
 8000262:	f000 f9e9 	bl	8000638 <RGB_Init>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	static int count = 0;
	static uint8_t index = RGB_CTRL_ALL;
	count++;
 8000270:	4b21      	ldr	r3, [pc, #132]	; (80002f8 <Bsp_Loop+0x8c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <Bsp_Loop+0x8c>)
 8000278:	6013      	str	r3, [r2, #0]
	if (count == 1*INTERVAL)
 800027a:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <Bsp_Loop+0x8c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b32      	cmp	r3, #50	; 0x32
 8000280:	d109      	bne.n	8000296 <Bsp_Loop+0x2a>
	{
		// RED 亮红色
		RGB_Set_Color(index, 0xff, 0x00, 0x00);
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <Bsp_Loop+0x90>)
 8000284:	7818      	ldrb	r0, [r3, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	2200      	movs	r2, #0
 800028a:	21ff      	movs	r1, #255	; 0xff
 800028c:	f000 f9e6 	bl	800065c <RGB_Set_Color>
		RGB_Update();
 8000290:	f000 f9da 	bl	8000648 <RGB_Update>
 8000294:	e01d      	b.n	80002d2 <Bsp_Loop+0x66>
	}
	else if (count == 2*INTERVAL)
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <Bsp_Loop+0x8c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b64      	cmp	r3, #100	; 0x64
 800029c:	d109      	bne.n	80002b2 <Bsp_Loop+0x46>
	{
		// GREEN 亮绿色
		RGB_Set_Color(index, 0x00, 0xff, 0x00);
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <Bsp_Loop+0x90>)
 80002a0:	7818      	ldrb	r0, [r3, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	22ff      	movs	r2, #255	; 0xff
 80002a6:	2100      	movs	r1, #0
 80002a8:	f000 f9d8 	bl	800065c <RGB_Set_Color>
		RGB_Update();
 80002ac:	f000 f9cc 	bl	8000648 <RGB_Update>
 80002b0:	e00f      	b.n	80002d2 <Bsp_Loop+0x66>
	}
	else if (count == 3*INTERVAL)
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <Bsp_Loop+0x8c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b96      	cmp	r3, #150	; 0x96
 80002b8:	d10b      	bne.n	80002d2 <Bsp_Loop+0x66>
	{
		// BLUE 亮蓝色
		RGB_Set_Color(index, 0x00, 0x00, 0xff);
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <Bsp_Loop+0x90>)
 80002bc:	7818      	ldrb	r0, [r3, #0]
 80002be:	23ff      	movs	r3, #255	; 0xff
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	f000 f9ca 	bl	800065c <RGB_Set_Color>
		RGB_Update();
 80002c8:	f000 f9be 	bl	8000648 <RGB_Update>
		count = 0;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <Bsp_Loop+0x8c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
	}

	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 f8ba 	bl	800044c <Key1_State>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <Bsp_Loop+0x78>
	{
		Beep_On_Time(50);
 80002de:	2032      	movs	r0, #50	; 0x32
 80002e0:	f000 f842 	bl	8000368 <Beep_On_Time>
	}

	Bsp_Led_Show_State_Handle();
 80002e4:	f7ff ff9e 	bl	8000224 <Bsp_Led_Show_State_Handle>
	Beep_Timeout_Close_Handle();
 80002e8:	f000 f87e 	bl	80003e8 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 80002ec:	200a      	movs	r0, #10
 80002ee:	f000 fc7f 	bl	8000bf0 <HAL_Delay>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000030 	.word	0x20000030
 80002fc:	20000000 	.word	0x20000000

08000300 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <Beep_Set_Time+0x1c>)
 800030c:	88fb      	ldrh	r3, [r7, #6]
 800030e:	8013      	strh	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000034 	.word	0x20000034

08000320 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000324:	4b02      	ldr	r3, [pc, #8]	; (8000330 <Beep_Get_Time+0x10>)
 8000326:	881b      	ldrh	r3, [r3, #0]
}
 8000328:	4618      	mov	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000034 	.word	0x20000034

08000334 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800033e:	4a04      	ldr	r2, [pc, #16]	; (8000350 <Beep_Set_State+0x1c>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	7013      	strb	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000036 	.word	0x20000036

08000354 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	return beep_state;
 8000358:	4b02      	ldr	r3, [pc, #8]	; (8000364 <Beep_Get_State+0x10>)
 800035a:	781b      	ldrb	r3, [r3, #0]
}
 800035c:	4618      	mov	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	20000036 	.word	0x20000036

08000368 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10b      	bne.n	8000390 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000378:	2001      	movs	r0, #1
 800037a:	f7ff ffdb 	bl	8000334 <Beep_Set_State>
		Beep_Set_Time(0);
 800037e:	2000      	movs	r0, #0
 8000380:	f7ff ffbe 	bl	8000300 <Beep_Set_Time>
		BEEP_ON();
 8000384:	2201      	movs	r2, #1
 8000386:	2120      	movs	r1, #32
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <Beep_On_Time+0x78>)
 800038a:	f001 fa4e 	bl	800182a <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 800038e:	e022      	b.n	80003d6 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000390:	88fb      	ldrh	r3, [r7, #6]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10b      	bne.n	80003ae <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ffcc 	bl	8000334 <Beep_Set_State>
		Beep_Set_Time(0);
 800039c:	2000      	movs	r0, #0
 800039e:	f7ff ffaf 	bl	8000300 <Beep_Set_Time>
		BEEP_OFF();
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	480e      	ldr	r0, [pc, #56]	; (80003e0 <Beep_On_Time+0x78>)
 80003a8:	f001 fa3f 	bl	800182a <HAL_GPIO_WritePin>
}
 80003ac:	e013      	b.n	80003d6 <Beep_On_Time+0x6e>
		if (time >= 10)
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	2b09      	cmp	r3, #9
 80003b2:	d910      	bls.n	80003d6 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 80003b4:	2002      	movs	r0, #2
 80003b6:	f7ff ffbd 	bl	8000334 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <Beep_On_Time+0x7c>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff9a 	bl	8000300 <Beep_Set_Time>
			BEEP_ON();
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <Beep_On_Time+0x78>)
 80003d2:	f001 fa2a 	bl	800182a <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40011000 	.word	0x40011000
 80003e4:	cccccccd 	.word	0xcccccccd

080003e8 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80003ec:	f7ff ffb2 	bl	8000354 <Beep_Get_State>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d113      	bne.n	800041e <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 80003f6:	f7ff ff93 	bl	8000320 <Beep_Get_Time>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <Beep_Timeout_Close_Handle+0x3c>)
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	3b01      	subs	r3, #1
 8000406:	b29a      	uxth	r2, r3
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <Beep_Timeout_Close_Handle+0x3c>)
 800040a:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 800040c:	e007      	b.n	800041e <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800040e:	2200      	movs	r2, #0
 8000410:	2120      	movs	r1, #32
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <Beep_Timeout_Close_Handle+0x40>)
 8000414:	f001 fa09 	bl	800182a <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000418:	2000      	movs	r0, #0
 800041a:	f7ff ff8b 	bl	8000334 <Beep_Set_State>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000034 	.word	0x20000034
 8000428:	40011000 	.word	0x40011000

0800042c <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000430:	2104      	movs	r1, #4
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <Key1_is_Press+0x1c>)
 8000434:	f001 f9e2 	bl	80017fc <HAL_GPIO_ReadPin>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d101      	bne.n	8000442 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 800043e:	2301      	movs	r3, #1
 8000440:	e000      	b.n	8000444 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40011400 	.word	0x40011400

0800044c <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8000456:	f7ff ffe9 	bl	800042c <Key1_is_Press>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d10e      	bne.n	800047e <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <Key1_State+0x50>)
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	3301      	adds	r3, #1
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	429a      	cmp	r2, r3
 800046e:	da09      	bge.n	8000484 <Key1_State+0x38>
		{
			key1_state++;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <Key1_State+0x50>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <Key1_State+0x50>)
 800047a:	801a      	strh	r2, [r3, #0]
 800047c:	e002      	b.n	8000484 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <Key1_State+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <Key1_State+0x50>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d101      	bne.n	8000490 <Key1_State+0x44>
	{
		return KEY_PRESS;
 800048c:	2301      	movs	r3, #1
 800048e:	e000      	b.n	8000492 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000038 	.word	0x20000038

080004a0 <WS2812_Send_Data>:
// Store the color information of the light bar  储存灯条的颜色信息
ws2812_t g_ws2812 = {0};

// transmitter data  发送数据
static void WS2812_Send_Data(uint8_t *buf, uint16_t buf_size)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit_DMA(&hspi3, buf, buf_size);
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	461a      	mov	r2, r3
 80004b0:	6879      	ldr	r1, [r7, #4]
 80004b2:	4803      	ldr	r0, [pc, #12]	; (80004c0 <WS2812_Send_Data+0x20>)
 80004b4:	f001 fe56 	bl	8002164 <HAL_SPI_Transmit_DMA>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200000bc 	.word	0x200000bc

080004c4 <WS2812_Set_Color_One>:

// 设置单个RGB灯颜色值，index=[0, MAX_RGB-1]，RGB=[0x00000000, 0x00FFFFFF]
// Set single RGB light color value, index=[0, MAX_RGB-1], RGB=[0x00000000, 0x00FFFFFF] 
static void WS2812_Set_Color_One(uint8_t index, uint32_t RGB)
{
 80004c4:	b490      	push	{r4, r7}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
    if (index >= MAX_RGB) return;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b0d      	cmp	r3, #13
 80004d4:	f200 80a8 	bhi.w	8000628 <WS2812_Set_Color_One+0x164>
    uint8_t i;
    uint32_t TempR = 0, TempG = 0, TempB = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]

    for(i = 0; i < 8; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	75fb      	strb	r3, [r7, #23]
 80004e8:	e059      	b.n	800059e <WS2812_Set_Color_One+0xda>
    {
        (RGB & 0x00010000) == 0 ? (TempR |= (TIMING_ZERO<<(i*3))) : (TempR |= (TIMING_ONE<<(i*3)));
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d10b      	bne.n	800050c <WS2812_Set_Color_One+0x48>
 80004f4:	7dfa      	ldrb	r2, [r7, #23]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	2204      	movs	r2, #4
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	461a      	mov	r2, r3
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	4313      	orrs	r3, r2
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	e00a      	b.n	8000522 <WS2812_Set_Color_One+0x5e>
 800050c:	7dfa      	ldrb	r2, [r7, #23]
 800050e:	4613      	mov	r3, r2
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	4413      	add	r3, r2
 8000514:	2206      	movs	r2, #6
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	461a      	mov	r2, r3
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	4313      	orrs	r3, r2
 8000520:	613b      	str	r3, [r7, #16]
        (RGB & 0x00000100) == 0 ? (TempG |= (TIMING_ZERO<<(i*3))) : (TempG |= (TIMING_ONE<<(i*3)));
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10b      	bne.n	8000544 <WS2812_Set_Color_One+0x80>
 800052c:	7dfa      	ldrb	r2, [r7, #23]
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	2204      	movs	r2, #4
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	461a      	mov	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4313      	orrs	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e00a      	b.n	800055a <WS2812_Set_Color_One+0x96>
 8000544:	7dfa      	ldrb	r2, [r7, #23]
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	2206      	movs	r2, #6
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	461a      	mov	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4313      	orrs	r3, r2
 8000558:	60fb      	str	r3, [r7, #12]
        (RGB & 0x00000001) == 0 ? (TempB |= (TIMING_ZERO<<(i*3))) : (TempB |= (TIMING_ONE<<(i*3)));
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10b      	bne.n	800057c <WS2812_Set_Color_One+0xb8>
 8000564:	7dfa      	ldrb	r2, [r7, #23]
 8000566:	4613      	mov	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	4413      	add	r3, r2
 800056c:	2204      	movs	r2, #4
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	461a      	mov	r2, r3
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	4313      	orrs	r3, r2
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	e00a      	b.n	8000592 <WS2812_Set_Color_One+0xce>
 800057c:	7dfa      	ldrb	r2, [r7, #23]
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	2206      	movs	r2, #6
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	461a      	mov	r2, r3
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4313      	orrs	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
        RGB >>= 1;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	603b      	str	r3, [r7, #0]
    for(i = 0; i < 8; i++)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	3301      	adds	r3, #1
 800059c:	75fb      	strb	r3, [r7, #23]
 800059e:	7dfb      	ldrb	r3, [r7, #23]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	d9a2      	bls.n	80004ea <WS2812_Set_Color_One+0x26>
    }
    for (i = 0; i < 3; i++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	75fb      	strb	r3, [r7, #23]
 80005a8:	e03a      	b.n	8000620 <WS2812_Set_Color_One+0x15c>
    {
        g_ws2812.Strip[index].RGB.R[i] = TempR >> (16-8*i);
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	f1c3 0302 	rsb	r3, r3, #2
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	fa22 f303 	lsr.w	r3, r2, r3
 80005b8:	79fa      	ldrb	r2, [r7, #7]
 80005ba:	7df9      	ldrb	r1, [r7, #23]
 80005bc:	b2dc      	uxtb	r4, r3
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <WS2812_Set_Color_One+0x170>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4413      	add	r3, r2
 80005c6:	4403      	add	r3, r0
 80005c8:	440b      	add	r3, r1
 80005ca:	3303      	adds	r3, #3
 80005cc:	4622      	mov	r2, r4
 80005ce:	701a      	strb	r2, [r3, #0]
        g_ws2812.Strip[index].RGB.G[i] = TempG >> (16-8*i);
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
 80005d2:	f1c3 0302 	rsb	r3, r3, #2
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	fa22 f303 	lsr.w	r3, r2, r3
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	7df9      	ldrb	r1, [r7, #23]
 80005e2:	b2dc      	uxtb	r4, r3
 80005e4:	4813      	ldr	r0, [pc, #76]	; (8000634 <WS2812_Set_Color_One+0x170>)
 80005e6:	4613      	mov	r3, r2
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	4413      	add	r3, r2
 80005ec:	4403      	add	r3, r0
 80005ee:	440b      	add	r3, r1
 80005f0:	4622      	mov	r2, r4
 80005f2:	701a      	strb	r2, [r3, #0]
        g_ws2812.Strip[index].RGB.B[i] = TempB >> (16-8*i);
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
 80005f6:	f1c3 0302 	rsb	r3, r3, #2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	7df9      	ldrb	r1, [r7, #23]
 8000606:	b2dc      	uxtb	r4, r3
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <WS2812_Set_Color_One+0x170>)
 800060a:	4613      	mov	r3, r2
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	4413      	add	r3, r2
 8000610:	4403      	add	r3, r0
 8000612:	440b      	add	r3, r1
 8000614:	3306      	adds	r3, #6
 8000616:	4622      	mov	r2, r4
 8000618:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	3301      	adds	r3, #1
 800061e:	75fb      	strb	r3, [r7, #23]
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d9c1      	bls.n	80005aa <WS2812_Set_Color_One+0xe6>
 8000626:	e000      	b.n	800062a <WS2812_Set_Color_One+0x166>
    if (index >= MAX_RGB) return;
 8000628:	bf00      	nop
    }
}
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bc90      	pop	{r4, r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000003c 	.word	0x2000003c

08000638 <RGB_Init>:


// Initializes the indicator bar  初始化灯条
void RGB_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	RGB_Clear();
 800063c:	f000 f852 	bl	80006e4 <RGB_Clear>
	RGB_Update();
 8000640:	f000 f802 	bl	8000648 <RGB_Update>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <RGB_Update>:

// 刷新RGB灯条颜色。下方函数调用修改RGB颜色后，必须调用此函数更新显示。
// Refresh RGB light bar color. This function must be called to update the display after the RGB color is modified by the function call below.  
void RGB_Update(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    WS2812_Send_Data((uint8_t*)&g_ws2812.Strip[0].Buff, 9*MAX_RGB);
 800064c:	217e      	movs	r1, #126	; 0x7e
 800064e:	4802      	ldr	r0, [pc, #8]	; (8000658 <RGB_Update+0x10>)
 8000650:	f7ff ff26 	bl	80004a0 <WS2812_Send_Data>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000003c 	.word	0x2000003c

0800065c <RGB_Set_Color>:

// 设置颜色，index=[0, MAX_RGB-1]控制对应灯珠颜色, index=0xFF控制所有灯珠颜色。
// Set the color, index=[0, max_RGB-1] controls the corresponding bead color, index=0xFF controls all the bead color.
void RGB_Set_Color(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	4604      	mov	r4, r0
 8000664:	4608      	mov	r0, r1
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	4623      	mov	r3, r4
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	4603      	mov	r3, r0
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	460b      	mov	r3, r1
 8000674:	717b      	strb	r3, [r7, #5]
 8000676:	4613      	mov	r3, r2
 8000678:	713b      	strb	r3, [r7, #4]
    uint32_t color = r << 16 | g << 8 | b;
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	041a      	lsls	r2, r3, #16
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	431a      	orrs	r2, r3
 8000684:	793b      	ldrb	r3, [r7, #4]
 8000686:	4313      	orrs	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
    RGB_Set_Color_U32(index, color);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	68f9      	ldr	r1, [r7, #12]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f804 	bl	800069c <RGB_Set_Color_U32>
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <RGB_Set_Color_U32>:

// 设置RGB灯条颜色值，index=[0, MAX_RGB-1]控制对应灯珠颜色, index=255控制所有灯珠颜色。
// Set the RGB bar color value, index=[0, max_RGB-1] controls the corresponding bead color, index=255 controls all the bead color.
void RGB_Set_Color_U32(uint8_t index, uint32_t color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
    if (index < MAX_RGB)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b0d      	cmp	r3, #13
 80006ac:	d805      	bhi.n	80006ba <RGB_Set_Color_U32+0x1e>
    {
        WS2812_Set_Color_One(index, color);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	6839      	ldr	r1, [r7, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff06 	bl	80004c4 <WS2812_Set_Color_One>
        return;
 80006b8:	e011      	b.n	80006de <RGB_Set_Color_U32+0x42>
    }
    if (index == RGB_CTRL_ALL)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2bff      	cmp	r3, #255	; 0xff
 80006be:	d10e      	bne.n	80006de <RGB_Set_Color_U32+0x42>
    {
        for (uint16_t i = 0; i < MAX_RGB; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	81fb      	strh	r3, [r7, #14]
 80006c4:	e008      	b.n	80006d8 <RGB_Set_Color_U32+0x3c>
        {
            WS2812_Set_Color_One(i, color);
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	6839      	ldr	r1, [r7, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fef9 	bl	80004c4 <WS2812_Set_Color_One>
        for (uint16_t i = 0; i < MAX_RGB; i++)
 80006d2:	89fb      	ldrh	r3, [r7, #14]
 80006d4:	3301      	adds	r3, #1
 80006d6:	81fb      	strh	r3, [r7, #14]
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d9f3      	bls.n	80006c6 <RGB_Set_Color_U32+0x2a>
        }
    }
}
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <RGB_Clear>:

// Clear color (off)  清除颜色（熄灭）
void RGB_Clear(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < MAX_RGB; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	71fb      	strb	r3, [r7, #7]
 80006ee:	e007      	b.n	8000700 <RGB_Clear+0x1c>
    {
        WS2812_Set_Color_One(i, 0);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fee5 	bl	80004c4 <WS2812_Set_Color_One>
    for (uint8_t i = 0; i < MAX_RGB; i++)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	3301      	adds	r3, #1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b0d      	cmp	r3, #13
 8000704:	d9f4      	bls.n	80006f0 <RGB_Clear+0xc>
    }
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x38>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <MX_DMA_Init+0x38>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x38>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2039      	movs	r0, #57	; 0x39
 8000734:	f000 fb57 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000738:	2039      	movs	r0, #57	; 0x39
 800073a:	f000 fb70 	bl	8000e1e <HAL_NVIC_EnableIRQ>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xc0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a29      	ldr	r2, [pc, #164]	; (800080c <MX_GPIO_Init+0xc0>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_GPIO_Init+0xc0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0310 	and.w	r3, r3, #16
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0xc0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a23      	ldr	r2, [pc, #140]	; (800080c <MX_GPIO_Init+0xc0>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_GPIO_Init+0xc0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0320 	and.w	r3, r3, #32
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_GPIO_Init+0xc0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a1d      	ldr	r2, [pc, #116]	; (800080c <MX_GPIO_Init+0xc0>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_GPIO_Init+0xc0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_GPIO_Init+0xc0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_GPIO_Init+0xc0>)
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0xc0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f242 0120 	movw	r1, #8224	; 0x2020
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_GPIO_Init+0xc4>)
 80007c8:	f001 f82f 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 80007cc:	f242 0320 	movw	r3, #8224	; 0x2020
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <MX_GPIO_Init+0xc4>)
 80007e6:	f000 fe75 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80007ea:	2304      	movs	r3, #4
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_GPIO_Init+0xc8>)
 80007fe:	f000 fe69 	bl	80014d4 <HAL_GPIO_Init>

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	40011000 	.word	0x40011000
 8000814:	40011400 	.word	0x40011400

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 f986 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f80b 	bl	800083a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f7ff ff92 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000828:	f7ff ff72 	bl	8000710 <MX_DMA_Init>
  MX_SPI3_Init();
 800082c:	f000 f850 	bl	80008d0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  Bsp_Init();
 8000830:	f7ff fd12 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Bsp_Loop();
 8000834:	f7ff fd1a 	bl	800026c <Bsp_Loop>
 8000838:	e7fc      	b.n	8000834 <main+0x1c>

0800083a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b090      	sub	sp, #64	; 0x40
 800083e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	2228      	movs	r2, #40	; 0x28
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fea7 	bl	800259c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000864:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086a:	2301      	movs	r3, #1
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000878:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f802 	bl	800188c <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800088e:	f000 f819 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2102      	movs	r1, #2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fa6f 	bl	8001d90 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008b8:	f000 f804 	bl	80008c4 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3740      	adds	r7, #64	; 0x40
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_SPI3_Init+0x64>)
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_SPI3_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI3_Init+0x64>)
 80008dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI3_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_SPI3_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI3_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI3_Init+0x64>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI3_Init+0x64>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI3_Init+0x64>)
 8000904:	2218      	movs	r2, #24
 8000906:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_SPI3_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI3_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_SPI3_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI3_Init+0x64>)
 800091c:	220a      	movs	r2, #10
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_SPI3_Init+0x64>)
 8000922:	f001 fb9b 	bl	800205c <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800092c:	f7ff ffca 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000bc 	.word	0x200000bc
 8000938:	40003c00 	.word	0x40003c00

0800093c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <HAL_SPI_MspInit+0xbc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d149      	bne.n	80009f0 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <HAL_SPI_MspInit+0xc0>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	4a26      	ldr	r2, [pc, #152]	; (80009fc <HAL_SPI_MspInit+0xc0>)
 8000962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000966:	61d3      	str	r3, [r2, #28]
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_SPI_MspInit+0xc0>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_SPI_MspInit+0xc0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a20      	ldr	r2, [pc, #128]	; (80009fc <HAL_SPI_MspInit+0xc0>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_SPI_MspInit+0xc0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800098c:	2328      	movs	r3, #40	; 0x28
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4818      	ldr	r0, [pc, #96]	; (8000a00 <HAL_SPI_MspInit+0xc4>)
 80009a0:	f000 fd98 	bl	80014d4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_SPI_MspInit+0xcc>)
 80009a8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009ac:	2210      	movs	r2, #16
 80009ae:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009d6:	f000 fa3d 	bl	8000e54 <HAL_DMA_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 80009e0:	f7ff ff70 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009e8:	649a      	str	r2, [r3, #72]	; 0x48
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_SPI_MspInit+0xc8>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40003c00 	.word	0x40003c00
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	20000114 	.word	0x20000114
 8000a08:	4002041c 	.word	0x4002041c

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_MspInit+0x60>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_MspInit+0x60>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010000 	.word	0x40010000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f87f 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA2_Channel2_IRQHandler+0x10>)
 8000ac6:	f000 fa9b 	bl	8001000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000114 	.word	0x20000114

08000ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b06:	f7ff ffe5 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f001 fd23 	bl	8002554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0e:	f7ff fe83 	bl	8000818 <main>
  bx lr
 8000b12:	4770      	bx	lr
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b1c:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 8000b20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b24:	2000015c 	.word	0x2000015c

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x28>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x28>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f947 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff ff60 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f95f 	bl	8000e3a <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f927 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x1c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000158 	.word	0x20000158

08000bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <HAL_GetTick+0x10>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	20000158 	.word	0x20000158

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff fff0 	bl	8000bdc <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffe0 	bl	8000bdc <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000000c 	.word	0x2000000c

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4906      	ldr	r1, [pc, #24]	; (8000cd0 <__NVIC_EnableIRQ+0x34>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff90 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff2d 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff42 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff90 	bl	8000d28 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5f 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff35 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e059      	b.n	8000f1e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <HAL_DMA_Init+0xd4>)
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d80f      	bhi.n	8000e96 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <HAL_DMA_Init+0xd8>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <HAL_DMA_Init+0xdc>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <HAL_DMA_Init+0xe0>)
 8000e92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e94:	e00e      	b.n	8000eb4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <HAL_DMA_Init+0xe4>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_DMA_Init+0xdc>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	009a      	lsls	r2, r3, #2
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_DMA_Init+0xe8>)
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ece:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40020407 	.word	0x40020407
 8000f2c:	bffdfff8 	.word	0xbffdfff8
 8000f30:	cccccccd 	.word	0xcccccccd
 8000f34:	40020000 	.word	0x40020000
 8000f38:	bffdfbf8 	.word	0xbffdfbf8
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_DMA_Start_IT+0x20>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e04a      	b.n	8000ff6 <HAL_DMA_Start_IT+0xb6>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d13a      	bne.n	8000fe8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2202      	movs	r2, #2
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 fa6e 	bl	8001478 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d008      	beq.n	8000fb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 020e 	orr.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e00f      	b.n	8000fd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0204 	bic.w	r2, r2, #4
 8000fc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 020a 	orr.w	r2, r2, #10
 8000fd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0201 	orr.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e005      	b.n	8000ff4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	2204      	movs	r2, #4
 800101e:	409a      	lsls	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80f1 	beq.w	800120c <HAL_DMA_IRQHandler+0x20c>
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80eb 	beq.w	800120c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	2b00      	cmp	r3, #0
 8001042:	d107      	bne.n	8001054 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0204 	bic.w	r2, r2, #4
 8001052:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <HAL_DMA_IRQHandler+0x1d8>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d958      	bls.n	8001112 <HAL_DMA_IRQHandler+0x112>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a5d      	ldr	r2, [pc, #372]	; (80011dc <HAL_DMA_IRQHandler+0x1dc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d04f      	beq.n	800110a <HAL_DMA_IRQHandler+0x10a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a5c      	ldr	r2, [pc, #368]	; (80011e0 <HAL_DMA_IRQHandler+0x1e0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d048      	beq.n	8001106 <HAL_DMA_IRQHandler+0x106>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a5a      	ldr	r2, [pc, #360]	; (80011e4 <HAL_DMA_IRQHandler+0x1e4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d040      	beq.n	8001100 <HAL_DMA_IRQHandler+0x100>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a59      	ldr	r2, [pc, #356]	; (80011e8 <HAL_DMA_IRQHandler+0x1e8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d038      	beq.n	80010fa <HAL_DMA_IRQHandler+0xfa>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a57      	ldr	r2, [pc, #348]	; (80011ec <HAL_DMA_IRQHandler+0x1ec>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d030      	beq.n	80010f4 <HAL_DMA_IRQHandler+0xf4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <HAL_DMA_IRQHandler+0x1f0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d028      	beq.n	80010ee <HAL_DMA_IRQHandler+0xee>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a4d      	ldr	r2, [pc, #308]	; (80011d8 <HAL_DMA_IRQHandler+0x1d8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d020      	beq.n	80010e8 <HAL_DMA_IRQHandler+0xe8>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_DMA_IRQHandler+0x1f4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d019      	beq.n	80010e4 <HAL_DMA_IRQHandler+0xe4>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a50      	ldr	r2, [pc, #320]	; (80011f8 <HAL_DMA_IRQHandler+0x1f8>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d012      	beq.n	80010e0 <HAL_DMA_IRQHandler+0xe0>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <HAL_DMA_IRQHandler+0x1fc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d00a      	beq.n	80010da <HAL_DMA_IRQHandler+0xda>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	; (8001200 <HAL_DMA_IRQHandler+0x200>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d102      	bne.n	80010d4 <HAL_DMA_IRQHandler+0xd4>
 80010ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d2:	e01b      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010d8:	e018      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010de:	e015      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010e0:	2340      	movs	r3, #64	; 0x40
 80010e2:	e013      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e011      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010ec:	e00e      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f2:	e00b      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010f8:	e008      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 80010fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010fe:	e005      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 8001100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001104:	e002      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	e000      	b.n	800110c <HAL_DMA_IRQHandler+0x10c>
 800110a:	2304      	movs	r3, #4
 800110c:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <HAL_DMA_IRQHandler+0x204>)
 800110e:	6053      	str	r3, [r2, #4]
 8001110:	e057      	b.n	80011c2 <HAL_DMA_IRQHandler+0x1c2>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a31      	ldr	r2, [pc, #196]	; (80011dc <HAL_DMA_IRQHandler+0x1dc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d04f      	beq.n	80011bc <HAL_DMA_IRQHandler+0x1bc>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <HAL_DMA_IRQHandler+0x1e0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d048      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x1b8>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <HAL_DMA_IRQHandler+0x1e4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d040      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x1b2>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <HAL_DMA_IRQHandler+0x1e8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d038      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1ac>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <HAL_DMA_IRQHandler+0x1ec>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d030      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x1a6>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a29      	ldr	r2, [pc, #164]	; (80011f0 <HAL_DMA_IRQHandler+0x1f0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d028      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1a0>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_DMA_IRQHandler+0x1d8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d020      	beq.n	800119a <HAL_DMA_IRQHandler+0x19a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_DMA_IRQHandler+0x1f4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d019      	beq.n	8001196 <HAL_DMA_IRQHandler+0x196>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_DMA_IRQHandler+0x1f8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d012      	beq.n	8001192 <HAL_DMA_IRQHandler+0x192>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_DMA_IRQHandler+0x1fc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00a      	beq.n	800118c <HAL_DMA_IRQHandler+0x18c>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_DMA_IRQHandler+0x200>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d102      	bne.n	8001186 <HAL_DMA_IRQHandler+0x186>
 8001180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001184:	e01b      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 8001186:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800118a:	e018      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001190:	e015      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	e013      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 8001196:	2304      	movs	r3, #4
 8001198:	e011      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 800119a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800119e:	e00e      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 80011a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a4:	e00b      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 80011a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011aa:	e008      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 80011ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b0:	e005      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	e002      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	e000      	b.n	80011be <HAL_DMA_IRQHandler+0x1be>
 80011bc:	2304      	movs	r3, #4
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_DMA_IRQHandler+0x208>)
 80011c0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8136 	beq.w	8001438 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011d4:	e130      	b.n	8001438 <HAL_DMA_IRQHandler+0x438>
 80011d6:	bf00      	nop
 80011d8:	40020080 	.word	0x40020080
 80011dc:	40020008 	.word	0x40020008
 80011e0:	4002001c 	.word	0x4002001c
 80011e4:	40020030 	.word	0x40020030
 80011e8:	40020044 	.word	0x40020044
 80011ec:	40020058 	.word	0x40020058
 80011f0:	4002006c 	.word	0x4002006c
 80011f4:	40020408 	.word	0x40020408
 80011f8:	4002041c 	.word	0x4002041c
 80011fc:	40020430 	.word	0x40020430
 8001200:	40020444 	.word	0x40020444
 8001204:	40020400 	.word	0x40020400
 8001208:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2202      	movs	r2, #2
 8001212:	409a      	lsls	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80dd 	beq.w	80013d8 <HAL_DMA_IRQHandler+0x3d8>
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80d7 	beq.w	80013d8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 020a 	bic.w	r2, r2, #10
 8001246:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b7b      	ldr	r3, [pc, #492]	; (8001444 <HAL_DMA_IRQHandler+0x444>)
 8001258:	429a      	cmp	r2, r3
 800125a:	d958      	bls.n	800130e <HAL_DMA_IRQHandler+0x30e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a79      	ldr	r2, [pc, #484]	; (8001448 <HAL_DMA_IRQHandler+0x448>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d04f      	beq.n	8001306 <HAL_DMA_IRQHandler+0x306>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a78      	ldr	r2, [pc, #480]	; (800144c <HAL_DMA_IRQHandler+0x44c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d048      	beq.n	8001302 <HAL_DMA_IRQHandler+0x302>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a76      	ldr	r2, [pc, #472]	; (8001450 <HAL_DMA_IRQHandler+0x450>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d040      	beq.n	80012fc <HAL_DMA_IRQHandler+0x2fc>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a75      	ldr	r2, [pc, #468]	; (8001454 <HAL_DMA_IRQHandler+0x454>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d038      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x2f6>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a73      	ldr	r2, [pc, #460]	; (8001458 <HAL_DMA_IRQHandler+0x458>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d030      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x2f0>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a72      	ldr	r2, [pc, #456]	; (800145c <HAL_DMA_IRQHandler+0x45c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d028      	beq.n	80012ea <HAL_DMA_IRQHandler+0x2ea>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a69      	ldr	r2, [pc, #420]	; (8001444 <HAL_DMA_IRQHandler+0x444>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d020      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x2e4>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6e      	ldr	r2, [pc, #440]	; (8001460 <HAL_DMA_IRQHandler+0x460>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d019      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x2e0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a6c      	ldr	r2, [pc, #432]	; (8001464 <HAL_DMA_IRQHandler+0x464>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d012      	beq.n	80012dc <HAL_DMA_IRQHandler+0x2dc>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6b      	ldr	r2, [pc, #428]	; (8001468 <HAL_DMA_IRQHandler+0x468>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00a      	beq.n	80012d6 <HAL_DMA_IRQHandler+0x2d6>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a69      	ldr	r2, [pc, #420]	; (800146c <HAL_DMA_IRQHandler+0x46c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d102      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x2d0>
 80012ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ce:	e01b      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d4:	e018      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012da:	e015      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012dc:	2320      	movs	r3, #32
 80012de:	e013      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e011      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e8:	e00e      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012ee:	e00b      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f4:	e008      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	e005      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 80012fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001300:	e002      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 8001302:	2320      	movs	r3, #32
 8001304:	e000      	b.n	8001308 <HAL_DMA_IRQHandler+0x308>
 8001306:	2302      	movs	r3, #2
 8001308:	4a59      	ldr	r2, [pc, #356]	; (8001470 <HAL_DMA_IRQHandler+0x470>)
 800130a:	6053      	str	r3, [r2, #4]
 800130c:	e057      	b.n	80013be <HAL_DMA_IRQHandler+0x3be>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <HAL_DMA_IRQHandler+0x448>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d04f      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x3b8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_DMA_IRQHandler+0x44c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d048      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x3b4>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a4a      	ldr	r2, [pc, #296]	; (8001450 <HAL_DMA_IRQHandler+0x450>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d040      	beq.n	80013ae <HAL_DMA_IRQHandler+0x3ae>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_DMA_IRQHandler+0x454>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d038      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x3a8>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_DMA_IRQHandler+0x458>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d030      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x3a2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_DMA_IRQHandler+0x45c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d028      	beq.n	800139c <HAL_DMA_IRQHandler+0x39c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a3d      	ldr	r2, [pc, #244]	; (8001444 <HAL_DMA_IRQHandler+0x444>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d020      	beq.n	8001396 <HAL_DMA_IRQHandler+0x396>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a41      	ldr	r2, [pc, #260]	; (8001460 <HAL_DMA_IRQHandler+0x460>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_DMA_IRQHandler+0x392>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a40      	ldr	r2, [pc, #256]	; (8001464 <HAL_DMA_IRQHandler+0x464>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d012      	beq.n	800138e <HAL_DMA_IRQHandler+0x38e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a3e      	ldr	r2, [pc, #248]	; (8001468 <HAL_DMA_IRQHandler+0x468>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00a      	beq.n	8001388 <HAL_DMA_IRQHandler+0x388>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3d      	ldr	r2, [pc, #244]	; (800146c <HAL_DMA_IRQHandler+0x46c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d102      	bne.n	8001382 <HAL_DMA_IRQHandler+0x382>
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	e01b      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 8001382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001386:	e018      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 8001388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138c:	e015      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 800138e:	2320      	movs	r3, #32
 8001390:	e013      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 8001392:	2302      	movs	r3, #2
 8001394:	e011      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 8001396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139a:	e00e      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 800139c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a0:	e00b      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	e008      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	e005      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 80013ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b2:	e002      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 80013b4:	2320      	movs	r3, #32
 80013b6:	e000      	b.n	80013ba <HAL_DMA_IRQHandler+0x3ba>
 80013b8:	2302      	movs	r3, #2
 80013ba:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <HAL_DMA_IRQHandler+0x474>)
 80013bc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d034      	beq.n	8001438 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013d6:	e02f      	b.n	8001438 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	2208      	movs	r2, #8
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d028      	beq.n	800143a <HAL_DMA_IRQHandler+0x43a>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d023      	beq.n	800143a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 020e 	bic.w	r2, r2, #14
 8001400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4798      	blx	r3
    }
  }
  return;
 8001438:	bf00      	nop
 800143a:	bf00      	nop
}
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40020080 	.word	0x40020080
 8001448:	40020008 	.word	0x40020008
 800144c:	4002001c 	.word	0x4002001c
 8001450:	40020030 	.word	0x40020030
 8001454:	40020044 	.word	0x40020044
 8001458:	40020058 	.word	0x40020058
 800145c:	4002006c 	.word	0x4002006c
 8001460:	40020408 	.word	0x40020408
 8001464:	4002041c 	.word	0x4002041c
 8001468:	40020430 	.word	0x40020430
 800146c:	40020444 	.word	0x40020444
 8001470:	40020400 	.word	0x40020400
 8001474:	40020000 	.word	0x40020000

08001478 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d108      	bne.n	80014b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014b6:	e007      	b.n	80014c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	e179      	b.n	80017dc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e8:	2201      	movs	r2, #1
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	429a      	cmp	r2, r3
 8001502:	f040 8168 	bne.w	80017d6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a96      	ldr	r2, [pc, #600]	; (8001764 <HAL_GPIO_Init+0x290>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d05e      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001510:	4a94      	ldr	r2, [pc, #592]	; (8001764 <HAL_GPIO_Init+0x290>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d875      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 8001516:	4a94      	ldr	r2, [pc, #592]	; (8001768 <HAL_GPIO_Init+0x294>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d058      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 800151c:	4a92      	ldr	r2, [pc, #584]	; (8001768 <HAL_GPIO_Init+0x294>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d86f      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 8001522:	4a92      	ldr	r2, [pc, #584]	; (800176c <HAL_GPIO_Init+0x298>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d052      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001528:	4a90      	ldr	r2, [pc, #576]	; (800176c <HAL_GPIO_Init+0x298>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d869      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 800152e:	4a90      	ldr	r2, [pc, #576]	; (8001770 <HAL_GPIO_Init+0x29c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d04c      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001534:	4a8e      	ldr	r2, [pc, #568]	; (8001770 <HAL_GPIO_Init+0x29c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d863      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 800153a:	4a8e      	ldr	r2, [pc, #568]	; (8001774 <HAL_GPIO_Init+0x2a0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d046      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001540:	4a8c      	ldr	r2, [pc, #560]	; (8001774 <HAL_GPIO_Init+0x2a0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d85d      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d82a      	bhi.n	80015a0 <HAL_GPIO_Init+0xcc>
 800154a:	2b12      	cmp	r3, #18
 800154c:	d859      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <HAL_GPIO_Init+0x80>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	080015cf 	.word	0x080015cf
 8001558:	080015a9 	.word	0x080015a9
 800155c:	080015bb 	.word	0x080015bb
 8001560:	080015fd 	.word	0x080015fd
 8001564:	08001603 	.word	0x08001603
 8001568:	08001603 	.word	0x08001603
 800156c:	08001603 	.word	0x08001603
 8001570:	08001603 	.word	0x08001603
 8001574:	08001603 	.word	0x08001603
 8001578:	08001603 	.word	0x08001603
 800157c:	08001603 	.word	0x08001603
 8001580:	08001603 	.word	0x08001603
 8001584:	08001603 	.word	0x08001603
 8001588:	08001603 	.word	0x08001603
 800158c:	08001603 	.word	0x08001603
 8001590:	08001603 	.word	0x08001603
 8001594:	08001603 	.word	0x08001603
 8001598:	080015b1 	.word	0x080015b1
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_GPIO_Init+0x2a4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a6:	e02c      	b.n	8001602 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e029      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	3304      	adds	r3, #4
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e024      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	3308      	adds	r3, #8
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e01f      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	330c      	adds	r3, #12
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e01a      	b.n	8001604 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d6:	2304      	movs	r3, #4
 80015d8:	623b      	str	r3, [r7, #32]
          break;
 80015da:	e013      	b.n	8001604 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e4:	2308      	movs	r3, #8
 80015e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	611a      	str	r2, [r3, #16]
          break;
 80015ee:	e009      	b.n	8001604 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	615a      	str	r2, [r3, #20]
          break;
 80015fa:	e003      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x130>
          break;
 8001602:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2bff      	cmp	r3, #255	; 0xff
 8001608:	d801      	bhi.n	800160e <HAL_GPIO_Init+0x13a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	e001      	b.n	8001612 <HAL_GPIO_Init+0x13e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2bff      	cmp	r3, #255	; 0xff
 8001618:	d802      	bhi.n	8001620 <HAL_GPIO_Init+0x14c>
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	e002      	b.n	8001626 <HAL_GPIO_Init+0x152>
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	3b08      	subs	r3, #8
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	210f      	movs	r1, #15
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	401a      	ands	r2, r3
 8001638:	6a39      	ldr	r1, [r7, #32]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80c1 	beq.w	80017d6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001654:	4b49      	ldr	r3, [pc, #292]	; (800177c <HAL_GPIO_Init+0x2a8>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_GPIO_Init+0x2a8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b46      	ldr	r3, [pc, #280]	; (800177c <HAL_GPIO_Init+0x2a8>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_GPIO_Init+0x2ac>)
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001678:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3c      	ldr	r2, [pc, #240]	; (8001784 <HAL_GPIO_Init+0x2b0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d01f      	beq.n	80016d8 <HAL_GPIO_Init+0x204>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3b      	ldr	r2, [pc, #236]	; (8001788 <HAL_GPIO_Init+0x2b4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d019      	beq.n	80016d4 <HAL_GPIO_Init+0x200>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a3a      	ldr	r2, [pc, #232]	; (800178c <HAL_GPIO_Init+0x2b8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d013      	beq.n	80016d0 <HAL_GPIO_Init+0x1fc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a39      	ldr	r2, [pc, #228]	; (8001790 <HAL_GPIO_Init+0x2bc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00d      	beq.n	80016cc <HAL_GPIO_Init+0x1f8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a38      	ldr	r2, [pc, #224]	; (8001794 <HAL_GPIO_Init+0x2c0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_GPIO_Init+0x1f4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a37      	ldr	r2, [pc, #220]	; (8001798 <HAL_GPIO_Init+0x2c4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_GPIO_Init+0x1f0>
 80016c0:	2305      	movs	r3, #5
 80016c2:	e00a      	b.n	80016da <HAL_GPIO_Init+0x206>
 80016c4:	2306      	movs	r3, #6
 80016c6:	e008      	b.n	80016da <HAL_GPIO_Init+0x206>
 80016c8:	2304      	movs	r3, #4
 80016ca:	e006      	b.n	80016da <HAL_GPIO_Init+0x206>
 80016cc:	2303      	movs	r3, #3
 80016ce:	e004      	b.n	80016da <HAL_GPIO_Init+0x206>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e002      	b.n	80016da <HAL_GPIO_Init+0x206>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_GPIO_Init+0x206>
 80016d8:	2300      	movs	r3, #0
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	f002 0203 	and.w	r2, r2, #3
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	4093      	lsls	r3, r2
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ea:	4925      	ldr	r1, [pc, #148]	; (8001780 <HAL_GPIO_Init+0x2ac>)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4924      	ldr	r1, [pc, #144]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	4920      	ldr	r1, [pc, #128]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800171c:	4013      	ands	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	491a      	ldr	r1, [pc, #104]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001744:	4013      	ands	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d025      	beq.n	80017a0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	4910      	ldr	r1, [pc, #64]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
 8001760:	e025      	b.n	80017ae <HAL_GPIO_Init+0x2da>
 8001762:	bf00      	nop
 8001764:	10320000 	.word	0x10320000
 8001768:	10310000 	.word	0x10310000
 800176c:	10220000 	.word	0x10220000
 8001770:	10210000 	.word	0x10210000
 8001774:	10120000 	.word	0x10120000
 8001778:	10110000 	.word	0x10110000
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000
 8001790:	40011400 	.word	0x40011400
 8001794:	40011800 	.word	0x40011800
 8001798:	40011c00 	.word	0x40011c00
 800179c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4913      	ldr	r1, [pc, #76]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	490e      	ldr	r1, [pc, #56]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4909      	ldr	r1, [pc, #36]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f47f ae7e 	bne.w	80014e8 <HAL_GPIO_Init+0x14>
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	372c      	adds	r7, #44	; 0x2c
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183a:	787b      	ldrb	r3, [r7, #1]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001840:	887a      	ldrh	r2, [r7, #2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001846:	e003      	b.n	8001850 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	611a      	str	r2, [r3, #16]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43d9      	mvns	r1, r3
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	400b      	ands	r3, r1
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e272      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8087 	beq.w	80019ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b8:	4b8f      	ldr	r3, [pc, #572]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d112      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
 80018c4:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d10b      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x12c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d168      	bne.n	80019b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e24c      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x76>
 80018f4:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a7f      	ldr	r2, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e02e      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x98>
 800190a:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7a      	ldr	r2, [pc, #488]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e01d      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0xbc>
 800192e:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a71      	ldr	r2, [pc, #452]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001948:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6a      	ldr	r2, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a67      	ldr	r2, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff f938 	bl	8000bdc <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff f934 	bl	8000bdc <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e200      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0xe4>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff f924 	bl	8000bdc <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff f920 	bl	8000bdc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1ec      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x10c>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c6:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d11c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1c0      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4939      	ldr	r1, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	e03a      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff f8d9 	bl	8000bdc <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f8d5 	bl	8000bdc <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1a1      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4927      	ldr	r1, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff f8b8 	bl	8000bdc <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff f8b4 	bl	8000bdc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e180      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03a      	beq.n	8001b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f898 	bl	8000bdc <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f894 	bl	8000bdc <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e160      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 faa6 	bl	8002020 <RCC_Delay>
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff f87e 	bl	8000bdc <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae2:	e00f      	b.n	8001b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f87a 	bl	8000bdc <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e146      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	42420000 	.word	0x42420000
 8001b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b92      	ldr	r3, [pc, #584]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e9      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a6 	beq.w	8001c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a87      	ldr	r2, [pc, #540]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b82      	ldr	r3, [pc, #520]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f83b 	bl	8000bdc <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff f837 	bl	8000bdc <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e103      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x312>
 8001b90:	4b6f      	ldr	r3, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a6e      	ldr	r2, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e02d      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x334>
 8001ba6:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a69      	ldr	r2, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a66      	ldr	r2, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x356>
 8001bc8:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a60      	ldr	r2, [pc, #384]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a5a      	ldr	r2, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a57      	ldr	r2, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7fe ffeb 	bl	8000bdc <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe ffe7 	bl	8000bdc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0b1      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x37e>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7fe ffd5 	bl	8000bdc <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7fe ffd1 	bl	8000bdc <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e09b      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a3b      	ldr	r2, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8087 	beq.w	8001d82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d061      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d146      	bne.n	8001d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ffa5 	bl	8000bdc <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe ffa1 	bl	8000bdc <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e06d      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4921      	ldr	r1, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a19      	ldr	r1, [r3, #32]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	491b      	ldr	r1, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe ff75 	bl	8000bdc <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe ff71 	bl	8000bdc <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e03d      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46a>
 8001d14:	e035      	b.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff5e 	bl	8000bdc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ff5a 	bl	8000bdc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e026      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x498>
 8001d42:	e01e      	b.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e019      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_OscConfig+0x500>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0d0      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b6a      	ldr	r3, [pc, #424]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4965      	ldr	r1, [pc, #404]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b8      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e04:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	494d      	ldr	r1, [pc, #308]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d040      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e073      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06b      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4936      	ldr	r1, [pc, #216]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7fe feac 	bl	8000bdc <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7fe fea8 	bl	8000bdc <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e053      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d210      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4922      	ldr	r1, [pc, #136]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e032      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4916      	ldr	r1, [pc, #88]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	490e      	ldr	r1, [pc, #56]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1e:	f000 f821 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	5ccb      	ldrb	r3, [r1, r3]
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1cc>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1d0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fe0a 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40021000 	.word	0x40021000
 8001f58:	080025d4 	.word	0x080025d4
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	20000008 	.word	0x20000008

08001f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f64:	b490      	push	{r4, r7}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f6c:	1d3c      	adds	r4, r7, #4
 8001f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f74:	f240 2301 	movw	r3, #513	; 0x201
 8001f78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x46>
 8001fa2:	e02b      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fa6:	623b      	str	r3, [r7, #32]
      break;
 8001fa8:	e02b      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	0c9b      	lsrs	r3, r3, #18
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3328      	adds	r3, #40	; 0x28
 8001fb4:	443b      	add	r3, r7
 8001fb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0c5b      	lsrs	r3, r3, #17
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	3328      	adds	r3, #40	; 0x28
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fde:	fb03 f202 	mul.w	r2, r3, r2
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fea:	e004      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	623b      	str	r3, [r7, #32]
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ffe:	623b      	str	r3, [r7, #32]
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	6a3b      	ldr	r3, [r7, #32]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bc90      	pop	{r4, r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	080025c4 	.word	0x080025c4
 8002014:	40021000 	.word	0x40021000
 8002018:	007a1200 	.word	0x007a1200
 800201c:	003d0900 	.word	0x003d0900

08002020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <RCC_Delay+0x34>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <RCC_Delay+0x38>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800203c:	bf00      	nop
  }
  while (Delay --);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <RCC_Delay+0x1c>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000004 	.word	0x20000004
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e076      	b.n	800215c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800207e:	d009      	beq.n	8002094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
 8002086:	e005      	b.n	8002094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fc44 	bl	800093c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	ea42 0103 	orr.w	r1, r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	0c1a      	lsrs	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f002 0204 	and.w	r2, r2, #4
 800213a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_SPI_Transmit_DMA+0x20>
 8002180:	2302      	movs	r3, #2
 8002182:	e09b      	b.n	80022bc <HAL_SPI_Transmit_DMA+0x158>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d002      	beq.n	800219e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002198:	2302      	movs	r3, #2
 800219a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800219c:	e089      	b.n	80022b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_SPI_Transmit_DMA+0x46>
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021ae:	e080      	b.n	80022b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2203      	movs	r2, #3
 80021b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f6:	d10f      	bne.n	8002218 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002206:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002216:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221c:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <HAL_SPI_Transmit_DMA+0x160>)
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002224:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <HAL_SPI_Transmit_DMA+0x164>)
 8002226:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_SPI_Transmit_DMA+0x168>)
 800222e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002234:	2200      	movs	r2, #0
 8002236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4619      	mov	r1, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002250:	f7fe fe76 	bl	8000f40 <HAL_DMA_Start_IT>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f043 0210 	orr.w	r2, r3, #16
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002272:	e01e      	b.n	80022b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d007      	beq.n	8002292 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0220 	orr.w	r2, r2, #32
 80022a0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0202 	orr.w	r2, r2, #2
 80022b0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	080023ad 	.word	0x080023ad
 80022c8:	08002307 	.word	0x08002307
 80022cc:	080023c9 	.word	0x080023c9

080022d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002314:	f7fe fc62 	bl	8000bdc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b20      	cmp	r3, #32
 8002326:	d03b      	beq.n	80023a0 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0220 	bic.w	r2, r2, #32
 8002336:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0202 	bic.w	r2, r2, #2
 8002346:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	2164      	movs	r1, #100	; 0x64
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	f000 f8e3 	bl	8002518 <SPI_EndRxTxTransaction>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	f043 0220 	orr.w	r2, r3, #32
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002398:	6978      	ldr	r0, [r7, #20]
 800239a:	f7ff ffab 	bl	80022f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800239e:	e002      	b.n	80023a6 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f7ff ff95 	bl	80022d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff91 	bl	80022e2 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0203 	bic.w	r2, r2, #3
 80023e4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff ff7a 	bl	80022f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002418:	f7fe fbe0 	bl	8000bdc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4413      	add	r3, r2
 8002426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002428:	f7fe fbd8 	bl	8000bdc <HAL_GetTick>
 800242c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	015b      	lsls	r3, r3, #5
 8002434:	0d1b      	lsrs	r3, r3, #20
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800243e:	e054      	b.n	80024ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d050      	beq.n	80024ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002448:	f7fe fbc8 	bl	8000bdc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	429a      	cmp	r2, r3
 8002456:	d902      	bls.n	800245e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d13d      	bne.n	80024da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800246c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002476:	d111      	bne.n	800249c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002480:	d004      	beq.n	800248c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248a:	d107      	bne.n	800249c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d10f      	bne.n	80024c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e017      	b.n	800250a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	429a      	cmp	r2, r3
 8002506:	d19b      	bne.n	8002440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000004 	.word	0x20000004

08002518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2200      	movs	r2, #0
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff ff6a 	bl	8002408 <SPI_WaitFlagStateUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e000      	b.n	800254c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	2600      	movs	r6, #0
 8002558:	4d0c      	ldr	r5, [pc, #48]	; (800258c <__libc_init_array+0x38>)
 800255a:	4c0d      	ldr	r4, [pc, #52]	; (8002590 <__libc_init_array+0x3c>)
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	42a6      	cmp	r6, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	f000 f822 	bl	80025ac <_init>
 8002568:	2600      	movs	r6, #0
 800256a:	4d0a      	ldr	r5, [pc, #40]	; (8002594 <__libc_init_array+0x40>)
 800256c:	4c0a      	ldr	r4, [pc, #40]	; (8002598 <__libc_init_array+0x44>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	42a6      	cmp	r6, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	f855 3b04 	ldr.w	r3, [r5], #4
 800257c:	4798      	blx	r3
 800257e:	3601      	adds	r6, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	f855 3b04 	ldr.w	r3, [r5], #4
 8002586:	4798      	blx	r3
 8002588:	3601      	adds	r6, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	080025e4 	.word	0x080025e4
 8002590:	080025e4 	.word	0x080025e4
 8002594:	080025e4 	.word	0x080025e4
 8002598:	080025e8 	.word	0x080025e8

0800259c <memset>:
 800259c:	4603      	mov	r3, r0
 800259e:	4402      	add	r2, r0
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d100      	bne.n	80025a6 <memset+0xa>
 80025a4:	4770      	bx	lr
 80025a6:	f803 1b01 	strb.w	r1, [r3], #1
 80025aa:	e7f9      	b.n	80025a0 <memset+0x4>

080025ac <_init>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr

080025b8 <_fini>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	bf00      	nop
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr
