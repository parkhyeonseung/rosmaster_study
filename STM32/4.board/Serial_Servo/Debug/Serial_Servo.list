
Serial_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e08  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d8  080040d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080040d8  080040d8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d8  080040d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000074  08004154  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004154  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ae6  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207b  00000000  00000000  00027b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00029c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af26  00000000  00000000  0002acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c90e  00000000  00000000  00045bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092011  00000000  00000000  000524fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e450d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002850  00000000  00000000  000e4560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08003fd4 	.word	0x08003fd4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08003fd4 	.word	0x08003fd4

08000224 <Bsp_Led_Show_State_Handle>:
#include "bsp.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f001 fd93 	bl	8001d72 <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000090 	.word	0x20000090
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 f883 	bl	8000368 <Beep_On_Time>
	USART1_Init();
 8000262:	f000 f91d 	bl	80004a0 <USART1_Init>
	USART3_Init();
 8000266:	f000 f93b 	bl	80004e0 <USART3_Init>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <Bsp_Loop>:
uint8_t servo_id = 0x01;

// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 8000274:	2001      	movs	r0, #1
 8000276:	f000 f8e9 	bl	800044c <Key1_State>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d02e      	beq.n	80002de <Bsp_Loop+0x6e>
	{
		Beep_On_Time(50);
 8000280:	2032      	movs	r0, #50	; 0x32
 8000282:	f000 f871 	bl	8000368 <Beep_On_Time>
		static int press = 0;
		press++;
 8000286:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <Bsp_Loop+0x84>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <Bsp_Loop+0x84>)
 800028e:	6013      	str	r3, [r2, #0]
		printf("press:%d\n", press);
 8000290:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <Bsp_Loop+0x84>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4619      	mov	r1, r3
 8000296:	4818      	ldr	r0, [pc, #96]	; (80002f8 <Bsp_Loop+0x88>)
 8000298:	f002 ff08 	bl	80030ac <iprintf>

		UartServo_Get_Angle(servo_id);
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <Bsp_Loop+0x8c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9fc 	bl	800069e <UartServo_Get_Angle>
		HAL_Delay(12);
 80002a6:	200c      	movs	r0, #12
 80002a8:	f000 fe7a 	bl	8000fa0 <HAL_Delay>
		if (press%2)
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <Bsp_Loop+0x84>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d009      	beq.n	80002cc <Bsp_Loop+0x5c>
		{
			UartServo_Ctrl(servo_id, 1000, 500);
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <Bsp_Loop+0x8c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f983 	bl	80005d0 <UartServo_Ctrl>
 80002ca:	e008      	b.n	80002de <Bsp_Loop+0x6e>
		}
		else
		{
			UartServo_Ctrl(servo_id, 3000, 500);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <Bsp_Loop+0x8c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f979 	bl	80005d0 <UartServo_Ctrl>
		}
	}

	UartServo_Rx_Parse();
 80002de:	f000 fa73 	bl	80007c8 <UartServo_Rx_Parse>
	Bsp_Led_Show_State_Handle();
 80002e2:	f7ff ff9f 	bl	8000224 <Bsp_Led_Show_State_Handle>
	Beep_Timeout_Close_Handle();
 80002e6:	f000 f87f 	bl	80003e8 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 80002ea:	200a      	movs	r0, #10
 80002ec:	f000 fe58 	bl	8000fa0 <HAL_Delay>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000094 	.word	0x20000094
 80002f8:	08003fec 	.word	0x08003fec
 80002fc:	20000000 	.word	0x20000000

08000300 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <Beep_Set_Time+0x1c>)
 800030c:	88fb      	ldrh	r3, [r7, #6]
 800030e:	8013      	strh	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000098 	.word	0x20000098

08000320 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000324:	4b02      	ldr	r3, [pc, #8]	; (8000330 <Beep_Get_Time+0x10>)
 8000326:	881b      	ldrh	r3, [r3, #0]
}
 8000328:	4618      	mov	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000098 	.word	0x20000098

08000334 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800033e:	4a04      	ldr	r2, [pc, #16]	; (8000350 <Beep_Set_State+0x1c>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	7013      	strb	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	2000009a 	.word	0x2000009a

08000354 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	return beep_state;
 8000358:	4b02      	ldr	r3, [pc, #8]	; (8000364 <Beep_Get_State+0x10>)
 800035a:	781b      	ldrb	r3, [r3, #0]
}
 800035c:	4618      	mov	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	2000009a 	.word	0x2000009a

08000368 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10b      	bne.n	8000390 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000378:	2001      	movs	r0, #1
 800037a:	f7ff ffdb 	bl	8000334 <Beep_Set_State>
		Beep_Set_Time(0);
 800037e:	2000      	movs	r0, #0
 8000380:	f7ff ffbe 	bl	8000300 <Beep_Set_Time>
		BEEP_ON();
 8000384:	2201      	movs	r2, #1
 8000386:	2120      	movs	r1, #32
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <Beep_On_Time+0x78>)
 800038a:	f001 fcda 	bl	8001d42 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 800038e:	e022      	b.n	80003d6 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000390:	88fb      	ldrh	r3, [r7, #6]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10b      	bne.n	80003ae <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ffcc 	bl	8000334 <Beep_Set_State>
		Beep_Set_Time(0);
 800039c:	2000      	movs	r0, #0
 800039e:	f7ff ffaf 	bl	8000300 <Beep_Set_Time>
		BEEP_OFF();
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	480e      	ldr	r0, [pc, #56]	; (80003e0 <Beep_On_Time+0x78>)
 80003a8:	f001 fccb 	bl	8001d42 <HAL_GPIO_WritePin>
}
 80003ac:	e013      	b.n	80003d6 <Beep_On_Time+0x6e>
		if (time >= 10)
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	2b09      	cmp	r3, #9
 80003b2:	d910      	bls.n	80003d6 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 80003b4:	2002      	movs	r0, #2
 80003b6:	f7ff ffbd 	bl	8000334 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <Beep_On_Time+0x7c>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff9a 	bl	8000300 <Beep_Set_Time>
			BEEP_ON();
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <Beep_On_Time+0x78>)
 80003d2:	f001 fcb6 	bl	8001d42 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40011000 	.word	0x40011000
 80003e4:	cccccccd 	.word	0xcccccccd

080003e8 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80003ec:	f7ff ffb2 	bl	8000354 <Beep_Get_State>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d113      	bne.n	800041e <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 80003f6:	f7ff ff93 	bl	8000320 <Beep_Get_Time>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <Beep_Timeout_Close_Handle+0x3c>)
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	3b01      	subs	r3, #1
 8000406:	b29a      	uxth	r2, r3
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <Beep_Timeout_Close_Handle+0x3c>)
 800040a:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 800040c:	e007      	b.n	800041e <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800040e:	2200      	movs	r2, #0
 8000410:	2120      	movs	r1, #32
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <Beep_Timeout_Close_Handle+0x40>)
 8000414:	f001 fc95 	bl	8001d42 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000418:	2000      	movs	r0, #0
 800041a:	f7ff ff8b 	bl	8000334 <Beep_Set_State>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000098 	.word	0x20000098
 8000428:	40011000 	.word	0x40011000

0800042c <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000430:	2104      	movs	r1, #4
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <Key1_is_Press+0x1c>)
 8000434:	f001 fc6e 	bl	8001d14 <HAL_GPIO_ReadPin>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d101      	bne.n	8000442 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 800043e:	2301      	movs	r3, #1
 8000440:	e000      	b.n	8000444 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40011400 	.word	0x40011400

0800044c <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8000456:	f7ff ffe9 	bl	800042c <Key1_is_Press>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d10e      	bne.n	800047e <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <Key1_State+0x50>)
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	3301      	adds	r3, #1
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	429a      	cmp	r2, r3
 800046e:	da09      	bge.n	8000484 <Key1_State+0x38>
		{
			key1_state++;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <Key1_State+0x50>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <Key1_State+0x50>)
 800047a:	801a      	strh	r2, [r3, #0]
 800047c:	e002      	b.n	8000484 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <Key1_State+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <Key1_State+0x50>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d101      	bne.n	8000490 <Key1_State+0x44>
	{
		return KEY_PRESS;
 800048c:	2301      	movs	r3, #1
 800048e:	e000      	b.n	8000492 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	2000009c 	.word	0x2000009c

080004a0 <USART1_Init>:
uint8_t RxTemp = 0;
uint8_t RxTemp_3 = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	4903      	ldr	r1, [pc, #12]	; (80004b4 <USART1_Init+0x14>)
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <USART1_Init+0x18>)
 80004aa:	f002 f974 	bl	8002796 <HAL_UART_Receive_IT>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	2000009e 	.word	0x2000009e
 80004b8:	200000b4 	.word	0x200000b4

080004bc <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004cc:	2201      	movs	r2, #1
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <USART1_Send_U8+0x20>)
 80004d0:	f002 f8cf 	bl	8002672 <HAL_UART_Transmit>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000b4 	.word	0x200000b4

080004e0 <USART3_Init>:
    #endif
}

// Initialize USART3  初始化串口3
void USART3_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&RxTemp, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	4903      	ldr	r1, [pc, #12]	; (80004f4 <USART3_Init+0x14>)
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <USART3_Init+0x18>)
 80004ea:	f002 f954 	bl	8002796 <HAL_UART_Receive_IT>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000009e 	.word	0x2000009e
 80004f8:	200000f8 	.word	0x200000f8

080004fc <USART3_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART3_Send_U8(uint8_t ch)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000506:	1df9      	adds	r1, r7, #7
 8000508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800050c:	2201      	movs	r2, #1
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <USART3_Send_U8+0x20>)
 8000510:	f002 f8af 	bl	8002672 <HAL_UART_Transmit>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000f8 	.word	0x200000f8

08000520 <USART3_Send_ArrayU8>:

// The serial port sends a string of data  串口发送一串数据
void USART3_Send_ArrayU8(uint8_t *BufferPtr, uint16_t Length)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	807b      	strh	r3, [r7, #2]
    while (Length--)
 800052c:	e007      	b.n	800053e <USART3_Send_ArrayU8+0x1e>
    {
        USART3_Send_U8(*BufferPtr);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffe2 	bl	80004fc <USART3_Send_U8>
        BufferPtr++;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
    while (Length--)
 800053e:	887b      	ldrh	r3, [r7, #2]
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	807a      	strh	r2, [r7, #2]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1f2      	bne.n	800052e <USART3_Send_ArrayU8+0xe>
    }
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_UART_RxCpltCallback>:


// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    if (huart==&huart1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a0f      	ldr	r2, [pc, #60]	; (800059c <HAL_UART_RxCpltCallback+0x48>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d109      	bne.n	8000578 <HAL_UART_RxCpltCallback+0x24>
    {
        // 测试发送数据，实际应用中不应该在中断中发送数据
        // Test sending data. In practice, data should not be sent during interrupts  
        USART1_Send_U8(RxTemp);
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_UART_RxCpltCallback+0x4c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffa7 	bl	80004bc <USART1_Send_U8>

        // Continue receiving data  继续接收数据
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	490b      	ldr	r1, [pc, #44]	; (80005a0 <HAL_UART_RxCpltCallback+0x4c>)
 8000572:	480a      	ldr	r0, [pc, #40]	; (800059c <HAL_UART_RxCpltCallback+0x48>)
 8000574:	f002 f90f 	bl	8002796 <HAL_UART_Receive_IT>
    }
    if (huart==&huart3)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_UART_RxCpltCallback+0x50>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d109      	bne.n	8000594 <HAL_UART_RxCpltCallback+0x40>
    {
        UartServo_Revice(RxTemp_3);
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_UART_RxCpltCallback+0x54>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f8c7 	bl	8000718 <UartServo_Revice>
        // Continue receiving data  继续接收数据
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&RxTemp_3, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	4906      	ldr	r1, [pc, #24]	; (80005a8 <HAL_UART_RxCpltCallback+0x54>)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <HAL_UART_RxCpltCallback+0x50>)
 8000590:	f002 f901 	bl	8002796 <HAL_UART_Receive_IT>
    }
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000b4 	.word	0x200000b4
 80005a0:	2000009e 	.word	0x2000009e
 80005a4:	200000f8 	.word	0x200000f8
 80005a8:	2000009f 	.word	0x2000009f

080005ac <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f002 f858 	bl	8002672 <HAL_UART_Transmit>
    return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000b4 	.word	0x200000b4

080005d0 <UartServo_Ctrl>:



// Control Servo 控制舵机, id=[1-254], value=[MIN_PULSE, MAX_PULSE], time=[0, 2000]
void UartServo_Ctrl(uint8_t id, uint16_t value, uint16_t time)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	460b      	mov	r3, r1
 80005dc:	80bb      	strh	r3, [r7, #4]
 80005de:	4613      	mov	r3, r2
 80005e0:	807b      	strh	r3, [r7, #2]
    uint8_t head1 = 0xff;
 80005e2:	23ff      	movs	r3, #255	; 0xff
 80005e4:	77fb      	strb	r3, [r7, #31]
    uint8_t head2 = 0xff;
 80005e6:	23ff      	movs	r3, #255	; 0xff
 80005e8:	77bb      	strb	r3, [r7, #30]
    uint8_t s_id = id & 0xff;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	777b      	strb	r3, [r7, #29]
    uint8_t len = 0x07;
 80005ee:	2307      	movs	r3, #7
 80005f0:	773b      	strb	r3, [r7, #28]
    uint8_t cmd = 0x03;
 80005f2:	2303      	movs	r3, #3
 80005f4:	76fb      	strb	r3, [r7, #27]
    uint8_t addr = 0x2a;
 80005f6:	232a      	movs	r3, #42	; 0x2a
 80005f8:	76bb      	strb	r3, [r7, #26]

    if (value > MAX_PULSE)
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000600:	d903      	bls.n	800060a <UartServo_Ctrl+0x3a>
        value = MEDIAN_VALUE;
 8000602:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000606:	80bb      	strh	r3, [r7, #4]
 8000608:	e005      	b.n	8000616 <UartServo_Ctrl+0x46>
    else if (value < MIN_PULSE)
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	2b5f      	cmp	r3, #95	; 0x5f
 800060e:	d802      	bhi.n	8000616 <UartServo_Ctrl+0x46>
        value = MEDIAN_VALUE;
 8000610:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000614:	80bb      	strh	r3, [r7, #4]

    uint8_t pos_H = (value >> 8) & 0xff;
 8000616:	88bb      	ldrh	r3, [r7, #4]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	b29b      	uxth	r3, r3
 800061c:	767b      	strb	r3, [r7, #25]
    uint8_t pos_L = value & 0xff;
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	763b      	strb	r3, [r7, #24]

    uint8_t time_H = (time >> 8) & 0xff;
 8000622:	887b      	ldrh	r3, [r7, #2]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	75fb      	strb	r3, [r7, #23]
    uint8_t time_L = time & 0xff;
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	75bb      	strb	r3, [r7, #22]

    uint8_t checknum = (~(s_id + len + cmd + addr +
 800062e:	7f7a      	ldrb	r2, [r7, #29]
 8000630:	7f3b      	ldrb	r3, [r7, #28]
 8000632:	4413      	add	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	7efb      	ldrb	r3, [r7, #27]
 8000638:	4413      	add	r3, r2
 800063a:	b2da      	uxtb	r2, r3
 800063c:	7ebb      	ldrb	r3, [r7, #26]
 800063e:	4413      	add	r3, r2
 8000640:	b2da      	uxtb	r2, r3
 8000642:	7e7b      	ldrb	r3, [r7, #25]
 8000644:	4413      	add	r3, r2
 8000646:	b2da      	uxtb	r2, r3
                          pos_H + pos_L + time_H + time_L)) & 0xff;
 8000648:	7e3b      	ldrb	r3, [r7, #24]
 800064a:	4413      	add	r3, r2
 800064c:	b2da      	uxtb	r2, r3
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	4413      	add	r3, r2
 8000652:	b2da      	uxtb	r2, r3
 8000654:	7dbb      	ldrb	r3, [r7, #22]
 8000656:	4413      	add	r3, r2
 8000658:	b2db      	uxtb	r3, r3
    uint8_t checknum = (~(s_id + len + cmd + addr +
 800065a:	43db      	mvns	r3, r3
 800065c:	757b      	strb	r3, [r7, #21]
    uint8_t data[] = {head1, head2, s_id, len, cmd, addr,
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	723b      	strb	r3, [r7, #8]
 8000662:	7fbb      	ldrb	r3, [r7, #30]
 8000664:	727b      	strb	r3, [r7, #9]
 8000666:	7f7b      	ldrb	r3, [r7, #29]
 8000668:	72bb      	strb	r3, [r7, #10]
 800066a:	7f3b      	ldrb	r3, [r7, #28]
 800066c:	72fb      	strb	r3, [r7, #11]
 800066e:	7efb      	ldrb	r3, [r7, #27]
 8000670:	733b      	strb	r3, [r7, #12]
 8000672:	7ebb      	ldrb	r3, [r7, #26]
 8000674:	737b      	strb	r3, [r7, #13]
 8000676:	7e7b      	ldrb	r3, [r7, #25]
 8000678:	73bb      	strb	r3, [r7, #14]
 800067a:	7e3b      	ldrb	r3, [r7, #24]
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	743b      	strb	r3, [r7, #16]
 8000682:	7dbb      	ldrb	r3, [r7, #22]
 8000684:	747b      	strb	r3, [r7, #17]
 8000686:	7d7b      	ldrb	r3, [r7, #21]
 8000688:	74bb      	strb	r3, [r7, #18]
                      pos_H, pos_L, time_H, time_L, checknum};

    USART3_Send_ArrayU8(data, sizeof(data));
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	210b      	movs	r1, #11
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff45 	bl	8000520 <USART3_Send_ArrayU8>
}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <UartServo_Get_Angle>:
/*****************************读数据*********************************/
/***************************read data*******************************/

// Request current position of servo  请求舵机当前位置
void UartServo_Get_Angle(uint8_t id)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	71fb      	strb	r3, [r7, #7]
    uint8_t head1 = 0xff;
 80006a8:	23ff      	movs	r3, #255	; 0xff
 80006aa:	75fb      	strb	r3, [r7, #23]
    uint8_t head2 = 0xff;
 80006ac:	23ff      	movs	r3, #255	; 0xff
 80006ae:	75bb      	strb	r3, [r7, #22]
    uint8_t s_id = id & 0xff;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	757b      	strb	r3, [r7, #21]
    uint8_t len = 0x04;
 80006b4:	2304      	movs	r3, #4
 80006b6:	753b      	strb	r3, [r7, #20]
    uint8_t cmd = 0x02;
 80006b8:	2302      	movs	r3, #2
 80006ba:	74fb      	strb	r3, [r7, #19]
    uint8_t param_H = 0x38;
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	74bb      	strb	r3, [r7, #18]
    uint8_t param_L = 0x02;
 80006c0:	2302      	movs	r3, #2
 80006c2:	747b      	strb	r3, [r7, #17]

    uint8_t checknum = (~(s_id + len + cmd + param_H + param_L)) & 0xff;
 80006c4:	7d7a      	ldrb	r2, [r7, #21]
 80006c6:	7d3b      	ldrb	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	7cfb      	ldrb	r3, [r7, #19]
 80006ce:	4413      	add	r3, r2
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	7cbb      	ldrb	r3, [r7, #18]
 80006d4:	4413      	add	r3, r2
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	7c7b      	ldrb	r3, [r7, #17]
 80006da:	4413      	add	r3, r2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	743b      	strb	r3, [r7, #16]
    uint8_t data[] = {head1, head2, s_id, len, cmd, param_H, param_L, checknum};
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
 80006e4:	723b      	strb	r3, [r7, #8]
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	727b      	strb	r3, [r7, #9]
 80006ea:	7d7b      	ldrb	r3, [r7, #21]
 80006ec:	72bb      	strb	r3, [r7, #10]
 80006ee:	7d3b      	ldrb	r3, [r7, #20]
 80006f0:	72fb      	strb	r3, [r7, #11]
 80006f2:	7cfb      	ldrb	r3, [r7, #19]
 80006f4:	733b      	strb	r3, [r7, #12]
 80006f6:	7cbb      	ldrb	r3, [r7, #18]
 80006f8:	737b      	strb	r3, [r7, #13]
 80006fa:	7c7b      	ldrb	r3, [r7, #17]
 80006fc:	73bb      	strb	r3, [r7, #14]
 80006fe:	7c3b      	ldrb	r3, [r7, #16]
 8000700:	73fb      	strb	r3, [r7, #15]
    USART3_Send_ArrayU8(data, sizeof(data));
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2108      	movs	r1, #8
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff09 	bl	8000520 <USART3_Send_ArrayU8>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <UartServo_Revice>:

// Receiving serial port data  接收串口数据
void UartServo_Revice(uint8_t Rx_Temp)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    switch (Rx_Flag)
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <UartServo_Revice+0xa0>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d024      	beq.n	8000774 <UartServo_Revice+0x5c>
 800072a:	2b02      	cmp	r3, #2
 800072c:	dc39      	bgt.n	80007a2 <UartServo_Revice+0x8a>
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <UartServo_Revice+0x20>
 8000732:	2b01      	cmp	r3, #1
 8000734:	d00a      	beq.n	800074c <UartServo_Revice+0x34>
            Rx_Flag = 0;
            New_Frame = 1;
        }
        break;
    default:
        break;
 8000736:	e034      	b.n	80007a2 <UartServo_Revice+0x8a>
        if (Rx_Temp == 0xff)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2bff      	cmp	r3, #255	; 0xff
 800073c:	d133      	bne.n	80007a6 <UartServo_Revice+0x8e>
            Rx_Data[0] = 0xff;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <UartServo_Revice+0xa4>)
 8000740:	22ff      	movs	r2, #255	; 0xff
 8000742:	701a      	strb	r2, [r3, #0]
            Rx_Flag = 1;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <UartServo_Revice+0xa0>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
        break;
 800074a:	e02c      	b.n	80007a6 <UartServo_Revice+0x8e>
        if (Rx_Temp == 0xf5)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2bf5      	cmp	r3, #245	; 0xf5
 8000750:	d109      	bne.n	8000766 <UartServo_Revice+0x4e>
            Rx_Data[1] = 0xf5;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <UartServo_Revice+0xa4>)
 8000754:	22f5      	movs	r2, #245	; 0xf5
 8000756:	705a      	strb	r2, [r3, #1]
            Rx_Flag = 2;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <UartServo_Revice+0xa0>)
 800075a:	2202      	movs	r2, #2
 800075c:	701a      	strb	r2, [r3, #0]
            Rx_index = 2;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <UartServo_Revice+0xa8>)
 8000760:	2202      	movs	r2, #2
 8000762:	701a      	strb	r2, [r3, #0]
        break;
 8000764:	e022      	b.n	80007ac <UartServo_Revice+0x94>
            Rx_Flag = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <UartServo_Revice+0xa0>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
            Rx_Data[0] = 0x0;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <UartServo_Revice+0xa4>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
        break;
 8000772:	e01b      	b.n	80007ac <UartServo_Revice+0x94>
        Rx_Data[Rx_index] = Rx_Temp;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <UartServo_Revice+0xa8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <UartServo_Revice+0xa4>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	5453      	strb	r3, [r2, r1]
        Rx_index++;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <UartServo_Revice+0xa8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <UartServo_Revice+0xa8>)
 800078a:	701a      	strb	r2, [r3, #0]
        if (Rx_index >= RX_MAX_BUF)
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <UartServo_Revice+0xa8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b07      	cmp	r3, #7
 8000792:	d90a      	bls.n	80007aa <UartServo_Revice+0x92>
            Rx_Flag = 0;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <UartServo_Revice+0xa0>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
            New_Frame = 1;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <UartServo_Revice+0xac>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
        break;
 80007a0:	e003      	b.n	80007aa <UartServo_Revice+0x92>
        break;
 80007a2:	bf00      	nop
 80007a4:	e002      	b.n	80007ac <UartServo_Revice+0x94>
        break;
 80007a6:	bf00      	nop
 80007a8:	e000      	b.n	80007ac <UartServo_Revice+0x94>
        break;
 80007aa:	bf00      	nop
    }
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000ad 	.word	0x200000ad
 80007bc:	200000a4 	.word	0x200000a4
 80007c0:	200000ac 	.word	0x200000ac
 80007c4:	200000a0 	.word	0x200000a0

080007c8 <UartServo_Rx_Parse>:

// 解析串口数据, 读取成功返回1， 否则返回0 
// Parses serial port data, returns 1 on success, 0 otherwise
uint8_t UartServo_Rx_Parse(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
    if (New_Frame)
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <UartServo_Rx_Parse+0x80>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d030      	beq.n	800083c <UartServo_Rx_Parse+0x74>
    {
        result = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	71fb      	strb	r3, [r7, #7]
        New_Frame = 0;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <UartServo_Rx_Parse+0x80>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
        uint8_t checknum = (~(Rx_Data[2] + Rx_Data[3] + Rx_Data[4] + Rx_Data[5] + Rx_Data[6])) & 0xff;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <UartServo_Rx_Parse+0x84>)
 80007e6:	789a      	ldrb	r2, [r3, #2]
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <UartServo_Rx_Parse+0x84>)
 80007ea:	78db      	ldrb	r3, [r3, #3]
 80007ec:	4413      	add	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <UartServo_Rx_Parse+0x84>)
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <UartServo_Rx_Parse+0x84>)
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	4413      	add	r3, r2
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <UartServo_Rx_Parse+0x84>)
 8000802:	799b      	ldrb	r3, [r3, #6]
 8000804:	4413      	add	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	71bb      	strb	r3, [r7, #6]
        if (checknum == Rx_Data[7])
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <UartServo_Rx_Parse+0x84>)
 800080e:	79db      	ldrb	r3, [r3, #7]
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	429a      	cmp	r2, r3
 8000814:	d112      	bne.n	800083c <UartServo_Rx_Parse+0x74>
        {
            uint8_t s_id = Rx_Data[2];
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <UartServo_Rx_Parse+0x84>)
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	717b      	strb	r3, [r7, #5]
            uint16_t read_value = Rx_Data[5] << 8 | Rx_Data[6];
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <UartServo_Rx_Parse+0x84>)
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <UartServo_Rx_Parse+0x84>)
 8000826:	799b      	ldrb	r3, [r3, #6]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	807b      	strh	r3, [r7, #2]

            // Print the servo position data  打印读取到舵机位置数据
            printf("read arm value:%d, %d\n", s_id, read_value);
 8000830:	797b      	ldrb	r3, [r7, #5]
 8000832:	887a      	ldrh	r2, [r7, #2]
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <UartServo_Rx_Parse+0x88>)
 8000838:	f002 fc38 	bl	80030ac <iprintf>
        }
    }
    return result;
 800083c:	79fb      	ldrb	r3, [r7, #7]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000a0 	.word	0x200000a0
 800084c:	200000a4 	.word	0x200000a4
 8000850:	08004000 	.word	0x08004000

08000854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_DMA_Init+0x38>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <MX_DMA_Init+0x38>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_DMA_Init+0x38>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	200e      	movs	r0, #14
 8000878:	f000 fc8d 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800087c:	200e      	movs	r0, #14
 800087e:	f000 fca6 	bl	80011ce <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0320 	and.w	r3, r3, #32
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f242 0120 	movw	r1, #8224	; 0x2020
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <MX_GPIO_Init+0xac>)
 80008f4:	f001 fa25 	bl	8001d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 80008f8:	f242 0320 	movw	r3, #8224	; 0x2020
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <MX_GPIO_Init+0xac>)
 8000912:	f001 f86b 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000916:	2304      	movs	r3, #4
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_GPIO_Init+0xb0>)
 800092a:	f001 f85f 	bl	80019ec <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	40011000 	.word	0x40011000
 8000940:	40011400 	.word	0x40011400

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f000 fac8 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f80d 	bl	800096a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff ff9e 	bl	8000890 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000954:	f000 f972 	bl	8000c3c <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000958:	f7ff ff7c 	bl	8000854 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800095c:	f000 f998 	bl	8000c90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8000960:	f7ff fc7a 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8000964:	f7ff fc84 	bl	8000270 <Bsp_Loop>
 8000968:	e7fc      	b.n	8000964 <main+0x20>

0800096a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b090      	sub	sp, #64	; 0x40
 800096e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	2228      	movs	r2, #40	; 0x28
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fb8f 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000994:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099a:	2301      	movs	r3, #1
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f9f6 	bl	8001da4 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009be:	f000 f819 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2302      	movs	r3, #2
 80009c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fc63 	bl	80022a8 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009e8:	f000 f804 	bl	80009f4 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3740      	adds	r7, #64	; 0x40
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_MspInit+0x60>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_MspInit+0x60>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 fa5d 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <DMA1_Channel4_IRQHandler+0x10>)
 8000aba:	f000 fd5b 	bl	8001574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000013c 	.word	0x2000013c

08000ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <USART1_IRQHandler+0x10>)
 8000ace:	f001 fe93 	bl	80027f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000b4 	.word	0x200000b4

08000adc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USART3_IRQHandler+0x10>)
 8000ae2:	f001 fe89 	bl	80027f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000f8 	.word	0x200000f8

08000af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
	}

return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e009      	b.n	8000b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fd31 	bl	80005ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf1      	blt.n	8000b3c <_write+0x12>
	}
	return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_close>:

int _close(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b88:	605a      	str	r2, [r3, #4]
	return 0;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b085      	sub	sp, #20
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
	return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f002 fa28 	bl	8003048 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000c000 	.word	0x2000c000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	200000b0 	.word	0x200000b0
 8000c2c:	20000198 	.word	0x20000198

08000c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART1_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c74:	f001 fcb0 	bl	80025d8 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f7ff feb9 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000b4 	.word	0x200000b4
 8000c8c:	40013800 	.word	0x40013800

08000c90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART3_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cc8:	f001 fc86 	bl	80025d8 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f7ff fe8f 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000f8 	.word	0x200000f8
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a5c      	ldr	r2, [pc, #368]	; (8000e70 <HAL_UART_MspInit+0x18c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d160      	bne.n	8000dc6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d04:	4b5b      	ldr	r3, [pc, #364]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a5a      	ldr	r2, [pc, #360]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a54      	ldr	r2, [pc, #336]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b52      	ldr	r3, [pc, #328]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	484b      	ldr	r0, [pc, #300]	; (8000e78 <HAL_UART_MspInit+0x194>)
 8000d4a:	f000 fe4f 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4845      	ldr	r0, [pc, #276]	; (8000e78 <HAL_UART_MspInit+0x194>)
 8000d64:	f000 fe42 	bl	80019ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d6a:	4a45      	ldr	r2, [pc, #276]	; (8000e80 <HAL_UART_MspInit+0x19c>)
 8000d6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d70:	2210      	movs	r2, #16
 8000d72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d80:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d86:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d92:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d98:	4838      	ldr	r0, [pc, #224]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000d9a:	f000 fa33 	bl	8001204 <HAL_DMA_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000da4:	f7ff fe26 	bl	80009f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
 8000dae:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <HAL_UART_MspInit+0x198>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2025      	movs	r0, #37	; 0x25
 8000dba:	f000 f9ec 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dbe:	2025      	movs	r0, #37	; 0x25
 8000dc0:	f000 fa05 	bl	80011ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dc4:	e050      	b.n	8000e68 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2e      	ldr	r2, [pc, #184]	; (8000e84 <HAL_UART_MspInit+0x1a0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d14b      	bne.n	8000e68 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a27      	ldr	r2, [pc, #156]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dda:	61d3      	str	r3, [r2, #28]
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_UART_MspInit+0x190>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <HAL_UART_MspInit+0x1a4>)
 8000e16:	f000 fde9 	bl	80019ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4816      	ldr	r0, [pc, #88]	; (8000e88 <HAL_UART_MspInit+0x1a4>)
 8000e30:	f000 fddc 	bl	80019ec <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_UART_MspInit+0x1a8>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_UART_MspInit+0x1a8>)
 8000e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e56:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2027      	movs	r0, #39	; 0x27
 8000e5e:	f000 f99a 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e62:	2027      	movs	r0, #39	; 0x27
 8000e64:	f000 f9b3 	bl	80011ce <HAL_NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40013800 	.word	0x40013800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	2000013c 	.word	0x2000013c
 8000e80:	40020044 	.word	0x40020044
 8000e84:	40004800 	.word	0x40004800
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb6:	f7ff febb 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f002 f8cb 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fd41 	bl	8000944 <main>
  bx lr
 8000ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ecc:	080040e0 	.word	0x080040e0
  ldr r2, =_sbss
 8000ed0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ed4:	20000194 	.word	0x20000194

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x28>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x28>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f947 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fd82 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f95f 	bl	80011ea <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f927 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	20000180 	.word	0x20000180

08000f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000180 	.word	0x20000180

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fff0 	bl	8000f8c <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffe0 	bl	8000f8c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000000c 	.word	0x2000000c

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4906      	ldr	r1, [pc, #24]	; (8001080 <__NVIC_EnableIRQ+0x34>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff90 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff2d 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff42 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff90 	bl	80010d8 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5f 	bl	8001084 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff35 	bl	800104c <__NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffa2 	bl	800113c <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e059      	b.n	80012ce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_DMA_Init+0xd4>)
 8001222:	429a      	cmp	r2, r3
 8001224:	d80f      	bhi.n	8001246 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_DMA_Init+0xd8>)
 800122e:	4413      	add	r3, r2
 8001230:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <HAL_DMA_Init+0xdc>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	009a      	lsls	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <HAL_DMA_Init+0xe0>)
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
 8001244:	e00e      	b.n	8001264 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_DMA_Init+0xe4>)
 800124e:	4413      	add	r3, r2
 8001250:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <HAL_DMA_Init+0xdc>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	009a      	lsls	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <HAL_DMA_Init+0xe8>)
 8001262:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800127a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800127e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40020407 	.word	0x40020407
 80012dc:	bffdfff8 	.word	0xbffdfff8
 80012e0:	cccccccd 	.word	0xcccccccd
 80012e4:	40020000 	.word	0x40020000
 80012e8:	bffdfbf8 	.word	0xbffdfbf8
 80012ec:	40020400 	.word	0x40020400

080012f0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001302:	2b02      	cmp	r3, #2
 8001304:	d008      	beq.n	8001318 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e020      	b.n	800135a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 020e 	bic.w	r2, r2, #14
 8001326:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001358:	7bfb      	ldrb	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001376:	2b02      	cmp	r3, #2
 8001378:	d005      	beq.n	8001386 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2204      	movs	r2, #4
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e0d6      	b.n	8001534 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 020e 	bic.w	r2, r2, #14
 8001394:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b64      	ldr	r3, [pc, #400]	; (8001540 <HAL_DMA_Abort_IT+0x1dc>)
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d958      	bls.n	8001464 <HAL_DMA_Abort_IT+0x100>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a63      	ldr	r2, [pc, #396]	; (8001544 <HAL_DMA_Abort_IT+0x1e0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04f      	beq.n	800145c <HAL_DMA_Abort_IT+0xf8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a61      	ldr	r2, [pc, #388]	; (8001548 <HAL_DMA_Abort_IT+0x1e4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d048      	beq.n	8001458 <HAL_DMA_Abort_IT+0xf4>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a60      	ldr	r2, [pc, #384]	; (800154c <HAL_DMA_Abort_IT+0x1e8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d040      	beq.n	8001452 <HAL_DMA_Abort_IT+0xee>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_DMA_Abort_IT+0x1ec>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d038      	beq.n	800144c <HAL_DMA_Abort_IT+0xe8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a5d      	ldr	r2, [pc, #372]	; (8001554 <HAL_DMA_Abort_IT+0x1f0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d030      	beq.n	8001446 <HAL_DMA_Abort_IT+0xe2>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <HAL_DMA_Abort_IT+0x1f4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d028      	beq.n	8001440 <HAL_DMA_Abort_IT+0xdc>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a53      	ldr	r2, [pc, #332]	; (8001540 <HAL_DMA_Abort_IT+0x1dc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d020      	beq.n	800143a <HAL_DMA_Abort_IT+0xd6>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_DMA_Abort_IT+0x1f8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_DMA_Abort_IT+0xd2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a56      	ldr	r2, [pc, #344]	; (8001560 <HAL_DMA_Abort_IT+0x1fc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d012      	beq.n	8001432 <HAL_DMA_Abort_IT+0xce>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a54      	ldr	r2, [pc, #336]	; (8001564 <HAL_DMA_Abort_IT+0x200>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00a      	beq.n	800142c <HAL_DMA_Abort_IT+0xc8>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a53      	ldr	r2, [pc, #332]	; (8001568 <HAL_DMA_Abort_IT+0x204>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d102      	bne.n	8001426 <HAL_DMA_Abort_IT+0xc2>
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	e01b      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 8001426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800142a:	e018      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 800142c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001430:	e015      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 8001432:	2310      	movs	r3, #16
 8001434:	e013      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 8001436:	2301      	movs	r3, #1
 8001438:	e011      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 800143a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800143e:	e00e      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 8001440:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001444:	e00b      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	e008      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	e005      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 8001452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001456:	e002      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 8001458:	2310      	movs	r3, #16
 800145a:	e000      	b.n	800145e <HAL_DMA_Abort_IT+0xfa>
 800145c:	2301      	movs	r3, #1
 800145e:	4a43      	ldr	r2, [pc, #268]	; (800156c <HAL_DMA_Abort_IT+0x208>)
 8001460:	6053      	str	r3, [r2, #4]
 8001462:	e057      	b.n	8001514 <HAL_DMA_Abort_IT+0x1b0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a36      	ldr	r2, [pc, #216]	; (8001544 <HAL_DMA_Abort_IT+0x1e0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d04f      	beq.n	800150e <HAL_DMA_Abort_IT+0x1aa>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a35      	ldr	r2, [pc, #212]	; (8001548 <HAL_DMA_Abort_IT+0x1e4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d048      	beq.n	800150a <HAL_DMA_Abort_IT+0x1a6>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a33      	ldr	r2, [pc, #204]	; (800154c <HAL_DMA_Abort_IT+0x1e8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d040      	beq.n	8001504 <HAL_DMA_Abort_IT+0x1a0>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_DMA_Abort_IT+0x1ec>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d038      	beq.n	80014fe <HAL_DMA_Abort_IT+0x19a>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a30      	ldr	r2, [pc, #192]	; (8001554 <HAL_DMA_Abort_IT+0x1f0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d030      	beq.n	80014f8 <HAL_DMA_Abort_IT+0x194>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_DMA_Abort_IT+0x1f4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d028      	beq.n	80014f2 <HAL_DMA_Abort_IT+0x18e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_DMA_Abort_IT+0x1dc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d020      	beq.n	80014ec <HAL_DMA_Abort_IT+0x188>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a2b      	ldr	r2, [pc, #172]	; (800155c <HAL_DMA_Abort_IT+0x1f8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d019      	beq.n	80014e8 <HAL_DMA_Abort_IT+0x184>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_DMA_Abort_IT+0x1fc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d012      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x180>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a28      	ldr	r2, [pc, #160]	; (8001564 <HAL_DMA_Abort_IT+0x200>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d00a      	beq.n	80014de <HAL_DMA_Abort_IT+0x17a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <HAL_DMA_Abort_IT+0x204>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d102      	bne.n	80014d8 <HAL_DMA_Abort_IT+0x174>
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	e01b      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014dc:	e018      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e2:	e015      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014e4:	2310      	movs	r3, #16
 80014e6:	e013      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e011      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f0:	e00e      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014f6:	e00b      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fc:	e008      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	e005      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 8001504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001508:	e002      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 800150a:	2310      	movs	r3, #16
 800150c:	e000      	b.n	8001510 <HAL_DMA_Abort_IT+0x1ac>
 800150e:	2301      	movs	r3, #1
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_DMA_Abort_IT+0x20c>)
 8001512:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
    } 
  }
  return status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40020080 	.word	0x40020080
 8001544:	40020008 	.word	0x40020008
 8001548:	4002001c 	.word	0x4002001c
 800154c:	40020030 	.word	0x40020030
 8001550:	40020044 	.word	0x40020044
 8001554:	40020058 	.word	0x40020058
 8001558:	4002006c 	.word	0x4002006c
 800155c:	40020408 	.word	0x40020408
 8001560:	4002041c 	.word	0x4002041c
 8001564:	40020430 	.word	0x40020430
 8001568:	40020444 	.word	0x40020444
 800156c:	40020400 	.word	0x40020400
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2204      	movs	r2, #4
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80f1 	beq.w	8001780 <HAL_DMA_IRQHandler+0x20c>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80eb 	beq.w	8001780 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b5f      	ldr	r3, [pc, #380]	; (800174c <HAL_DMA_IRQHandler+0x1d8>)
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d958      	bls.n	8001686 <HAL_DMA_IRQHandler+0x112>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a5d      	ldr	r2, [pc, #372]	; (8001750 <HAL_DMA_IRQHandler+0x1dc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d04f      	beq.n	800167e <HAL_DMA_IRQHandler+0x10a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a5c      	ldr	r2, [pc, #368]	; (8001754 <HAL_DMA_IRQHandler+0x1e0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d048      	beq.n	800167a <HAL_DMA_IRQHandler+0x106>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a5a      	ldr	r2, [pc, #360]	; (8001758 <HAL_DMA_IRQHandler+0x1e4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d040      	beq.n	8001674 <HAL_DMA_IRQHandler+0x100>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a59      	ldr	r2, [pc, #356]	; (800175c <HAL_DMA_IRQHandler+0x1e8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d038      	beq.n	800166e <HAL_DMA_IRQHandler+0xfa>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a57      	ldr	r2, [pc, #348]	; (8001760 <HAL_DMA_IRQHandler+0x1ec>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d030      	beq.n	8001668 <HAL_DMA_IRQHandler+0xf4>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a56      	ldr	r2, [pc, #344]	; (8001764 <HAL_DMA_IRQHandler+0x1f0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d028      	beq.n	8001662 <HAL_DMA_IRQHandler+0xee>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a4d      	ldr	r2, [pc, #308]	; (800174c <HAL_DMA_IRQHandler+0x1d8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d020      	beq.n	800165c <HAL_DMA_IRQHandler+0xe8>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_DMA_IRQHandler+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d019      	beq.n	8001658 <HAL_DMA_IRQHandler+0xe4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a50      	ldr	r2, [pc, #320]	; (800176c <HAL_DMA_IRQHandler+0x1f8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d012      	beq.n	8001654 <HAL_DMA_IRQHandler+0xe0>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a4f      	ldr	r2, [pc, #316]	; (8001770 <HAL_DMA_IRQHandler+0x1fc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00a      	beq.n	800164e <HAL_DMA_IRQHandler+0xda>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_DMA_IRQHandler+0x200>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d102      	bne.n	8001648 <HAL_DMA_IRQHandler+0xd4>
 8001642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001646:	e01b      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 8001648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800164c:	e018      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 800164e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001652:	e015      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 8001654:	2340      	movs	r3, #64	; 0x40
 8001656:	e013      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 8001658:	2304      	movs	r3, #4
 800165a:	e011      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 800165c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001660:	e00e      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 8001662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001666:	e00b      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 8001668:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800166c:	e008      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 800166e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001672:	e005      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 8001674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001678:	e002      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 800167a:	2340      	movs	r3, #64	; 0x40
 800167c:	e000      	b.n	8001680 <HAL_DMA_IRQHandler+0x10c>
 800167e:	2304      	movs	r3, #4
 8001680:	4a3d      	ldr	r2, [pc, #244]	; (8001778 <HAL_DMA_IRQHandler+0x204>)
 8001682:	6053      	str	r3, [r2, #4]
 8001684:	e057      	b.n	8001736 <HAL_DMA_IRQHandler+0x1c2>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a31      	ldr	r2, [pc, #196]	; (8001750 <HAL_DMA_IRQHandler+0x1dc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d04f      	beq.n	8001730 <HAL_DMA_IRQHandler+0x1bc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <HAL_DMA_IRQHandler+0x1e0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d048      	beq.n	800172c <HAL_DMA_IRQHandler+0x1b8>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a2e      	ldr	r2, [pc, #184]	; (8001758 <HAL_DMA_IRQHandler+0x1e4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d040      	beq.n	8001726 <HAL_DMA_IRQHandler+0x1b2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2c      	ldr	r2, [pc, #176]	; (800175c <HAL_DMA_IRQHandler+0x1e8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d038      	beq.n	8001720 <HAL_DMA_IRQHandler+0x1ac>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <HAL_DMA_IRQHandler+0x1ec>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d030      	beq.n	800171a <HAL_DMA_IRQHandler+0x1a6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a29      	ldr	r2, [pc, #164]	; (8001764 <HAL_DMA_IRQHandler+0x1f0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d028      	beq.n	8001714 <HAL_DMA_IRQHandler+0x1a0>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a21      	ldr	r2, [pc, #132]	; (800174c <HAL_DMA_IRQHandler+0x1d8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d020      	beq.n	800170e <HAL_DMA_IRQHandler+0x19a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a25      	ldr	r2, [pc, #148]	; (8001768 <HAL_DMA_IRQHandler+0x1f4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_DMA_IRQHandler+0x196>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a24      	ldr	r2, [pc, #144]	; (800176c <HAL_DMA_IRQHandler+0x1f8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d012      	beq.n	8001706 <HAL_DMA_IRQHandler+0x192>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_DMA_IRQHandler+0x1fc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00a      	beq.n	8001700 <HAL_DMA_IRQHandler+0x18c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <HAL_DMA_IRQHandler+0x200>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d102      	bne.n	80016fa <HAL_DMA_IRQHandler+0x186>
 80016f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f8:	e01b      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 80016fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016fe:	e018      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 8001700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001704:	e015      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 8001706:	2340      	movs	r3, #64	; 0x40
 8001708:	e013      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 800170a:	2304      	movs	r3, #4
 800170c:	e011      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 800170e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001712:	e00e      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 8001714:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001718:	e00b      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 800171a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800171e:	e008      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 8001720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001724:	e005      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	e002      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	e000      	b.n	8001732 <HAL_DMA_IRQHandler+0x1be>
 8001730:	2304      	movs	r3, #4
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_DMA_IRQHandler+0x208>)
 8001734:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8136 	beq.w	80019ac <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001748:	e130      	b.n	80019ac <HAL_DMA_IRQHandler+0x438>
 800174a:	bf00      	nop
 800174c:	40020080 	.word	0x40020080
 8001750:	40020008 	.word	0x40020008
 8001754:	4002001c 	.word	0x4002001c
 8001758:	40020030 	.word	0x40020030
 800175c:	40020044 	.word	0x40020044
 8001760:	40020058 	.word	0x40020058
 8001764:	4002006c 	.word	0x4002006c
 8001768:	40020408 	.word	0x40020408
 800176c:	4002041c 	.word	0x4002041c
 8001770:	40020430 	.word	0x40020430
 8001774:	40020444 	.word	0x40020444
 8001778:	40020400 	.word	0x40020400
 800177c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2202      	movs	r2, #2
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80dd 	beq.w	800194c <HAL_DMA_IRQHandler+0x3d8>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80d7 	beq.w	800194c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10b      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 020a 	bic.w	r2, r2, #10
 80017ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_DMA_IRQHandler+0x444>)
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d958      	bls.n	8001882 <HAL_DMA_IRQHandler+0x30e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a79      	ldr	r2, [pc, #484]	; (80019bc <HAL_DMA_IRQHandler+0x448>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d04f      	beq.n	800187a <HAL_DMA_IRQHandler+0x306>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a78      	ldr	r2, [pc, #480]	; (80019c0 <HAL_DMA_IRQHandler+0x44c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d048      	beq.n	8001876 <HAL_DMA_IRQHandler+0x302>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a76      	ldr	r2, [pc, #472]	; (80019c4 <HAL_DMA_IRQHandler+0x450>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d040      	beq.n	8001870 <HAL_DMA_IRQHandler+0x2fc>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <HAL_DMA_IRQHandler+0x454>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d038      	beq.n	800186a <HAL_DMA_IRQHandler+0x2f6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a73      	ldr	r2, [pc, #460]	; (80019cc <HAL_DMA_IRQHandler+0x458>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d030      	beq.n	8001864 <HAL_DMA_IRQHandler+0x2f0>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a72      	ldr	r2, [pc, #456]	; (80019d0 <HAL_DMA_IRQHandler+0x45c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d028      	beq.n	800185e <HAL_DMA_IRQHandler+0x2ea>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <HAL_DMA_IRQHandler+0x444>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d020      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2e4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <HAL_DMA_IRQHandler+0x460>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d019      	beq.n	8001854 <HAL_DMA_IRQHandler+0x2e0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6c      	ldr	r2, [pc, #432]	; (80019d8 <HAL_DMA_IRQHandler+0x464>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d012      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2dc>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6b      	ldr	r2, [pc, #428]	; (80019dc <HAL_DMA_IRQHandler+0x468>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00a      	beq.n	800184a <HAL_DMA_IRQHandler+0x2d6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a69      	ldr	r2, [pc, #420]	; (80019e0 <HAL_DMA_IRQHandler+0x46c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d102      	bne.n	8001844 <HAL_DMA_IRQHandler+0x2d0>
 800183e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001842:	e01b      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 8001844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001848:	e018      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 800184a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184e:	e015      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 8001850:	2320      	movs	r3, #32
 8001852:	e013      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 8001854:	2302      	movs	r3, #2
 8001856:	e011      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 8001858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800185c:	e00e      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 800185e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001862:	e00b      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 8001864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001868:	e008      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 800186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186e:	e005      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 8001870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001874:	e002      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 8001876:	2320      	movs	r3, #32
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x308>
 800187a:	2302      	movs	r3, #2
 800187c:	4a59      	ldr	r2, [pc, #356]	; (80019e4 <HAL_DMA_IRQHandler+0x470>)
 800187e:	6053      	str	r3, [r2, #4]
 8001880:	e057      	b.n	8001932 <HAL_DMA_IRQHandler+0x3be>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <HAL_DMA_IRQHandler+0x448>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d04f      	beq.n	800192c <HAL_DMA_IRQHandler+0x3b8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_DMA_IRQHandler+0x44c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d048      	beq.n	8001928 <HAL_DMA_IRQHandler+0x3b4>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_DMA_IRQHandler+0x450>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d040      	beq.n	8001922 <HAL_DMA_IRQHandler+0x3ae>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <HAL_DMA_IRQHandler+0x454>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d038      	beq.n	800191c <HAL_DMA_IRQHandler+0x3a8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a47      	ldr	r2, [pc, #284]	; (80019cc <HAL_DMA_IRQHandler+0x458>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d030      	beq.n	8001916 <HAL_DMA_IRQHandler+0x3a2>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <HAL_DMA_IRQHandler+0x45c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d028      	beq.n	8001910 <HAL_DMA_IRQHandler+0x39c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_DMA_IRQHandler+0x444>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d020      	beq.n	800190a <HAL_DMA_IRQHandler+0x396>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <HAL_DMA_IRQHandler+0x460>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_DMA_IRQHandler+0x392>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a40      	ldr	r2, [pc, #256]	; (80019d8 <HAL_DMA_IRQHandler+0x464>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d012      	beq.n	8001902 <HAL_DMA_IRQHandler+0x38e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3e      	ldr	r2, [pc, #248]	; (80019dc <HAL_DMA_IRQHandler+0x468>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00a      	beq.n	80018fc <HAL_DMA_IRQHandler+0x388>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3d      	ldr	r2, [pc, #244]	; (80019e0 <HAL_DMA_IRQHandler+0x46c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <HAL_DMA_IRQHandler+0x382>
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	e01b      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 80018f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fa:	e018      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 80018fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001900:	e015      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 8001902:	2320      	movs	r3, #32
 8001904:	e013      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 8001906:	2302      	movs	r3, #2
 8001908:	e011      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 800190a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190e:	e00e      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 8001910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001914:	e00b      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 8001916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191a:	e008      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 800191c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001920:	e005      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 8001922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001926:	e002      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 8001928:	2320      	movs	r3, #32
 800192a:	e000      	b.n	800192e <HAL_DMA_IRQHandler+0x3ba>
 800192c:	2302      	movs	r3, #2
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_DMA_IRQHandler+0x474>)
 8001930:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	2b00      	cmp	r3, #0
 8001940:	d034      	beq.n	80019ac <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800194a:	e02f      	b.n	80019ac <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2208      	movs	r2, #8
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d028      	beq.n	80019ae <HAL_DMA_IRQHandler+0x43a>
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d023      	beq.n	80019ae <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 020e 	bic.w	r2, r2, #14
 8001974:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
    }
  }
  return;
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
}
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40020080 	.word	0x40020080
 80019bc:	40020008 	.word	0x40020008
 80019c0:	4002001c 	.word	0x4002001c
 80019c4:	40020030 	.word	0x40020030
 80019c8:	40020044 	.word	0x40020044
 80019cc:	40020058 	.word	0x40020058
 80019d0:	4002006c 	.word	0x4002006c
 80019d4:	40020408 	.word	0x40020408
 80019d8:	4002041c 	.word	0x4002041c
 80019dc:	40020430 	.word	0x40020430
 80019e0:	40020444 	.word	0x40020444
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020000 	.word	0x40020000

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b08b      	sub	sp, #44	; 0x2c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	e179      	b.n	8001cf4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a00:	2201      	movs	r2, #1
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	f040 8168 	bne.w	8001cee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a96      	ldr	r2, [pc, #600]	; (8001c7c <HAL_GPIO_Init+0x290>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d05e      	beq.n	8001ae6 <HAL_GPIO_Init+0xfa>
 8001a28:	4a94      	ldr	r2, [pc, #592]	; (8001c7c <HAL_GPIO_Init+0x290>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d875      	bhi.n	8001b1a <HAL_GPIO_Init+0x12e>
 8001a2e:	4a94      	ldr	r2, [pc, #592]	; (8001c80 <HAL_GPIO_Init+0x294>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d058      	beq.n	8001ae6 <HAL_GPIO_Init+0xfa>
 8001a34:	4a92      	ldr	r2, [pc, #584]	; (8001c80 <HAL_GPIO_Init+0x294>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d86f      	bhi.n	8001b1a <HAL_GPIO_Init+0x12e>
 8001a3a:	4a92      	ldr	r2, [pc, #584]	; (8001c84 <HAL_GPIO_Init+0x298>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d052      	beq.n	8001ae6 <HAL_GPIO_Init+0xfa>
 8001a40:	4a90      	ldr	r2, [pc, #576]	; (8001c84 <HAL_GPIO_Init+0x298>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d869      	bhi.n	8001b1a <HAL_GPIO_Init+0x12e>
 8001a46:	4a90      	ldr	r2, [pc, #576]	; (8001c88 <HAL_GPIO_Init+0x29c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d04c      	beq.n	8001ae6 <HAL_GPIO_Init+0xfa>
 8001a4c:	4a8e      	ldr	r2, [pc, #568]	; (8001c88 <HAL_GPIO_Init+0x29c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d863      	bhi.n	8001b1a <HAL_GPIO_Init+0x12e>
 8001a52:	4a8e      	ldr	r2, [pc, #568]	; (8001c8c <HAL_GPIO_Init+0x2a0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d046      	beq.n	8001ae6 <HAL_GPIO_Init+0xfa>
 8001a58:	4a8c      	ldr	r2, [pc, #560]	; (8001c8c <HAL_GPIO_Init+0x2a0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d85d      	bhi.n	8001b1a <HAL_GPIO_Init+0x12e>
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	d82a      	bhi.n	8001ab8 <HAL_GPIO_Init+0xcc>
 8001a62:	2b12      	cmp	r3, #18
 8001a64:	d859      	bhi.n	8001b1a <HAL_GPIO_Init+0x12e>
 8001a66:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <HAL_GPIO_Init+0x80>)
 8001a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6c:	08001ae7 	.word	0x08001ae7
 8001a70:	08001ac1 	.word	0x08001ac1
 8001a74:	08001ad3 	.word	0x08001ad3
 8001a78:	08001b15 	.word	0x08001b15
 8001a7c:	08001b1b 	.word	0x08001b1b
 8001a80:	08001b1b 	.word	0x08001b1b
 8001a84:	08001b1b 	.word	0x08001b1b
 8001a88:	08001b1b 	.word	0x08001b1b
 8001a8c:	08001b1b 	.word	0x08001b1b
 8001a90:	08001b1b 	.word	0x08001b1b
 8001a94:	08001b1b 	.word	0x08001b1b
 8001a98:	08001b1b 	.word	0x08001b1b
 8001a9c:	08001b1b 	.word	0x08001b1b
 8001aa0:	08001b1b 	.word	0x08001b1b
 8001aa4:	08001b1b 	.word	0x08001b1b
 8001aa8:	08001b1b 	.word	0x08001b1b
 8001aac:	08001b1b 	.word	0x08001b1b
 8001ab0:	08001ac9 	.word	0x08001ac9
 8001ab4:	08001add 	.word	0x08001add
 8001ab8:	4a75      	ldr	r2, [pc, #468]	; (8001c90 <HAL_GPIO_Init+0x2a4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001abe:	e02c      	b.n	8001b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e029      	b.n	8001b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	3304      	adds	r3, #4
 8001ace:	623b      	str	r3, [r7, #32]
          break;
 8001ad0:	e024      	b.n	8001b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	623b      	str	r3, [r7, #32]
          break;
 8001ada:	e01f      	b.n	8001b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	e01a      	b.n	8001b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aee:	2304      	movs	r3, #4
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e013      	b.n	8001b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001afc:	2308      	movs	r3, #8
 8001afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	611a      	str	r2, [r3, #16]
          break;
 8001b06:	e009      	b.n	8001b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	615a      	str	r2, [r3, #20]
          break;
 8001b12:	e003      	b.n	8001b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x130>
          break;
 8001b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d801      	bhi.n	8001b26 <HAL_GPIO_Init+0x13a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	e001      	b.n	8001b2a <HAL_GPIO_Init+0x13e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2bff      	cmp	r3, #255	; 0xff
 8001b30:	d802      	bhi.n	8001b38 <HAL_GPIO_Init+0x14c>
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	e002      	b.n	8001b3e <HAL_GPIO_Init+0x152>
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	3b08      	subs	r3, #8
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	210f      	movs	r1, #15
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	6a39      	ldr	r1, [r7, #32]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80c1 	beq.w	8001cee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_GPIO_Init+0x2a8>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a48      	ldr	r2, [pc, #288]	; (8001c94 <HAL_GPIO_Init+0x2a8>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_GPIO_Init+0x2a8>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b84:	4a44      	ldr	r2, [pc, #272]	; (8001c98 <HAL_GPIO_Init+0x2ac>)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3c      	ldr	r2, [pc, #240]	; (8001c9c <HAL_GPIO_Init+0x2b0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01f      	beq.n	8001bf0 <HAL_GPIO_Init+0x204>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <HAL_GPIO_Init+0x2b4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d019      	beq.n	8001bec <HAL_GPIO_Init+0x200>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3a      	ldr	r2, [pc, #232]	; (8001ca4 <HAL_GPIO_Init+0x2b8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_Init+0x1fc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a39      	ldr	r2, [pc, #228]	; (8001ca8 <HAL_GPIO_Init+0x2bc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1f8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a38      	ldr	r2, [pc, #224]	; (8001cac <HAL_GPIO_Init+0x2c0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1f4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1f0>
 8001bd8:	2305      	movs	r3, #5
 8001bda:	e00a      	b.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001bdc:	2306      	movs	r3, #6
 8001bde:	e008      	b.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001be4:	2303      	movs	r3, #3
 8001be6:	e004      	b.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	f002 0203 	and.w	r2, r2, #3
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	4093      	lsls	r3, r2
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c02:	4925      	ldr	r1, [pc, #148]	; (8001c98 <HAL_GPIO_Init+0x2ac>)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4924      	ldr	r1, [pc, #144]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4920      	ldr	r1, [pc, #128]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	491a      	ldr	r1, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4916      	ldr	r1, [pc, #88]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d025      	beq.n	8001cb8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
 8001c78:	e025      	b.n	8001cc6 <HAL_GPIO_Init+0x2da>
 8001c7a:	bf00      	nop
 8001c7c:	10320000 	.word	0x10320000
 8001c80:	10310000 	.word	0x10310000
 8001c84:	10220000 	.word	0x10220000
 8001c88:	10210000 	.word	0x10210000
 8001c8c:	10120000 	.word	0x10120000
 8001c90:	10110000 	.word	0x10110000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40011400 	.word	0x40011400
 8001cac:	40011800 	.word	0x40011800
 8001cb0:	40011c00 	.word	0x40011c00
 8001cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4913      	ldr	r1, [pc, #76]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60cb      	str	r3, [r1, #12]
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4909      	ldr	r1, [pc, #36]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f47f ae7e 	bne.w	8001a00 <HAL_GPIO_Init+0x14>
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e001      	b.n	8001d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	807b      	strh	r3, [r7, #2]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d52:	787b      	ldrb	r3, [r7, #1]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d58:	887a      	ldrh	r2, [r7, #2]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d5e:	e003      	b.n	8001d68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	041a      	lsls	r2, r3, #16
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	400b      	ands	r3, r1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e272      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8087 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc4:	4b92      	ldr	r3, [pc, #584]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d00c      	beq.n	8001dea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd0:	4b8f      	ldr	r3, [pc, #572]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d112      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d10b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dea:	4b89      	ldr	r3, [pc, #548]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d06c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d168      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e24c      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x76>
 8001e0c:	4b80      	ldr	r3, [pc, #512]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a7f      	ldr	r2, [pc, #508]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e02e      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x98>
 8001e22:	4b7b      	ldr	r3, [pc, #492]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a77      	ldr	r2, [pc, #476]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0xbc>
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a71      	ldr	r2, [pc, #452]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6e      	ldr	r2, [pc, #440]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e60:	4b6b      	ldr	r3, [pc, #428]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6a      	ldr	r2, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a67      	ldr	r2, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff f884 	bl	8000f8c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff f880 	bl	8000f8c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e200      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe4>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f870 	bl	8000f8c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f86c 	bl	8000f8c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1ec      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x10c>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d063      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x18c>
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x176>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1c0      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4939      	ldr	r1, [pc, #228]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f825 	bl	8000f8c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff f821 	bl	8000f8c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1a1      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4927      	ldr	r1, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f804 	bl	8000f8c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff f800 	bl	8000f8c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e180      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03a      	beq.n	8002028 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d019      	beq.n	8001fee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7fe ffe4 	bl	8000f8c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7fe ffe0 	bl	8000f8c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e160      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f000 fad8 	bl	800259c <RCC_Delay>
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ffca 	bl	8000f8c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffa:	e00f      	b.n	800201c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7fe ffc6 	bl	8000f8c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d908      	bls.n	800201c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e146      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	42420000 	.word	0x42420000
 8002018:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	4b92      	ldr	r3, [pc, #584]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e9      	bne.n	8001ffc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a6 	beq.w	8002182 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]
 8002052:	4b85      	ldr	r3, [pc, #532]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b82      	ldr	r3, [pc, #520]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7e      	ldr	r2, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7fe ff87 	bl	8000f8c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7fe ff83 	bl	8000f8c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e103      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x312>
 80020a8:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6213      	str	r3, [r2, #32]
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x334>
 80020be:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a69      	ldr	r2, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a66      	ldr	r2, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	e01c      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d10c      	bne.n	80020fa <HAL_RCC_OscConfig+0x356>
 80020e0:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	e00b      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe ff37 	bl	8000f8c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7fe ff33 	bl	8000f8c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0b1      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ee      	beq.n	8002122 <HAL_RCC_OscConfig+0x37e>
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7fe ff21 	bl	8000f8c <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe ff1d 	bl	8000f8c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e09b      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002176:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002180:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8087 	beq.w	800229a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d061      	beq.n	800225c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d146      	bne.n	800222e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a0:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe fef1 	bl	8000f8c <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7fe feed 	bl	8000f8c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e06d      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4921      	ldr	r1, [pc, #132]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a19      	ldr	r1, [r3, #32]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	430b      	orrs	r3, r1
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4cc>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe fec1 	bl	8000f8c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220e:	f7fe febd 	bl	8000f8c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03d      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x46a>
 800222c:	e035      	b.n	800229a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_OscConfig+0x4cc>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe feaa 	bl	8000f8c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fea6 	bl	8000f8c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e026      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x498>
 800225a:	e01e      	b.n	800229a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e019      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x500>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0d0      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4965      	ldr	r1, [pc, #404]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b8      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800230e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	494d      	ldr	r1, [pc, #308]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d040      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e073      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06b      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4936      	ldr	r1, [pc, #216]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7fe fdf8 	bl	8000f8c <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fdf4 	bl	8000f8c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e053      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d210      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4922      	ldr	r1, [pc, #136]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e032      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4916      	ldr	r1, [pc, #88]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002436:	f000 f821 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1cc>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1d0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fd56 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40022000 	.word	0x40022000
 800246c:	40021000 	.word	0x40021000
 8002470:	08004028 	.word	0x08004028
 8002474:	20000004 	.word	0x20000004
 8002478:	20000008 	.word	0x20000008

0800247c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	b490      	push	{r4, r7}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_GetSysClockFreq+0xac>)
 8002484:	1d3c      	adds	r4, r7, #4
 8002486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800248c:	f240 2301 	movw	r3, #513	; 0x201
 8002490:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x40>
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x46>
 80024ba:	e02b      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024be:	623b      	str	r3, [r7, #32]
      break;
 80024c0:	e02b      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	0c9b      	lsrs	r3, r3, #18
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3328      	adds	r3, #40	; 0x28
 80024cc:	443b      	add	r3, r7
 80024ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d012      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0c5b      	lsrs	r3, r3, #17
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	3328      	adds	r3, #40	; 0x28
 80024ea:	443b      	add	r3, r7
 80024ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024f6:	fb03 f202 	mul.w	r2, r3, r2
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	e004      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	623b      	str	r3, [r7, #32]
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002516:	623b      	str	r3, [r7, #32]
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	6a3b      	ldr	r3, [r7, #32]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bc90      	pop	{r4, r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	08004018 	.word	0x08004018
 800252c:	40021000 	.word	0x40021000
 8002530:	007a1200 	.word	0x007a1200
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <HAL_RCC_GetHCLKFreq+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002550:	f7ff fff2 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4903      	ldr	r1, [pc, #12]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08004038 	.word	0x08004038

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002578:	f7ff ffde 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0adb      	lsrs	r3, r3, #11
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	08004038 	.word	0x08004038

0800259c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <RCC_Delay+0x34>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <RCC_Delay+0x38>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0a5b      	lsrs	r3, r3, #9
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b8:	bf00      	nop
  }
  while (Delay --);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	60fa      	str	r2, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f9      	bne.n	80025b8 <RCC_Delay+0x1c>
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000004 	.word	0x20000004
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e03f      	b.n	800266a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fb70 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fc85 	bl	8002f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08a      	sub	sp, #40	; 0x28
 8002676:	af02      	add	r7, sp, #8
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d17c      	bne.n	800278c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_UART_Transmit+0x2c>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e075      	b.n	800278e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Transmit+0x3e>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e06e      	b.n	800278e <HAL_UART_Transmit+0x11c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fc61 	bl	8000f8c <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e0:	d108      	bne.n	80026f4 <HAL_UART_Transmit+0x82>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e003      	b.n	80026fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002704:	e02a      	b.n	800275c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fa38 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e036      	b.n	800278e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002734:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3302      	adds	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	e007      	b.n	800274e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	3301      	adds	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1cf      	bne.n	8002706 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fa08 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	4613      	mov	r3, r2
 80027a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d11d      	bne.n	80027ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_UART_Receive_IT+0x26>
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e016      	b.n	80027ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Receive_IT+0x38>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00f      	b.n	80027ee <HAL_UART_Receive_IT+0x58>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	461a      	mov	r2, r3
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa19 	bl	8002c1a <UART_Start_Receive_IT>
 80027e8:	4603      	mov	r3, r0
 80027ea:	e000      	b.n	80027ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_UART_IRQHandler+0x52>
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fac9 	bl	8002dda <UART_Receive_IT>
      return;
 8002848:	e17b      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80b1 	beq.w	80029b4 <HAL_UART_IRQHandler+0x1bc>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_UART_IRQHandler+0x70>
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a6 	beq.w	80029b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_UART_IRQHandler+0x90>
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_UART_IRQHandler+0xb0>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f043 0202 	orr.w	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_UART_IRQHandler+0xd0>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00f      	beq.n	80028f2 <HAL_UART_IRQHandler+0xfa>
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <HAL_UART_IRQHandler+0xee>
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0208 	orr.w	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 811e 	beq.w	8002b38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_UART_IRQHandler+0x11e>
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa62 	bl	8002dda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <HAL_UART_IRQHandler+0x146>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d031      	beq.n	80029a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f9a4 	bl	8002c8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d023      	beq.n	800299a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002960:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	2b00      	cmp	r3, #0
 8002968:	d013      	beq.n	8002992 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4a76      	ldr	r2, [pc, #472]	; (8002b48 <HAL_UART_IRQHandler+0x350>)
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fcf4 	bl	8001364 <HAL_DMA_Abort_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800298c:	4610      	mov	r0, r2
 800298e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002990:	e00e      	b.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8e3 	bl	8002b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002998:	e00a      	b.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8df 	bl	8002b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	e006      	b.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8db 	bl	8002b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029ae:	e0c3      	b.n	8002b38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	bf00      	nop
    return;
 80029b2:	e0c1      	b.n	8002b38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 80a1 	bne.w	8002b00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 809b 	beq.w	8002b00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8095 	beq.w	8002b00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d04e      	beq.n	8002a98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002a04:	8a3b      	ldrh	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8098 	beq.w	8002b3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a10:	8a3a      	ldrh	r2, [r7, #16]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	f080 8092 	bcs.w	8002b3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8a3a      	ldrh	r2, [r7, #16]
 8002a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d02b      	beq.n	8002a80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0210 	bic.w	r2, r2, #16
 8002a74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fc38 	bl	80012f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f86d 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a96:	e051      	b.n	8002b3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d047      	beq.n	8002b40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002ab0:	8a7b      	ldrh	r3, [r7, #18]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d044      	beq.n	8002b40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ac4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0210 	bic.w	r2, r2, #16
 8002af2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002af4:	8a7b      	ldrh	r3, [r7, #18]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f839 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002afe:	e01f      	b.n	8002b40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_UART_IRQHandler+0x324>
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8f9 	bl	8002d0c <UART_Transmit_IT>
    return;
 8002b1a:	e012      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_UART_IRQHandler+0x34a>
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f93a 	bl	8002daa <UART_EndTransmit_IT>
    return;
 8002b36:	e004      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
    return;
 8002b38:	bf00      	nop
 8002b3a:	e002      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b40:	bf00      	nop
  }
}
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08002ce5 	.word	0x08002ce5

08002b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b96:	e02c      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d028      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	f7fe f9f1 	bl	8000f8c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d21d      	bcs.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d0c3      	beq.n	8002b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2222      	movs	r2, #34	; 0x22
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0220 	orr.w	r2, r2, #32
 8002c7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ca2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0210 	bic.w	r2, r2, #16
 8002cca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff ff2d 	bl	8002b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b21      	cmp	r3, #33	; 0x21
 8002d1e:	d13e      	bne.n	8002d9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d28:	d114      	bne.n	8002d54 <UART_Transmit_IT+0x48>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d110      	bne.n	8002d54 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	1c9a      	adds	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	621a      	str	r2, [r3, #32]
 8002d52:	e008      	b.n	8002d66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	1c59      	adds	r1, r3, #1
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6211      	str	r1, [r2, #32]
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4619      	mov	r1, r3
 8002d74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff febe 	bl	8002b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b22      	cmp	r3, #34	; 0x22
 8002dec:	f040 8099 	bne.w	8002f22 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df8:	d117      	bne.n	8002e2a <UART_Receive_IT+0x50>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d113      	bne.n	8002e2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	1c9a      	adds	r2, r3, #2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
 8002e28:	e026      	b.n	8002e78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d007      	beq.n	8002e4e <UART_Receive_IT+0x74>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <UART_Receive_IT+0x82>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e008      	b.n	8002e6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4619      	mov	r1, r3
 8002e86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d148      	bne.n	8002f1e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0220 	bic.w	r2, r2, #32
 8002e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d123      	bne.n	8002f14 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0210 	bic.w	r2, r2, #16
 8002ee0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d10a      	bne.n	8002f06 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fe2f 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
 8002f12:	e002      	b.n	8002f1a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fd fb1d 	bl	8000554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e002      	b.n	8002f24 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f66:	f023 030c 	bic.w	r3, r3, #12
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <UART_SetConfig+0x114>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d103      	bne.n	8002f9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f94:	f7ff faee 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	e002      	b.n	8002fa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f7ff fad6 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8002fa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <UART_SetConfig+0x118>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	0119      	lsls	r1, r3, #4
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	009a      	lsls	r2, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <UART_SetConfig+0x118>)
 8002fda:	fba3 0302 	umull	r0, r3, r3, r2
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2064      	movs	r0, #100	; 0x64
 8002fe2:	fb00 f303 	mul.w	r3, r0, r3
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	3332      	adds	r3, #50	; 0x32
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <UART_SetConfig+0x118>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff8:	4419      	add	r1, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009a      	lsls	r2, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <UART_SetConfig+0x118>)
 8003012:	fba3 0302 	umull	r0, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2064      	movs	r0, #100	; 0x64
 800301a:	fb00 f303 	mul.w	r3, r0, r3
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	3332      	adds	r3, #50	; 0x32
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <UART_SetConfig+0x118>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	f003 020f 	and.w	r2, r3, #15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	440a      	add	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40013800 	.word	0x40013800
 8003044:	51eb851f 	.word	0x51eb851f

08003048 <__errno>:
 8003048:	4b01      	ldr	r3, [pc, #4]	; (8003050 <__errno+0x8>)
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000010 	.word	0x20000010

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	2600      	movs	r6, #0
 8003058:	4d0c      	ldr	r5, [pc, #48]	; (800308c <__libc_init_array+0x38>)
 800305a:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305c:	1b64      	subs	r4, r4, r5
 800305e:	10a4      	asrs	r4, r4, #2
 8003060:	42a6      	cmp	r6, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	f000 ffb6 	bl	8003fd4 <_init>
 8003068:	2600      	movs	r6, #0
 800306a:	4d0a      	ldr	r5, [pc, #40]	; (8003094 <__libc_init_array+0x40>)
 800306c:	4c0a      	ldr	r4, [pc, #40]	; (8003098 <__libc_init_array+0x44>)
 800306e:	1b64      	subs	r4, r4, r5
 8003070:	10a4      	asrs	r4, r4, #2
 8003072:	42a6      	cmp	r6, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f855 3b04 	ldr.w	r3, [r5], #4
 800307c:	4798      	blx	r3
 800307e:	3601      	adds	r6, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f855 3b04 	ldr.w	r3, [r5], #4
 8003086:	4798      	blx	r3
 8003088:	3601      	adds	r6, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	080040d8 	.word	0x080040d8
 8003090:	080040d8 	.word	0x080040d8
 8003094:	080040d8 	.word	0x080040d8
 8003098:	080040dc 	.word	0x080040dc

0800309c <memset>:
 800309c:	4603      	mov	r3, r0
 800309e:	4402      	add	r2, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <iprintf>:
 80030ac:	b40f      	push	{r0, r1, r2, r3}
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <iprintf+0x2c>)
 80030b0:	b513      	push	{r0, r1, r4, lr}
 80030b2:	681c      	ldr	r4, [r3, #0]
 80030b4:	b124      	cbz	r4, 80030c0 <iprintf+0x14>
 80030b6:	69a3      	ldr	r3, [r4, #24]
 80030b8:	b913      	cbnz	r3, 80030c0 <iprintf+0x14>
 80030ba:	4620      	mov	r0, r4
 80030bc:	f000 f866 	bl	800318c <__sinit>
 80030c0:	ab05      	add	r3, sp, #20
 80030c2:	4620      	mov	r0, r4
 80030c4:	9a04      	ldr	r2, [sp, #16]
 80030c6:	68a1      	ldr	r1, [r4, #8]
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	f000 f9bb 	bl	8003444 <_vfiprintf_r>
 80030ce:	b002      	add	sp, #8
 80030d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d4:	b004      	add	sp, #16
 80030d6:	4770      	bx	lr
 80030d8:	20000010 	.word	0x20000010

080030dc <std>:
 80030dc:	2300      	movs	r3, #0
 80030de:	b510      	push	{r4, lr}
 80030e0:	4604      	mov	r4, r0
 80030e2:	e9c0 3300 	strd	r3, r3, [r0]
 80030e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ea:	6083      	str	r3, [r0, #8]
 80030ec:	8181      	strh	r1, [r0, #12]
 80030ee:	6643      	str	r3, [r0, #100]	; 0x64
 80030f0:	81c2      	strh	r2, [r0, #14]
 80030f2:	6183      	str	r3, [r0, #24]
 80030f4:	4619      	mov	r1, r3
 80030f6:	2208      	movs	r2, #8
 80030f8:	305c      	adds	r0, #92	; 0x5c
 80030fa:	f7ff ffcf 	bl	800309c <memset>
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <std+0x38>)
 8003100:	6224      	str	r4, [r4, #32]
 8003102:	6263      	str	r3, [r4, #36]	; 0x24
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <std+0x3c>)
 8003106:	62a3      	str	r3, [r4, #40]	; 0x28
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <std+0x40>)
 800310a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <std+0x44>)
 800310e:	6323      	str	r3, [r4, #48]	; 0x30
 8003110:	bd10      	pop	{r4, pc}
 8003112:	bf00      	nop
 8003114:	080039f1 	.word	0x080039f1
 8003118:	08003a13 	.word	0x08003a13
 800311c:	08003a4b 	.word	0x08003a4b
 8003120:	08003a6f 	.word	0x08003a6f

08003124 <_cleanup_r>:
 8003124:	4901      	ldr	r1, [pc, #4]	; (800312c <_cleanup_r+0x8>)
 8003126:	f000 b8af 	b.w	8003288 <_fwalk_reent>
 800312a:	bf00      	nop
 800312c:	08003d41 	.word	0x08003d41

08003130 <__sfmoreglue>:
 8003130:	2268      	movs	r2, #104	; 0x68
 8003132:	b570      	push	{r4, r5, r6, lr}
 8003134:	1e4d      	subs	r5, r1, #1
 8003136:	4355      	muls	r5, r2
 8003138:	460e      	mov	r6, r1
 800313a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800313e:	f000 f8e5 	bl	800330c <_malloc_r>
 8003142:	4604      	mov	r4, r0
 8003144:	b140      	cbz	r0, 8003158 <__sfmoreglue+0x28>
 8003146:	2100      	movs	r1, #0
 8003148:	e9c0 1600 	strd	r1, r6, [r0]
 800314c:	300c      	adds	r0, #12
 800314e:	60a0      	str	r0, [r4, #8]
 8003150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003154:	f7ff ffa2 	bl	800309c <memset>
 8003158:	4620      	mov	r0, r4
 800315a:	bd70      	pop	{r4, r5, r6, pc}

0800315c <__sfp_lock_acquire>:
 800315c:	4801      	ldr	r0, [pc, #4]	; (8003164 <__sfp_lock_acquire+0x8>)
 800315e:	f000 b8b3 	b.w	80032c8 <__retarget_lock_acquire_recursive>
 8003162:	bf00      	nop
 8003164:	20000185 	.word	0x20000185

08003168 <__sfp_lock_release>:
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <__sfp_lock_release+0x8>)
 800316a:	f000 b8ae 	b.w	80032ca <__retarget_lock_release_recursive>
 800316e:	bf00      	nop
 8003170:	20000185 	.word	0x20000185

08003174 <__sinit_lock_acquire>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__sinit_lock_acquire+0x8>)
 8003176:	f000 b8a7 	b.w	80032c8 <__retarget_lock_acquire_recursive>
 800317a:	bf00      	nop
 800317c:	20000186 	.word	0x20000186

08003180 <__sinit_lock_release>:
 8003180:	4801      	ldr	r0, [pc, #4]	; (8003188 <__sinit_lock_release+0x8>)
 8003182:	f000 b8a2 	b.w	80032ca <__retarget_lock_release_recursive>
 8003186:	bf00      	nop
 8003188:	20000186 	.word	0x20000186

0800318c <__sinit>:
 800318c:	b510      	push	{r4, lr}
 800318e:	4604      	mov	r4, r0
 8003190:	f7ff fff0 	bl	8003174 <__sinit_lock_acquire>
 8003194:	69a3      	ldr	r3, [r4, #24]
 8003196:	b11b      	cbz	r3, 80031a0 <__sinit+0x14>
 8003198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800319c:	f7ff bff0 	b.w	8003180 <__sinit_lock_release>
 80031a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031a4:	6523      	str	r3, [r4, #80]	; 0x50
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <__sinit+0x68>)
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <__sinit+0x6c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80031ae:	42a3      	cmp	r3, r4
 80031b0:	bf08      	it	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	4620      	mov	r0, r4
 80031b6:	bf08      	it	eq
 80031b8:	61a3      	streq	r3, [r4, #24]
 80031ba:	f000 f81f 	bl	80031fc <__sfp>
 80031be:	6060      	str	r0, [r4, #4]
 80031c0:	4620      	mov	r0, r4
 80031c2:	f000 f81b 	bl	80031fc <__sfp>
 80031c6:	60a0      	str	r0, [r4, #8]
 80031c8:	4620      	mov	r0, r4
 80031ca:	f000 f817 	bl	80031fc <__sfp>
 80031ce:	2200      	movs	r2, #0
 80031d0:	2104      	movs	r1, #4
 80031d2:	60e0      	str	r0, [r4, #12]
 80031d4:	6860      	ldr	r0, [r4, #4]
 80031d6:	f7ff ff81 	bl	80030dc <std>
 80031da:	2201      	movs	r2, #1
 80031dc:	2109      	movs	r1, #9
 80031de:	68a0      	ldr	r0, [r4, #8]
 80031e0:	f7ff ff7c 	bl	80030dc <std>
 80031e4:	2202      	movs	r2, #2
 80031e6:	2112      	movs	r1, #18
 80031e8:	68e0      	ldr	r0, [r4, #12]
 80031ea:	f7ff ff77 	bl	80030dc <std>
 80031ee:	2301      	movs	r3, #1
 80031f0:	61a3      	str	r3, [r4, #24]
 80031f2:	e7d1      	b.n	8003198 <__sinit+0xc>
 80031f4:	08004040 	.word	0x08004040
 80031f8:	08003125 	.word	0x08003125

080031fc <__sfp>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	4607      	mov	r7, r0
 8003200:	f7ff ffac 	bl	800315c <__sfp_lock_acquire>
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <__sfp+0x84>)
 8003206:	681e      	ldr	r6, [r3, #0]
 8003208:	69b3      	ldr	r3, [r6, #24]
 800320a:	b913      	cbnz	r3, 8003212 <__sfp+0x16>
 800320c:	4630      	mov	r0, r6
 800320e:	f7ff ffbd 	bl	800318c <__sinit>
 8003212:	3648      	adds	r6, #72	; 0x48
 8003214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003218:	3b01      	subs	r3, #1
 800321a:	d503      	bpl.n	8003224 <__sfp+0x28>
 800321c:	6833      	ldr	r3, [r6, #0]
 800321e:	b30b      	cbz	r3, 8003264 <__sfp+0x68>
 8003220:	6836      	ldr	r6, [r6, #0]
 8003222:	e7f7      	b.n	8003214 <__sfp+0x18>
 8003224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003228:	b9d5      	cbnz	r5, 8003260 <__sfp+0x64>
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <__sfp+0x88>)
 800322c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003230:	60e3      	str	r3, [r4, #12]
 8003232:	6665      	str	r5, [r4, #100]	; 0x64
 8003234:	f000 f847 	bl	80032c6 <__retarget_lock_init_recursive>
 8003238:	f7ff ff96 	bl	8003168 <__sfp_lock_release>
 800323c:	2208      	movs	r2, #8
 800323e:	4629      	mov	r1, r5
 8003240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003248:	6025      	str	r5, [r4, #0]
 800324a:	61a5      	str	r5, [r4, #24]
 800324c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003250:	f7ff ff24 	bl	800309c <memset>
 8003254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800325c:	4620      	mov	r0, r4
 800325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003260:	3468      	adds	r4, #104	; 0x68
 8003262:	e7d9      	b.n	8003218 <__sfp+0x1c>
 8003264:	2104      	movs	r1, #4
 8003266:	4638      	mov	r0, r7
 8003268:	f7ff ff62 	bl	8003130 <__sfmoreglue>
 800326c:	4604      	mov	r4, r0
 800326e:	6030      	str	r0, [r6, #0]
 8003270:	2800      	cmp	r0, #0
 8003272:	d1d5      	bne.n	8003220 <__sfp+0x24>
 8003274:	f7ff ff78 	bl	8003168 <__sfp_lock_release>
 8003278:	230c      	movs	r3, #12
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	e7ee      	b.n	800325c <__sfp+0x60>
 800327e:	bf00      	nop
 8003280:	08004040 	.word	0x08004040
 8003284:	ffff0001 	.word	0xffff0001

08003288 <_fwalk_reent>:
 8003288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800328c:	4606      	mov	r6, r0
 800328e:	4688      	mov	r8, r1
 8003290:	2700      	movs	r7, #0
 8003292:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800329a:	f1b9 0901 	subs.w	r9, r9, #1
 800329e:	d505      	bpl.n	80032ac <_fwalk_reent+0x24>
 80032a0:	6824      	ldr	r4, [r4, #0]
 80032a2:	2c00      	cmp	r4, #0
 80032a4:	d1f7      	bne.n	8003296 <_fwalk_reent+0xe>
 80032a6:	4638      	mov	r0, r7
 80032a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032ac:	89ab      	ldrh	r3, [r5, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d907      	bls.n	80032c2 <_fwalk_reent+0x3a>
 80032b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032b6:	3301      	adds	r3, #1
 80032b8:	d003      	beq.n	80032c2 <_fwalk_reent+0x3a>
 80032ba:	4629      	mov	r1, r5
 80032bc:	4630      	mov	r0, r6
 80032be:	47c0      	blx	r8
 80032c0:	4307      	orrs	r7, r0
 80032c2:	3568      	adds	r5, #104	; 0x68
 80032c4:	e7e9      	b.n	800329a <_fwalk_reent+0x12>

080032c6 <__retarget_lock_init_recursive>:
 80032c6:	4770      	bx	lr

080032c8 <__retarget_lock_acquire_recursive>:
 80032c8:	4770      	bx	lr

080032ca <__retarget_lock_release_recursive>:
 80032ca:	4770      	bx	lr

080032cc <sbrk_aligned>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	4e0e      	ldr	r6, [pc, #56]	; (8003308 <sbrk_aligned+0x3c>)
 80032d0:	460c      	mov	r4, r1
 80032d2:	6831      	ldr	r1, [r6, #0]
 80032d4:	4605      	mov	r5, r0
 80032d6:	b911      	cbnz	r1, 80032de <sbrk_aligned+0x12>
 80032d8:	f000 fb7a 	bl	80039d0 <_sbrk_r>
 80032dc:	6030      	str	r0, [r6, #0]
 80032de:	4621      	mov	r1, r4
 80032e0:	4628      	mov	r0, r5
 80032e2:	f000 fb75 	bl	80039d0 <_sbrk_r>
 80032e6:	1c43      	adds	r3, r0, #1
 80032e8:	d00a      	beq.n	8003300 <sbrk_aligned+0x34>
 80032ea:	1cc4      	adds	r4, r0, #3
 80032ec:	f024 0403 	bic.w	r4, r4, #3
 80032f0:	42a0      	cmp	r0, r4
 80032f2:	d007      	beq.n	8003304 <sbrk_aligned+0x38>
 80032f4:	1a21      	subs	r1, r4, r0
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 fb6a 	bl	80039d0 <_sbrk_r>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d101      	bne.n	8003304 <sbrk_aligned+0x38>
 8003300:	f04f 34ff 	mov.w	r4, #4294967295
 8003304:	4620      	mov	r0, r4
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	2000018c 	.word	0x2000018c

0800330c <_malloc_r>:
 800330c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003310:	1ccd      	adds	r5, r1, #3
 8003312:	f025 0503 	bic.w	r5, r5, #3
 8003316:	3508      	adds	r5, #8
 8003318:	2d0c      	cmp	r5, #12
 800331a:	bf38      	it	cc
 800331c:	250c      	movcc	r5, #12
 800331e:	2d00      	cmp	r5, #0
 8003320:	4607      	mov	r7, r0
 8003322:	db01      	blt.n	8003328 <_malloc_r+0x1c>
 8003324:	42a9      	cmp	r1, r5
 8003326:	d905      	bls.n	8003334 <_malloc_r+0x28>
 8003328:	230c      	movs	r3, #12
 800332a:	2600      	movs	r6, #0
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4630      	mov	r0, r6
 8003330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003334:	4e2e      	ldr	r6, [pc, #184]	; (80033f0 <_malloc_r+0xe4>)
 8003336:	f000 fdc5 	bl	8003ec4 <__malloc_lock>
 800333a:	6833      	ldr	r3, [r6, #0]
 800333c:	461c      	mov	r4, r3
 800333e:	bb34      	cbnz	r4, 800338e <_malloc_r+0x82>
 8003340:	4629      	mov	r1, r5
 8003342:	4638      	mov	r0, r7
 8003344:	f7ff ffc2 	bl	80032cc <sbrk_aligned>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	4604      	mov	r4, r0
 800334c:	d14d      	bne.n	80033ea <_malloc_r+0xde>
 800334e:	6834      	ldr	r4, [r6, #0]
 8003350:	4626      	mov	r6, r4
 8003352:	2e00      	cmp	r6, #0
 8003354:	d140      	bne.n	80033d8 <_malloc_r+0xcc>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	4631      	mov	r1, r6
 800335a:	4638      	mov	r0, r7
 800335c:	eb04 0803 	add.w	r8, r4, r3
 8003360:	f000 fb36 	bl	80039d0 <_sbrk_r>
 8003364:	4580      	cmp	r8, r0
 8003366:	d13a      	bne.n	80033de <_malloc_r+0xd2>
 8003368:	6821      	ldr	r1, [r4, #0]
 800336a:	3503      	adds	r5, #3
 800336c:	1a6d      	subs	r5, r5, r1
 800336e:	f025 0503 	bic.w	r5, r5, #3
 8003372:	3508      	adds	r5, #8
 8003374:	2d0c      	cmp	r5, #12
 8003376:	bf38      	it	cc
 8003378:	250c      	movcc	r5, #12
 800337a:	4638      	mov	r0, r7
 800337c:	4629      	mov	r1, r5
 800337e:	f7ff ffa5 	bl	80032cc <sbrk_aligned>
 8003382:	3001      	adds	r0, #1
 8003384:	d02b      	beq.n	80033de <_malloc_r+0xd2>
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	442b      	add	r3, r5
 800338a:	6023      	str	r3, [r4, #0]
 800338c:	e00e      	b.n	80033ac <_malloc_r+0xa0>
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	1b52      	subs	r2, r2, r5
 8003392:	d41e      	bmi.n	80033d2 <_malloc_r+0xc6>
 8003394:	2a0b      	cmp	r2, #11
 8003396:	d916      	bls.n	80033c6 <_malloc_r+0xba>
 8003398:	1961      	adds	r1, r4, r5
 800339a:	42a3      	cmp	r3, r4
 800339c:	6025      	str	r5, [r4, #0]
 800339e:	bf18      	it	ne
 80033a0:	6059      	strne	r1, [r3, #4]
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	bf08      	it	eq
 80033a6:	6031      	streq	r1, [r6, #0]
 80033a8:	5162      	str	r2, [r4, r5]
 80033aa:	604b      	str	r3, [r1, #4]
 80033ac:	4638      	mov	r0, r7
 80033ae:	f104 060b 	add.w	r6, r4, #11
 80033b2:	f000 fd8d 	bl	8003ed0 <__malloc_unlock>
 80033b6:	f026 0607 	bic.w	r6, r6, #7
 80033ba:	1d23      	adds	r3, r4, #4
 80033bc:	1af2      	subs	r2, r6, r3
 80033be:	d0b6      	beq.n	800332e <_malloc_r+0x22>
 80033c0:	1b9b      	subs	r3, r3, r6
 80033c2:	50a3      	str	r3, [r4, r2]
 80033c4:	e7b3      	b.n	800332e <_malloc_r+0x22>
 80033c6:	6862      	ldr	r2, [r4, #4]
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	bf0c      	ite	eq
 80033cc:	6032      	streq	r2, [r6, #0]
 80033ce:	605a      	strne	r2, [r3, #4]
 80033d0:	e7ec      	b.n	80033ac <_malloc_r+0xa0>
 80033d2:	4623      	mov	r3, r4
 80033d4:	6864      	ldr	r4, [r4, #4]
 80033d6:	e7b2      	b.n	800333e <_malloc_r+0x32>
 80033d8:	4634      	mov	r4, r6
 80033da:	6876      	ldr	r6, [r6, #4]
 80033dc:	e7b9      	b.n	8003352 <_malloc_r+0x46>
 80033de:	230c      	movs	r3, #12
 80033e0:	4638      	mov	r0, r7
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	f000 fd74 	bl	8003ed0 <__malloc_unlock>
 80033e8:	e7a1      	b.n	800332e <_malloc_r+0x22>
 80033ea:	6025      	str	r5, [r4, #0]
 80033ec:	e7de      	b.n	80033ac <_malloc_r+0xa0>
 80033ee:	bf00      	nop
 80033f0:	20000188 	.word	0x20000188

080033f4 <__sfputc_r>:
 80033f4:	6893      	ldr	r3, [r2, #8]
 80033f6:	b410      	push	{r4}
 80033f8:	3b01      	subs	r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	6093      	str	r3, [r2, #8]
 80033fe:	da07      	bge.n	8003410 <__sfputc_r+0x1c>
 8003400:	6994      	ldr	r4, [r2, #24]
 8003402:	42a3      	cmp	r3, r4
 8003404:	db01      	blt.n	800340a <__sfputc_r+0x16>
 8003406:	290a      	cmp	r1, #10
 8003408:	d102      	bne.n	8003410 <__sfputc_r+0x1c>
 800340a:	bc10      	pop	{r4}
 800340c:	f000 bb34 	b.w	8003a78 <__swbuf_r>
 8003410:	6813      	ldr	r3, [r2, #0]
 8003412:	1c58      	adds	r0, r3, #1
 8003414:	6010      	str	r0, [r2, #0]
 8003416:	7019      	strb	r1, [r3, #0]
 8003418:	4608      	mov	r0, r1
 800341a:	bc10      	pop	{r4}
 800341c:	4770      	bx	lr

0800341e <__sfputs_r>:
 800341e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003420:	4606      	mov	r6, r0
 8003422:	460f      	mov	r7, r1
 8003424:	4614      	mov	r4, r2
 8003426:	18d5      	adds	r5, r2, r3
 8003428:	42ac      	cmp	r4, r5
 800342a:	d101      	bne.n	8003430 <__sfputs_r+0x12>
 800342c:	2000      	movs	r0, #0
 800342e:	e007      	b.n	8003440 <__sfputs_r+0x22>
 8003430:	463a      	mov	r2, r7
 8003432:	4630      	mov	r0, r6
 8003434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003438:	f7ff ffdc 	bl	80033f4 <__sfputc_r>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d1f3      	bne.n	8003428 <__sfputs_r+0xa>
 8003440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003444 <_vfiprintf_r>:
 8003444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003448:	460d      	mov	r5, r1
 800344a:	4614      	mov	r4, r2
 800344c:	4698      	mov	r8, r3
 800344e:	4606      	mov	r6, r0
 8003450:	b09d      	sub	sp, #116	; 0x74
 8003452:	b118      	cbz	r0, 800345c <_vfiprintf_r+0x18>
 8003454:	6983      	ldr	r3, [r0, #24]
 8003456:	b90b      	cbnz	r3, 800345c <_vfiprintf_r+0x18>
 8003458:	f7ff fe98 	bl	800318c <__sinit>
 800345c:	4b89      	ldr	r3, [pc, #548]	; (8003684 <_vfiprintf_r+0x240>)
 800345e:	429d      	cmp	r5, r3
 8003460:	d11b      	bne.n	800349a <_vfiprintf_r+0x56>
 8003462:	6875      	ldr	r5, [r6, #4]
 8003464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003466:	07d9      	lsls	r1, r3, #31
 8003468:	d405      	bmi.n	8003476 <_vfiprintf_r+0x32>
 800346a:	89ab      	ldrh	r3, [r5, #12]
 800346c:	059a      	lsls	r2, r3, #22
 800346e:	d402      	bmi.n	8003476 <_vfiprintf_r+0x32>
 8003470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003472:	f7ff ff29 	bl	80032c8 <__retarget_lock_acquire_recursive>
 8003476:	89ab      	ldrh	r3, [r5, #12]
 8003478:	071b      	lsls	r3, r3, #28
 800347a:	d501      	bpl.n	8003480 <_vfiprintf_r+0x3c>
 800347c:	692b      	ldr	r3, [r5, #16]
 800347e:	b9eb      	cbnz	r3, 80034bc <_vfiprintf_r+0x78>
 8003480:	4629      	mov	r1, r5
 8003482:	4630      	mov	r0, r6
 8003484:	f000 fb5c 	bl	8003b40 <__swsetup_r>
 8003488:	b1c0      	cbz	r0, 80034bc <_vfiprintf_r+0x78>
 800348a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800348c:	07dc      	lsls	r4, r3, #31
 800348e:	d50e      	bpl.n	80034ae <_vfiprintf_r+0x6a>
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	b01d      	add	sp, #116	; 0x74
 8003496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349a:	4b7b      	ldr	r3, [pc, #492]	; (8003688 <_vfiprintf_r+0x244>)
 800349c:	429d      	cmp	r5, r3
 800349e:	d101      	bne.n	80034a4 <_vfiprintf_r+0x60>
 80034a0:	68b5      	ldr	r5, [r6, #8]
 80034a2:	e7df      	b.n	8003464 <_vfiprintf_r+0x20>
 80034a4:	4b79      	ldr	r3, [pc, #484]	; (800368c <_vfiprintf_r+0x248>)
 80034a6:	429d      	cmp	r5, r3
 80034a8:	bf08      	it	eq
 80034aa:	68f5      	ldreq	r5, [r6, #12]
 80034ac:	e7da      	b.n	8003464 <_vfiprintf_r+0x20>
 80034ae:	89ab      	ldrh	r3, [r5, #12]
 80034b0:	0598      	lsls	r0, r3, #22
 80034b2:	d4ed      	bmi.n	8003490 <_vfiprintf_r+0x4c>
 80034b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034b6:	f7ff ff08 	bl	80032ca <__retarget_lock_release_recursive>
 80034ba:	e7e9      	b.n	8003490 <_vfiprintf_r+0x4c>
 80034bc:	2300      	movs	r3, #0
 80034be:	9309      	str	r3, [sp, #36]	; 0x24
 80034c0:	2320      	movs	r3, #32
 80034c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034c6:	2330      	movs	r3, #48	; 0x30
 80034c8:	f04f 0901 	mov.w	r9, #1
 80034cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003690 <_vfiprintf_r+0x24c>
 80034d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034d8:	4623      	mov	r3, r4
 80034da:	469a      	mov	sl, r3
 80034dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034e0:	b10a      	cbz	r2, 80034e6 <_vfiprintf_r+0xa2>
 80034e2:	2a25      	cmp	r2, #37	; 0x25
 80034e4:	d1f9      	bne.n	80034da <_vfiprintf_r+0x96>
 80034e6:	ebba 0b04 	subs.w	fp, sl, r4
 80034ea:	d00b      	beq.n	8003504 <_vfiprintf_r+0xc0>
 80034ec:	465b      	mov	r3, fp
 80034ee:	4622      	mov	r2, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	4630      	mov	r0, r6
 80034f4:	f7ff ff93 	bl	800341e <__sfputs_r>
 80034f8:	3001      	adds	r0, #1
 80034fa:	f000 80aa 	beq.w	8003652 <_vfiprintf_r+0x20e>
 80034fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003500:	445a      	add	r2, fp
 8003502:	9209      	str	r2, [sp, #36]	; 0x24
 8003504:	f89a 3000 	ldrb.w	r3, [sl]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a2 	beq.w	8003652 <_vfiprintf_r+0x20e>
 800350e:	2300      	movs	r3, #0
 8003510:	f04f 32ff 	mov.w	r2, #4294967295
 8003514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003518:	f10a 0a01 	add.w	sl, sl, #1
 800351c:	9304      	str	r3, [sp, #16]
 800351e:	9307      	str	r3, [sp, #28]
 8003520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003524:	931a      	str	r3, [sp, #104]	; 0x68
 8003526:	4654      	mov	r4, sl
 8003528:	2205      	movs	r2, #5
 800352a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800352e:	4858      	ldr	r0, [pc, #352]	; (8003690 <_vfiprintf_r+0x24c>)
 8003530:	f000 fcba 	bl	8003ea8 <memchr>
 8003534:	9a04      	ldr	r2, [sp, #16]
 8003536:	b9d8      	cbnz	r0, 8003570 <_vfiprintf_r+0x12c>
 8003538:	06d1      	lsls	r1, r2, #27
 800353a:	bf44      	itt	mi
 800353c:	2320      	movmi	r3, #32
 800353e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003542:	0713      	lsls	r3, r2, #28
 8003544:	bf44      	itt	mi
 8003546:	232b      	movmi	r3, #43	; 0x2b
 8003548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800354c:	f89a 3000 	ldrb.w	r3, [sl]
 8003550:	2b2a      	cmp	r3, #42	; 0x2a
 8003552:	d015      	beq.n	8003580 <_vfiprintf_r+0x13c>
 8003554:	4654      	mov	r4, sl
 8003556:	2000      	movs	r0, #0
 8003558:	f04f 0c0a 	mov.w	ip, #10
 800355c:	9a07      	ldr	r2, [sp, #28]
 800355e:	4621      	mov	r1, r4
 8003560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003564:	3b30      	subs	r3, #48	; 0x30
 8003566:	2b09      	cmp	r3, #9
 8003568:	d94e      	bls.n	8003608 <_vfiprintf_r+0x1c4>
 800356a:	b1b0      	cbz	r0, 800359a <_vfiprintf_r+0x156>
 800356c:	9207      	str	r2, [sp, #28]
 800356e:	e014      	b.n	800359a <_vfiprintf_r+0x156>
 8003570:	eba0 0308 	sub.w	r3, r0, r8
 8003574:	fa09 f303 	lsl.w	r3, r9, r3
 8003578:	4313      	orrs	r3, r2
 800357a:	46a2      	mov	sl, r4
 800357c:	9304      	str	r3, [sp, #16]
 800357e:	e7d2      	b.n	8003526 <_vfiprintf_r+0xe2>
 8003580:	9b03      	ldr	r3, [sp, #12]
 8003582:	1d19      	adds	r1, r3, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	9103      	str	r1, [sp, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	bfbb      	ittet	lt
 800358c:	425b      	neglt	r3, r3
 800358e:	f042 0202 	orrlt.w	r2, r2, #2
 8003592:	9307      	strge	r3, [sp, #28]
 8003594:	9307      	strlt	r3, [sp, #28]
 8003596:	bfb8      	it	lt
 8003598:	9204      	strlt	r2, [sp, #16]
 800359a:	7823      	ldrb	r3, [r4, #0]
 800359c:	2b2e      	cmp	r3, #46	; 0x2e
 800359e:	d10c      	bne.n	80035ba <_vfiprintf_r+0x176>
 80035a0:	7863      	ldrb	r3, [r4, #1]
 80035a2:	2b2a      	cmp	r3, #42	; 0x2a
 80035a4:	d135      	bne.n	8003612 <_vfiprintf_r+0x1ce>
 80035a6:	9b03      	ldr	r3, [sp, #12]
 80035a8:	3402      	adds	r4, #2
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	9203      	str	r2, [sp, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bfb8      	it	lt
 80035b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80035b8:	9305      	str	r3, [sp, #20]
 80035ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003694 <_vfiprintf_r+0x250>
 80035be:	2203      	movs	r2, #3
 80035c0:	4650      	mov	r0, sl
 80035c2:	7821      	ldrb	r1, [r4, #0]
 80035c4:	f000 fc70 	bl	8003ea8 <memchr>
 80035c8:	b140      	cbz	r0, 80035dc <_vfiprintf_r+0x198>
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	eba0 000a 	sub.w	r0, r0, sl
 80035d0:	fa03 f000 	lsl.w	r0, r3, r0
 80035d4:	9b04      	ldr	r3, [sp, #16]
 80035d6:	3401      	adds	r4, #1
 80035d8:	4303      	orrs	r3, r0
 80035da:	9304      	str	r3, [sp, #16]
 80035dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e0:	2206      	movs	r2, #6
 80035e2:	482d      	ldr	r0, [pc, #180]	; (8003698 <_vfiprintf_r+0x254>)
 80035e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035e8:	f000 fc5e 	bl	8003ea8 <memchr>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d03f      	beq.n	8003670 <_vfiprintf_r+0x22c>
 80035f0:	4b2a      	ldr	r3, [pc, #168]	; (800369c <_vfiprintf_r+0x258>)
 80035f2:	bb1b      	cbnz	r3, 800363c <_vfiprintf_r+0x1f8>
 80035f4:	9b03      	ldr	r3, [sp, #12]
 80035f6:	3307      	adds	r3, #7
 80035f8:	f023 0307 	bic.w	r3, r3, #7
 80035fc:	3308      	adds	r3, #8
 80035fe:	9303      	str	r3, [sp, #12]
 8003600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003602:	443b      	add	r3, r7
 8003604:	9309      	str	r3, [sp, #36]	; 0x24
 8003606:	e767      	b.n	80034d8 <_vfiprintf_r+0x94>
 8003608:	460c      	mov	r4, r1
 800360a:	2001      	movs	r0, #1
 800360c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003610:	e7a5      	b.n	800355e <_vfiprintf_r+0x11a>
 8003612:	2300      	movs	r3, #0
 8003614:	f04f 0c0a 	mov.w	ip, #10
 8003618:	4619      	mov	r1, r3
 800361a:	3401      	adds	r4, #1
 800361c:	9305      	str	r3, [sp, #20]
 800361e:	4620      	mov	r0, r4
 8003620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003624:	3a30      	subs	r2, #48	; 0x30
 8003626:	2a09      	cmp	r2, #9
 8003628:	d903      	bls.n	8003632 <_vfiprintf_r+0x1ee>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0c5      	beq.n	80035ba <_vfiprintf_r+0x176>
 800362e:	9105      	str	r1, [sp, #20]
 8003630:	e7c3      	b.n	80035ba <_vfiprintf_r+0x176>
 8003632:	4604      	mov	r4, r0
 8003634:	2301      	movs	r3, #1
 8003636:	fb0c 2101 	mla	r1, ip, r1, r2
 800363a:	e7f0      	b.n	800361e <_vfiprintf_r+0x1da>
 800363c:	ab03      	add	r3, sp, #12
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	462a      	mov	r2, r5
 8003642:	4630      	mov	r0, r6
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <_vfiprintf_r+0x25c>)
 8003646:	a904      	add	r1, sp, #16
 8003648:	f3af 8000 	nop.w
 800364c:	4607      	mov	r7, r0
 800364e:	1c78      	adds	r0, r7, #1
 8003650:	d1d6      	bne.n	8003600 <_vfiprintf_r+0x1bc>
 8003652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003654:	07d9      	lsls	r1, r3, #31
 8003656:	d405      	bmi.n	8003664 <_vfiprintf_r+0x220>
 8003658:	89ab      	ldrh	r3, [r5, #12]
 800365a:	059a      	lsls	r2, r3, #22
 800365c:	d402      	bmi.n	8003664 <_vfiprintf_r+0x220>
 800365e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003660:	f7ff fe33 	bl	80032ca <__retarget_lock_release_recursive>
 8003664:	89ab      	ldrh	r3, [r5, #12]
 8003666:	065b      	lsls	r3, r3, #25
 8003668:	f53f af12 	bmi.w	8003490 <_vfiprintf_r+0x4c>
 800366c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800366e:	e711      	b.n	8003494 <_vfiprintf_r+0x50>
 8003670:	ab03      	add	r3, sp, #12
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	462a      	mov	r2, r5
 8003676:	4630      	mov	r0, r6
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <_vfiprintf_r+0x25c>)
 800367a:	a904      	add	r1, sp, #16
 800367c:	f000 f882 	bl	8003784 <_printf_i>
 8003680:	e7e4      	b.n	800364c <_vfiprintf_r+0x208>
 8003682:	bf00      	nop
 8003684:	08004064 	.word	0x08004064
 8003688:	08004084 	.word	0x08004084
 800368c:	08004044 	.word	0x08004044
 8003690:	080040a4 	.word	0x080040a4
 8003694:	080040aa 	.word	0x080040aa
 8003698:	080040ae 	.word	0x080040ae
 800369c:	00000000 	.word	0x00000000
 80036a0:	0800341f 	.word	0x0800341f

080036a4 <_printf_common>:
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4616      	mov	r6, r2
 80036aa:	4699      	mov	r9, r3
 80036ac:	688a      	ldr	r2, [r1, #8]
 80036ae:	690b      	ldr	r3, [r1, #16]
 80036b0:	4607      	mov	r7, r0
 80036b2:	4293      	cmp	r3, r2
 80036b4:	bfb8      	it	lt
 80036b6:	4613      	movlt	r3, r2
 80036b8:	6033      	str	r3, [r6, #0]
 80036ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036be:	460c      	mov	r4, r1
 80036c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036c4:	b10a      	cbz	r2, 80036ca <_printf_common+0x26>
 80036c6:	3301      	adds	r3, #1
 80036c8:	6033      	str	r3, [r6, #0]
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	0699      	lsls	r1, r3, #26
 80036ce:	bf42      	ittt	mi
 80036d0:	6833      	ldrmi	r3, [r6, #0]
 80036d2:	3302      	addmi	r3, #2
 80036d4:	6033      	strmi	r3, [r6, #0]
 80036d6:	6825      	ldr	r5, [r4, #0]
 80036d8:	f015 0506 	ands.w	r5, r5, #6
 80036dc:	d106      	bne.n	80036ec <_printf_common+0x48>
 80036de:	f104 0a19 	add.w	sl, r4, #25
 80036e2:	68e3      	ldr	r3, [r4, #12]
 80036e4:	6832      	ldr	r2, [r6, #0]
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	42ab      	cmp	r3, r5
 80036ea:	dc28      	bgt.n	800373e <_printf_common+0x9a>
 80036ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036f0:	1e13      	subs	r3, r2, #0
 80036f2:	6822      	ldr	r2, [r4, #0]
 80036f4:	bf18      	it	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	0692      	lsls	r2, r2, #26
 80036fa:	d42d      	bmi.n	8003758 <_printf_common+0xb4>
 80036fc:	4649      	mov	r1, r9
 80036fe:	4638      	mov	r0, r7
 8003700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003704:	47c0      	blx	r8
 8003706:	3001      	adds	r0, #1
 8003708:	d020      	beq.n	800374c <_printf_common+0xa8>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	68e5      	ldr	r5, [r4, #12]
 800370e:	f003 0306 	and.w	r3, r3, #6
 8003712:	2b04      	cmp	r3, #4
 8003714:	bf18      	it	ne
 8003716:	2500      	movne	r5, #0
 8003718:	6832      	ldr	r2, [r6, #0]
 800371a:	f04f 0600 	mov.w	r6, #0
 800371e:	68a3      	ldr	r3, [r4, #8]
 8003720:	bf08      	it	eq
 8003722:	1aad      	subeq	r5, r5, r2
 8003724:	6922      	ldr	r2, [r4, #16]
 8003726:	bf08      	it	eq
 8003728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800372c:	4293      	cmp	r3, r2
 800372e:	bfc4      	itt	gt
 8003730:	1a9b      	subgt	r3, r3, r2
 8003732:	18ed      	addgt	r5, r5, r3
 8003734:	341a      	adds	r4, #26
 8003736:	42b5      	cmp	r5, r6
 8003738:	d11a      	bne.n	8003770 <_printf_common+0xcc>
 800373a:	2000      	movs	r0, #0
 800373c:	e008      	b.n	8003750 <_printf_common+0xac>
 800373e:	2301      	movs	r3, #1
 8003740:	4652      	mov	r2, sl
 8003742:	4649      	mov	r1, r9
 8003744:	4638      	mov	r0, r7
 8003746:	47c0      	blx	r8
 8003748:	3001      	adds	r0, #1
 800374a:	d103      	bne.n	8003754 <_printf_common+0xb0>
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003754:	3501      	adds	r5, #1
 8003756:	e7c4      	b.n	80036e2 <_printf_common+0x3e>
 8003758:	2030      	movs	r0, #48	; 0x30
 800375a:	18e1      	adds	r1, r4, r3
 800375c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003766:	4422      	add	r2, r4
 8003768:	3302      	adds	r3, #2
 800376a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800376e:	e7c5      	b.n	80036fc <_printf_common+0x58>
 8003770:	2301      	movs	r3, #1
 8003772:	4622      	mov	r2, r4
 8003774:	4649      	mov	r1, r9
 8003776:	4638      	mov	r0, r7
 8003778:	47c0      	blx	r8
 800377a:	3001      	adds	r0, #1
 800377c:	d0e6      	beq.n	800374c <_printf_common+0xa8>
 800377e:	3601      	adds	r6, #1
 8003780:	e7d9      	b.n	8003736 <_printf_common+0x92>
	...

08003784 <_printf_i>:
 8003784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	7e0f      	ldrb	r7, [r1, #24]
 800378a:	4691      	mov	r9, r2
 800378c:	2f78      	cmp	r7, #120	; 0x78
 800378e:	4680      	mov	r8, r0
 8003790:	460c      	mov	r4, r1
 8003792:	469a      	mov	sl, r3
 8003794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800379a:	d807      	bhi.n	80037ac <_printf_i+0x28>
 800379c:	2f62      	cmp	r7, #98	; 0x62
 800379e:	d80a      	bhi.n	80037b6 <_printf_i+0x32>
 80037a0:	2f00      	cmp	r7, #0
 80037a2:	f000 80d9 	beq.w	8003958 <_printf_i+0x1d4>
 80037a6:	2f58      	cmp	r7, #88	; 0x58
 80037a8:	f000 80a4 	beq.w	80038f4 <_printf_i+0x170>
 80037ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037b4:	e03a      	b.n	800382c <_printf_i+0xa8>
 80037b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037ba:	2b15      	cmp	r3, #21
 80037bc:	d8f6      	bhi.n	80037ac <_printf_i+0x28>
 80037be:	a101      	add	r1, pc, #4	; (adr r1, 80037c4 <_printf_i+0x40>)
 80037c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	08003831 	.word	0x08003831
 80037cc:	080037ad 	.word	0x080037ad
 80037d0:	080037ad 	.word	0x080037ad
 80037d4:	080037ad 	.word	0x080037ad
 80037d8:	080037ad 	.word	0x080037ad
 80037dc:	08003831 	.word	0x08003831
 80037e0:	080037ad 	.word	0x080037ad
 80037e4:	080037ad 	.word	0x080037ad
 80037e8:	080037ad 	.word	0x080037ad
 80037ec:	080037ad 	.word	0x080037ad
 80037f0:	0800393f 	.word	0x0800393f
 80037f4:	08003861 	.word	0x08003861
 80037f8:	08003921 	.word	0x08003921
 80037fc:	080037ad 	.word	0x080037ad
 8003800:	080037ad 	.word	0x080037ad
 8003804:	08003961 	.word	0x08003961
 8003808:	080037ad 	.word	0x080037ad
 800380c:	08003861 	.word	0x08003861
 8003810:	080037ad 	.word	0x080037ad
 8003814:	080037ad 	.word	0x080037ad
 8003818:	08003929 	.word	0x08003929
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	602a      	str	r2, [r5, #0]
 8003824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800382c:	2301      	movs	r3, #1
 800382e:	e0a4      	b.n	800397a <_printf_i+0x1f6>
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	6829      	ldr	r1, [r5, #0]
 8003834:	0606      	lsls	r6, r0, #24
 8003836:	f101 0304 	add.w	r3, r1, #4
 800383a:	d50a      	bpl.n	8003852 <_printf_i+0xce>
 800383c:	680e      	ldr	r6, [r1, #0]
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	2e00      	cmp	r6, #0
 8003842:	da03      	bge.n	800384c <_printf_i+0xc8>
 8003844:	232d      	movs	r3, #45	; 0x2d
 8003846:	4276      	negs	r6, r6
 8003848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800384c:	230a      	movs	r3, #10
 800384e:	485e      	ldr	r0, [pc, #376]	; (80039c8 <_printf_i+0x244>)
 8003850:	e019      	b.n	8003886 <_printf_i+0x102>
 8003852:	680e      	ldr	r6, [r1, #0]
 8003854:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003858:	602b      	str	r3, [r5, #0]
 800385a:	bf18      	it	ne
 800385c:	b236      	sxthne	r6, r6
 800385e:	e7ef      	b.n	8003840 <_printf_i+0xbc>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	1d19      	adds	r1, r3, #4
 8003866:	6029      	str	r1, [r5, #0]
 8003868:	0601      	lsls	r1, r0, #24
 800386a:	d501      	bpl.n	8003870 <_printf_i+0xec>
 800386c:	681e      	ldr	r6, [r3, #0]
 800386e:	e002      	b.n	8003876 <_printf_i+0xf2>
 8003870:	0646      	lsls	r6, r0, #25
 8003872:	d5fb      	bpl.n	800386c <_printf_i+0xe8>
 8003874:	881e      	ldrh	r6, [r3, #0]
 8003876:	2f6f      	cmp	r7, #111	; 0x6f
 8003878:	bf0c      	ite	eq
 800387a:	2308      	moveq	r3, #8
 800387c:	230a      	movne	r3, #10
 800387e:	4852      	ldr	r0, [pc, #328]	; (80039c8 <_printf_i+0x244>)
 8003880:	2100      	movs	r1, #0
 8003882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003886:	6865      	ldr	r5, [r4, #4]
 8003888:	2d00      	cmp	r5, #0
 800388a:	bfa8      	it	ge
 800388c:	6821      	ldrge	r1, [r4, #0]
 800388e:	60a5      	str	r5, [r4, #8]
 8003890:	bfa4      	itt	ge
 8003892:	f021 0104 	bicge.w	r1, r1, #4
 8003896:	6021      	strge	r1, [r4, #0]
 8003898:	b90e      	cbnz	r6, 800389e <_printf_i+0x11a>
 800389a:	2d00      	cmp	r5, #0
 800389c:	d04d      	beq.n	800393a <_printf_i+0x1b6>
 800389e:	4615      	mov	r5, r2
 80038a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80038a4:	fb03 6711 	mls	r7, r3, r1, r6
 80038a8:	5dc7      	ldrb	r7, [r0, r7]
 80038aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038ae:	4637      	mov	r7, r6
 80038b0:	42bb      	cmp	r3, r7
 80038b2:	460e      	mov	r6, r1
 80038b4:	d9f4      	bls.n	80038a0 <_printf_i+0x11c>
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d10b      	bne.n	80038d2 <_printf_i+0x14e>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	07de      	lsls	r6, r3, #31
 80038be:	d508      	bpl.n	80038d2 <_printf_i+0x14e>
 80038c0:	6923      	ldr	r3, [r4, #16]
 80038c2:	6861      	ldr	r1, [r4, #4]
 80038c4:	4299      	cmp	r1, r3
 80038c6:	bfde      	ittt	le
 80038c8:	2330      	movle	r3, #48	; 0x30
 80038ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038d2:	1b52      	subs	r2, r2, r5
 80038d4:	6122      	str	r2, [r4, #16]
 80038d6:	464b      	mov	r3, r9
 80038d8:	4621      	mov	r1, r4
 80038da:	4640      	mov	r0, r8
 80038dc:	f8cd a000 	str.w	sl, [sp]
 80038e0:	aa03      	add	r2, sp, #12
 80038e2:	f7ff fedf 	bl	80036a4 <_printf_common>
 80038e6:	3001      	adds	r0, #1
 80038e8:	d14c      	bne.n	8003984 <_printf_i+0x200>
 80038ea:	f04f 30ff 	mov.w	r0, #4294967295
 80038ee:	b004      	add	sp, #16
 80038f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f4:	4834      	ldr	r0, [pc, #208]	; (80039c8 <_printf_i+0x244>)
 80038f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038fa:	6829      	ldr	r1, [r5, #0]
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003902:	6029      	str	r1, [r5, #0]
 8003904:	061d      	lsls	r5, r3, #24
 8003906:	d514      	bpl.n	8003932 <_printf_i+0x1ae>
 8003908:	07df      	lsls	r7, r3, #31
 800390a:	bf44      	itt	mi
 800390c:	f043 0320 	orrmi.w	r3, r3, #32
 8003910:	6023      	strmi	r3, [r4, #0]
 8003912:	b91e      	cbnz	r6, 800391c <_printf_i+0x198>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	f023 0320 	bic.w	r3, r3, #32
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	2310      	movs	r3, #16
 800391e:	e7af      	b.n	8003880 <_printf_i+0xfc>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	2378      	movs	r3, #120	; 0x78
 800392a:	4828      	ldr	r0, [pc, #160]	; (80039cc <_printf_i+0x248>)
 800392c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003930:	e7e3      	b.n	80038fa <_printf_i+0x176>
 8003932:	0659      	lsls	r1, r3, #25
 8003934:	bf48      	it	mi
 8003936:	b2b6      	uxthmi	r6, r6
 8003938:	e7e6      	b.n	8003908 <_printf_i+0x184>
 800393a:	4615      	mov	r5, r2
 800393c:	e7bb      	b.n	80038b6 <_printf_i+0x132>
 800393e:	682b      	ldr	r3, [r5, #0]
 8003940:	6826      	ldr	r6, [r4, #0]
 8003942:	1d18      	adds	r0, r3, #4
 8003944:	6961      	ldr	r1, [r4, #20]
 8003946:	6028      	str	r0, [r5, #0]
 8003948:	0635      	lsls	r5, r6, #24
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	d501      	bpl.n	8003952 <_printf_i+0x1ce>
 800394e:	6019      	str	r1, [r3, #0]
 8003950:	e002      	b.n	8003958 <_printf_i+0x1d4>
 8003952:	0670      	lsls	r0, r6, #25
 8003954:	d5fb      	bpl.n	800394e <_printf_i+0x1ca>
 8003956:	8019      	strh	r1, [r3, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	4615      	mov	r5, r2
 800395c:	6123      	str	r3, [r4, #16]
 800395e:	e7ba      	b.n	80038d6 <_printf_i+0x152>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	2100      	movs	r1, #0
 8003964:	1d1a      	adds	r2, r3, #4
 8003966:	602a      	str	r2, [r5, #0]
 8003968:	681d      	ldr	r5, [r3, #0]
 800396a:	6862      	ldr	r2, [r4, #4]
 800396c:	4628      	mov	r0, r5
 800396e:	f000 fa9b 	bl	8003ea8 <memchr>
 8003972:	b108      	cbz	r0, 8003978 <_printf_i+0x1f4>
 8003974:	1b40      	subs	r0, r0, r5
 8003976:	6060      	str	r0, [r4, #4]
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	2300      	movs	r3, #0
 800397e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003982:	e7a8      	b.n	80038d6 <_printf_i+0x152>
 8003984:	462a      	mov	r2, r5
 8003986:	4649      	mov	r1, r9
 8003988:	4640      	mov	r0, r8
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	47d0      	blx	sl
 800398e:	3001      	adds	r0, #1
 8003990:	d0ab      	beq.n	80038ea <_printf_i+0x166>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	079b      	lsls	r3, r3, #30
 8003996:	d413      	bmi.n	80039c0 <_printf_i+0x23c>
 8003998:	68e0      	ldr	r0, [r4, #12]
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	4298      	cmp	r0, r3
 800399e:	bfb8      	it	lt
 80039a0:	4618      	movlt	r0, r3
 80039a2:	e7a4      	b.n	80038ee <_printf_i+0x16a>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4632      	mov	r2, r6
 80039a8:	4649      	mov	r1, r9
 80039aa:	4640      	mov	r0, r8
 80039ac:	47d0      	blx	sl
 80039ae:	3001      	adds	r0, #1
 80039b0:	d09b      	beq.n	80038ea <_printf_i+0x166>
 80039b2:	3501      	adds	r5, #1
 80039b4:	68e3      	ldr	r3, [r4, #12]
 80039b6:	9903      	ldr	r1, [sp, #12]
 80039b8:	1a5b      	subs	r3, r3, r1
 80039ba:	42ab      	cmp	r3, r5
 80039bc:	dcf2      	bgt.n	80039a4 <_printf_i+0x220>
 80039be:	e7eb      	b.n	8003998 <_printf_i+0x214>
 80039c0:	2500      	movs	r5, #0
 80039c2:	f104 0619 	add.w	r6, r4, #25
 80039c6:	e7f5      	b.n	80039b4 <_printf_i+0x230>
 80039c8:	080040b5 	.word	0x080040b5
 80039cc:	080040c6 	.word	0x080040c6

080039d0 <_sbrk_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	2300      	movs	r3, #0
 80039d4:	4d05      	ldr	r5, [pc, #20]	; (80039ec <_sbrk_r+0x1c>)
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fd f8f2 	bl	8000bc4 <_sbrk>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_sbrk_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_sbrk_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	20000190 	.word	0x20000190

080039f0 <__sread>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	460c      	mov	r4, r1
 80039f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f8:	f000 fab8 	bl	8003f6c <_read_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	bfab      	itete	ge
 8003a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a02:	89a3      	ldrhlt	r3, [r4, #12]
 8003a04:	181b      	addge	r3, r3, r0
 8003a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a0a:	bfac      	ite	ge
 8003a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a0e:	81a3      	strhlt	r3, [r4, #12]
 8003a10:	bd10      	pop	{r4, pc}

08003a12 <__swrite>:
 8003a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a16:	461f      	mov	r7, r3
 8003a18:	898b      	ldrh	r3, [r1, #12]
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	05db      	lsls	r3, r3, #23
 8003a1e:	460c      	mov	r4, r1
 8003a20:	4616      	mov	r6, r2
 8003a22:	d505      	bpl.n	8003a30 <__swrite+0x1e>
 8003a24:	2302      	movs	r3, #2
 8003a26:	2200      	movs	r2, #0
 8003a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a2c:	f000 f9c4 	bl	8003db8 <_lseek_r>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	4632      	mov	r2, r6
 8003a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a46:	f000 b869 	b.w	8003b1c <_write_r>

08003a4a <__sseek>:
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a52:	f000 f9b1 	bl	8003db8 <_lseek_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	bf15      	itete	ne
 8003a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a66:	81a3      	strheq	r3, [r4, #12]
 8003a68:	bf18      	it	ne
 8003a6a:	81a3      	strhne	r3, [r4, #12]
 8003a6c:	bd10      	pop	{r4, pc}

08003a6e <__sclose>:
 8003a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a72:	f000 b8d3 	b.w	8003c1c <_close_r>
	...

08003a78 <__swbuf_r>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	460e      	mov	r6, r1
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	4605      	mov	r5, r0
 8003a80:	b118      	cbz	r0, 8003a8a <__swbuf_r+0x12>
 8003a82:	6983      	ldr	r3, [r0, #24]
 8003a84:	b90b      	cbnz	r3, 8003a8a <__swbuf_r+0x12>
 8003a86:	f7ff fb81 	bl	800318c <__sinit>
 8003a8a:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <__swbuf_r+0x98>)
 8003a8c:	429c      	cmp	r4, r3
 8003a8e:	d12b      	bne.n	8003ae8 <__swbuf_r+0x70>
 8003a90:	686c      	ldr	r4, [r5, #4]
 8003a92:	69a3      	ldr	r3, [r4, #24]
 8003a94:	60a3      	str	r3, [r4, #8]
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	071a      	lsls	r2, r3, #28
 8003a9a:	d52f      	bpl.n	8003afc <__swbuf_r+0x84>
 8003a9c:	6923      	ldr	r3, [r4, #16]
 8003a9e:	b36b      	cbz	r3, 8003afc <__swbuf_r+0x84>
 8003aa0:	6923      	ldr	r3, [r4, #16]
 8003aa2:	6820      	ldr	r0, [r4, #0]
 8003aa4:	b2f6      	uxtb	r6, r6
 8003aa6:	1ac0      	subs	r0, r0, r3
 8003aa8:	6963      	ldr	r3, [r4, #20]
 8003aaa:	4637      	mov	r7, r6
 8003aac:	4283      	cmp	r3, r0
 8003aae:	dc04      	bgt.n	8003aba <__swbuf_r+0x42>
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f000 f944 	bl	8003d40 <_fflush_r>
 8003ab8:	bb30      	cbnz	r0, 8003b08 <__swbuf_r+0x90>
 8003aba:	68a3      	ldr	r3, [r4, #8]
 8003abc:	3001      	adds	r0, #1
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	60a3      	str	r3, [r4, #8]
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	6022      	str	r2, [r4, #0]
 8003ac8:	701e      	strb	r6, [r3, #0]
 8003aca:	6963      	ldr	r3, [r4, #20]
 8003acc:	4283      	cmp	r3, r0
 8003ace:	d004      	beq.n	8003ada <__swbuf_r+0x62>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	07db      	lsls	r3, r3, #31
 8003ad4:	d506      	bpl.n	8003ae4 <__swbuf_r+0x6c>
 8003ad6:	2e0a      	cmp	r6, #10
 8003ad8:	d104      	bne.n	8003ae4 <__swbuf_r+0x6c>
 8003ada:	4621      	mov	r1, r4
 8003adc:	4628      	mov	r0, r5
 8003ade:	f000 f92f 	bl	8003d40 <_fflush_r>
 8003ae2:	b988      	cbnz	r0, 8003b08 <__swbuf_r+0x90>
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <__swbuf_r+0x9c>)
 8003aea:	429c      	cmp	r4, r3
 8003aec:	d101      	bne.n	8003af2 <__swbuf_r+0x7a>
 8003aee:	68ac      	ldr	r4, [r5, #8]
 8003af0:	e7cf      	b.n	8003a92 <__swbuf_r+0x1a>
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <__swbuf_r+0xa0>)
 8003af4:	429c      	cmp	r4, r3
 8003af6:	bf08      	it	eq
 8003af8:	68ec      	ldreq	r4, [r5, #12]
 8003afa:	e7ca      	b.n	8003a92 <__swbuf_r+0x1a>
 8003afc:	4621      	mov	r1, r4
 8003afe:	4628      	mov	r0, r5
 8003b00:	f000 f81e 	bl	8003b40 <__swsetup_r>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d0cb      	beq.n	8003aa0 <__swbuf_r+0x28>
 8003b08:	f04f 37ff 	mov.w	r7, #4294967295
 8003b0c:	e7ea      	b.n	8003ae4 <__swbuf_r+0x6c>
 8003b0e:	bf00      	nop
 8003b10:	08004064 	.word	0x08004064
 8003b14:	08004084 	.word	0x08004084
 8003b18:	08004044 	.word	0x08004044

08003b1c <_write_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	2200      	movs	r2, #0
 8003b26:	4d05      	ldr	r5, [pc, #20]	; (8003b3c <_write_r+0x20>)
 8003b28:	602a      	str	r2, [r5, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fc fffd 	bl	8000b2a <_write>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_write_r+0x1e>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_write_r+0x1e>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20000190 	.word	0x20000190

08003b40 <__swsetup_r>:
 8003b40:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <__swsetup_r+0xcc>)
 8003b42:	b570      	push	{r4, r5, r6, lr}
 8003b44:	681d      	ldr	r5, [r3, #0]
 8003b46:	4606      	mov	r6, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	b125      	cbz	r5, 8003b56 <__swsetup_r+0x16>
 8003b4c:	69ab      	ldr	r3, [r5, #24]
 8003b4e:	b913      	cbnz	r3, 8003b56 <__swsetup_r+0x16>
 8003b50:	4628      	mov	r0, r5
 8003b52:	f7ff fb1b 	bl	800318c <__sinit>
 8003b56:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <__swsetup_r+0xd0>)
 8003b58:	429c      	cmp	r4, r3
 8003b5a:	d10f      	bne.n	8003b7c <__swsetup_r+0x3c>
 8003b5c:	686c      	ldr	r4, [r5, #4]
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b64:	0719      	lsls	r1, r3, #28
 8003b66:	d42c      	bmi.n	8003bc2 <__swsetup_r+0x82>
 8003b68:	06dd      	lsls	r5, r3, #27
 8003b6a:	d411      	bmi.n	8003b90 <__swsetup_r+0x50>
 8003b6c:	2309      	movs	r3, #9
 8003b6e:	6033      	str	r3, [r6, #0]
 8003b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	e03e      	b.n	8003bfa <__swsetup_r+0xba>
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <__swsetup_r+0xd4>)
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	d101      	bne.n	8003b86 <__swsetup_r+0x46>
 8003b82:	68ac      	ldr	r4, [r5, #8]
 8003b84:	e7eb      	b.n	8003b5e <__swsetup_r+0x1e>
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <__swsetup_r+0xd8>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	bf08      	it	eq
 8003b8c:	68ec      	ldreq	r4, [r5, #12]
 8003b8e:	e7e6      	b.n	8003b5e <__swsetup_r+0x1e>
 8003b90:	0758      	lsls	r0, r3, #29
 8003b92:	d512      	bpl.n	8003bba <__swsetup_r+0x7a>
 8003b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b96:	b141      	cbz	r1, 8003baa <__swsetup_r+0x6a>
 8003b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b9c:	4299      	cmp	r1, r3
 8003b9e:	d002      	beq.n	8003ba6 <__swsetup_r+0x66>
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f99b 	bl	8003edc <_free_r>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6063      	str	r3, [r4, #4]
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	81a3      	strh	r3, [r4, #12]
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	b94b      	cbnz	r3, 8003bda <__swsetup_r+0x9a>
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd0:	d003      	beq.n	8003bda <__swsetup_r+0x9a>
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f000 f927 	bl	8003e28 <__smakebuf_r>
 8003bda:	89a0      	ldrh	r0, [r4, #12]
 8003bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003be0:	f010 0301 	ands.w	r3, r0, #1
 8003be4:	d00a      	beq.n	8003bfc <__swsetup_r+0xbc>
 8003be6:	2300      	movs	r3, #0
 8003be8:	60a3      	str	r3, [r4, #8]
 8003bea:	6963      	ldr	r3, [r4, #20]
 8003bec:	425b      	negs	r3, r3
 8003bee:	61a3      	str	r3, [r4, #24]
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	b943      	cbnz	r3, 8003c06 <__swsetup_r+0xc6>
 8003bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bf8:	d1ba      	bne.n	8003b70 <__swsetup_r+0x30>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	0781      	lsls	r1, r0, #30
 8003bfe:	bf58      	it	pl
 8003c00:	6963      	ldrpl	r3, [r4, #20]
 8003c02:	60a3      	str	r3, [r4, #8]
 8003c04:	e7f4      	b.n	8003bf0 <__swsetup_r+0xb0>
 8003c06:	2000      	movs	r0, #0
 8003c08:	e7f7      	b.n	8003bfa <__swsetup_r+0xba>
 8003c0a:	bf00      	nop
 8003c0c:	20000010 	.word	0x20000010
 8003c10:	08004064 	.word	0x08004064
 8003c14:	08004084 	.word	0x08004084
 8003c18:	08004044 	.word	0x08004044

08003c1c <_close_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4d05      	ldr	r5, [pc, #20]	; (8003c38 <_close_r+0x1c>)
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc ff9b 	bl	8000b62 <_close>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_close_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_close_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	20000190 	.word	0x20000190

08003c3c <__sflush_r>:
 8003c3c:	898a      	ldrh	r2, [r1, #12]
 8003c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c40:	4605      	mov	r5, r0
 8003c42:	0710      	lsls	r0, r2, #28
 8003c44:	460c      	mov	r4, r1
 8003c46:	d457      	bmi.n	8003cf8 <__sflush_r+0xbc>
 8003c48:	684b      	ldr	r3, [r1, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	dc04      	bgt.n	8003c58 <__sflush_r+0x1c>
 8003c4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	dc01      	bgt.n	8003c58 <__sflush_r+0x1c>
 8003c54:	2000      	movs	r0, #0
 8003c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c5a:	2e00      	cmp	r6, #0
 8003c5c:	d0fa      	beq.n	8003c54 <__sflush_r+0x18>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c64:	682f      	ldr	r7, [r5, #0]
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	d032      	beq.n	8003cd0 <__sflush_r+0x94>
 8003c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c6c:	89a3      	ldrh	r3, [r4, #12]
 8003c6e:	075a      	lsls	r2, r3, #29
 8003c70:	d505      	bpl.n	8003c7e <__sflush_r+0x42>
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	1ac0      	subs	r0, r0, r3
 8003c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c78:	b10b      	cbz	r3, 8003c7e <__sflush_r+0x42>
 8003c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c7c:	1ac0      	subs	r0, r0, r3
 8003c7e:	2300      	movs	r3, #0
 8003c80:	4602      	mov	r2, r0
 8003c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c84:	4628      	mov	r0, r5
 8003c86:	6a21      	ldr	r1, [r4, #32]
 8003c88:	47b0      	blx	r6
 8003c8a:	1c43      	adds	r3, r0, #1
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	d106      	bne.n	8003c9e <__sflush_r+0x62>
 8003c90:	6829      	ldr	r1, [r5, #0]
 8003c92:	291d      	cmp	r1, #29
 8003c94:	d82c      	bhi.n	8003cf0 <__sflush_r+0xb4>
 8003c96:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <__sflush_r+0x100>)
 8003c98:	40ca      	lsrs	r2, r1
 8003c9a:	07d6      	lsls	r6, r2, #31
 8003c9c:	d528      	bpl.n	8003cf0 <__sflush_r+0xb4>
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	6062      	str	r2, [r4, #4]
 8003ca2:	6922      	ldr	r2, [r4, #16]
 8003ca4:	04d9      	lsls	r1, r3, #19
 8003ca6:	6022      	str	r2, [r4, #0]
 8003ca8:	d504      	bpl.n	8003cb4 <__sflush_r+0x78>
 8003caa:	1c42      	adds	r2, r0, #1
 8003cac:	d101      	bne.n	8003cb2 <__sflush_r+0x76>
 8003cae:	682b      	ldr	r3, [r5, #0]
 8003cb0:	b903      	cbnz	r3, 8003cb4 <__sflush_r+0x78>
 8003cb2:	6560      	str	r0, [r4, #84]	; 0x54
 8003cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cb6:	602f      	str	r7, [r5, #0]
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d0cb      	beq.n	8003c54 <__sflush_r+0x18>
 8003cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cc0:	4299      	cmp	r1, r3
 8003cc2:	d002      	beq.n	8003cca <__sflush_r+0x8e>
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f000 f909 	bl	8003edc <_free_r>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8003cce:	e7c2      	b.n	8003c56 <__sflush_r+0x1a>
 8003cd0:	6a21      	ldr	r1, [r4, #32]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	47b0      	blx	r6
 8003cd8:	1c41      	adds	r1, r0, #1
 8003cda:	d1c7      	bne.n	8003c6c <__sflush_r+0x30>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0c4      	beq.n	8003c6c <__sflush_r+0x30>
 8003ce2:	2b1d      	cmp	r3, #29
 8003ce4:	d001      	beq.n	8003cea <__sflush_r+0xae>
 8003ce6:	2b16      	cmp	r3, #22
 8003ce8:	d101      	bne.n	8003cee <__sflush_r+0xb2>
 8003cea:	602f      	str	r7, [r5, #0]
 8003cec:	e7b2      	b.n	8003c54 <__sflush_r+0x18>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	e7ae      	b.n	8003c56 <__sflush_r+0x1a>
 8003cf8:	690f      	ldr	r7, [r1, #16]
 8003cfa:	2f00      	cmp	r7, #0
 8003cfc:	d0aa      	beq.n	8003c54 <__sflush_r+0x18>
 8003cfe:	0793      	lsls	r3, r2, #30
 8003d00:	bf18      	it	ne
 8003d02:	2300      	movne	r3, #0
 8003d04:	680e      	ldr	r6, [r1, #0]
 8003d06:	bf08      	it	eq
 8003d08:	694b      	ldreq	r3, [r1, #20]
 8003d0a:	1bf6      	subs	r6, r6, r7
 8003d0c:	600f      	str	r7, [r1, #0]
 8003d0e:	608b      	str	r3, [r1, #8]
 8003d10:	2e00      	cmp	r6, #0
 8003d12:	dd9f      	ble.n	8003c54 <__sflush_r+0x18>
 8003d14:	4633      	mov	r3, r6
 8003d16:	463a      	mov	r2, r7
 8003d18:	4628      	mov	r0, r5
 8003d1a:	6a21      	ldr	r1, [r4, #32]
 8003d1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003d20:	47e0      	blx	ip
 8003d22:	2800      	cmp	r0, #0
 8003d24:	dc06      	bgt.n	8003d34 <__sflush_r+0xf8>
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d30:	81a3      	strh	r3, [r4, #12]
 8003d32:	e790      	b.n	8003c56 <__sflush_r+0x1a>
 8003d34:	4407      	add	r7, r0
 8003d36:	1a36      	subs	r6, r6, r0
 8003d38:	e7ea      	b.n	8003d10 <__sflush_r+0xd4>
 8003d3a:	bf00      	nop
 8003d3c:	20400001 	.word	0x20400001

08003d40 <_fflush_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	690b      	ldr	r3, [r1, #16]
 8003d44:	4605      	mov	r5, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	b913      	cbnz	r3, 8003d50 <_fflush_r+0x10>
 8003d4a:	2500      	movs	r5, #0
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	bd38      	pop	{r3, r4, r5, pc}
 8003d50:	b118      	cbz	r0, 8003d5a <_fflush_r+0x1a>
 8003d52:	6983      	ldr	r3, [r0, #24]
 8003d54:	b90b      	cbnz	r3, 8003d5a <_fflush_r+0x1a>
 8003d56:	f7ff fa19 	bl	800318c <__sinit>
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <_fflush_r+0x6c>)
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	d11b      	bne.n	8003d98 <_fflush_r+0x58>
 8003d60:	686c      	ldr	r4, [r5, #4]
 8003d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0ef      	beq.n	8003d4a <_fflush_r+0xa>
 8003d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d6c:	07d0      	lsls	r0, r2, #31
 8003d6e:	d404      	bmi.n	8003d7a <_fflush_r+0x3a>
 8003d70:	0599      	lsls	r1, r3, #22
 8003d72:	d402      	bmi.n	8003d7a <_fflush_r+0x3a>
 8003d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d76:	f7ff faa7 	bl	80032c8 <__retarget_lock_acquire_recursive>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	f7ff ff5d 	bl	8003c3c <__sflush_r>
 8003d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d84:	4605      	mov	r5, r0
 8003d86:	07da      	lsls	r2, r3, #31
 8003d88:	d4e0      	bmi.n	8003d4c <_fflush_r+0xc>
 8003d8a:	89a3      	ldrh	r3, [r4, #12]
 8003d8c:	059b      	lsls	r3, r3, #22
 8003d8e:	d4dd      	bmi.n	8003d4c <_fflush_r+0xc>
 8003d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d92:	f7ff fa9a 	bl	80032ca <__retarget_lock_release_recursive>
 8003d96:	e7d9      	b.n	8003d4c <_fflush_r+0xc>
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <_fflush_r+0x70>)
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	d101      	bne.n	8003da2 <_fflush_r+0x62>
 8003d9e:	68ac      	ldr	r4, [r5, #8]
 8003da0:	e7df      	b.n	8003d62 <_fflush_r+0x22>
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <_fflush_r+0x74>)
 8003da4:	429c      	cmp	r4, r3
 8003da6:	bf08      	it	eq
 8003da8:	68ec      	ldreq	r4, [r5, #12]
 8003daa:	e7da      	b.n	8003d62 <_fflush_r+0x22>
 8003dac:	08004064 	.word	0x08004064
 8003db0:	08004084 	.word	0x08004084
 8003db4:	08004044 	.word	0x08004044

08003db8 <_lseek_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4d05      	ldr	r5, [pc, #20]	; (8003dd8 <_lseek_r+0x20>)
 8003dc4:	602a      	str	r2, [r5, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f7fc feef 	bl	8000baa <_lseek>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_lseek_r+0x1e>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_lseek_r+0x1e>
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000190 	.word	0x20000190

08003ddc <__swhatbuf_r>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	460e      	mov	r6, r1
 8003de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de4:	4614      	mov	r4, r2
 8003de6:	2900      	cmp	r1, #0
 8003de8:	461d      	mov	r5, r3
 8003dea:	b096      	sub	sp, #88	; 0x58
 8003dec:	da08      	bge.n	8003e00 <__swhatbuf_r+0x24>
 8003dee:	2200      	movs	r2, #0
 8003df0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003df4:	602a      	str	r2, [r5, #0]
 8003df6:	061a      	lsls	r2, r3, #24
 8003df8:	d410      	bmi.n	8003e1c <__swhatbuf_r+0x40>
 8003dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfe:	e00e      	b.n	8003e1e <__swhatbuf_r+0x42>
 8003e00:	466a      	mov	r2, sp
 8003e02:	f000 f8c5 	bl	8003f90 <_fstat_r>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	dbf1      	blt.n	8003dee <__swhatbuf_r+0x12>
 8003e0a:	9a01      	ldr	r2, [sp, #4]
 8003e0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e14:	425a      	negs	r2, r3
 8003e16:	415a      	adcs	r2, r3
 8003e18:	602a      	str	r2, [r5, #0]
 8003e1a:	e7ee      	b.n	8003dfa <__swhatbuf_r+0x1e>
 8003e1c:	2340      	movs	r3, #64	; 0x40
 8003e1e:	2000      	movs	r0, #0
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	b016      	add	sp, #88	; 0x58
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e28 <__smakebuf_r>:
 8003e28:	898b      	ldrh	r3, [r1, #12]
 8003e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e2c:	079d      	lsls	r5, r3, #30
 8003e2e:	4606      	mov	r6, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	d507      	bpl.n	8003e44 <__smakebuf_r+0x1c>
 8003e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	6123      	str	r3, [r4, #16]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6163      	str	r3, [r4, #20]
 8003e40:	b002      	add	sp, #8
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	466a      	mov	r2, sp
 8003e46:	ab01      	add	r3, sp, #4
 8003e48:	f7ff ffc8 	bl	8003ddc <__swhatbuf_r>
 8003e4c:	9900      	ldr	r1, [sp, #0]
 8003e4e:	4605      	mov	r5, r0
 8003e50:	4630      	mov	r0, r6
 8003e52:	f7ff fa5b 	bl	800330c <_malloc_r>
 8003e56:	b948      	cbnz	r0, 8003e6c <__smakebuf_r+0x44>
 8003e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e5c:	059a      	lsls	r2, r3, #22
 8003e5e:	d4ef      	bmi.n	8003e40 <__smakebuf_r+0x18>
 8003e60:	f023 0303 	bic.w	r3, r3, #3
 8003e64:	f043 0302 	orr.w	r3, r3, #2
 8003e68:	81a3      	strh	r3, [r4, #12]
 8003e6a:	e7e3      	b.n	8003e34 <__smakebuf_r+0xc>
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <__smakebuf_r+0x7c>)
 8003e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	6020      	str	r0, [r4, #0]
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	81a3      	strh	r3, [r4, #12]
 8003e7a:	9b00      	ldr	r3, [sp, #0]
 8003e7c:	6120      	str	r0, [r4, #16]
 8003e7e:	6163      	str	r3, [r4, #20]
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	b15b      	cbz	r3, 8003e9c <__smakebuf_r+0x74>
 8003e84:	4630      	mov	r0, r6
 8003e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8a:	f000 f893 	bl	8003fb4 <_isatty_r>
 8003e8e:	b128      	cbz	r0, 8003e9c <__smakebuf_r+0x74>
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	81a3      	strh	r3, [r4, #12]
 8003e9c:	89a0      	ldrh	r0, [r4, #12]
 8003e9e:	4305      	orrs	r5, r0
 8003ea0:	81a5      	strh	r5, [r4, #12]
 8003ea2:	e7cd      	b.n	8003e40 <__smakebuf_r+0x18>
 8003ea4:	08003125 	.word	0x08003125

08003ea8 <memchr>:
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	b2c9      	uxtb	r1, r1
 8003eae:	4402      	add	r2, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	d101      	bne.n	8003eba <memchr+0x12>
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	e003      	b.n	8003ec2 <memchr+0x1a>
 8003eba:	7804      	ldrb	r4, [r0, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	428c      	cmp	r4, r1
 8003ec0:	d1f6      	bne.n	8003eb0 <memchr+0x8>
 8003ec2:	bd10      	pop	{r4, pc}

08003ec4 <__malloc_lock>:
 8003ec4:	4801      	ldr	r0, [pc, #4]	; (8003ecc <__malloc_lock+0x8>)
 8003ec6:	f7ff b9ff 	b.w	80032c8 <__retarget_lock_acquire_recursive>
 8003eca:	bf00      	nop
 8003ecc:	20000184 	.word	0x20000184

08003ed0 <__malloc_unlock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__malloc_unlock+0x8>)
 8003ed2:	f7ff b9fa 	b.w	80032ca <__retarget_lock_release_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	20000184 	.word	0x20000184

08003edc <_free_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4605      	mov	r5, r0
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	d040      	beq.n	8003f66 <_free_r+0x8a>
 8003ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee8:	1f0c      	subs	r4, r1, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfb8      	it	lt
 8003eee:	18e4      	addlt	r4, r4, r3
 8003ef0:	f7ff ffe8 	bl	8003ec4 <__malloc_lock>
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <_free_r+0x8c>)
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	b933      	cbnz	r3, 8003f08 <_free_r+0x2c>
 8003efa:	6063      	str	r3, [r4, #4]
 8003efc:	6014      	str	r4, [r2, #0]
 8003efe:	4628      	mov	r0, r5
 8003f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f04:	f7ff bfe4 	b.w	8003ed0 <__malloc_unlock>
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d908      	bls.n	8003f1e <_free_r+0x42>
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	1821      	adds	r1, r4, r0
 8003f10:	428b      	cmp	r3, r1
 8003f12:	bf01      	itttt	eq
 8003f14:	6819      	ldreq	r1, [r3, #0]
 8003f16:	685b      	ldreq	r3, [r3, #4]
 8003f18:	1809      	addeq	r1, r1, r0
 8003f1a:	6021      	streq	r1, [r4, #0]
 8003f1c:	e7ed      	b.n	8003efa <_free_r+0x1e>
 8003f1e:	461a      	mov	r2, r3
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b10b      	cbz	r3, 8003f28 <_free_r+0x4c>
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d9fa      	bls.n	8003f1e <_free_r+0x42>
 8003f28:	6811      	ldr	r1, [r2, #0]
 8003f2a:	1850      	adds	r0, r2, r1
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d10b      	bne.n	8003f48 <_free_r+0x6c>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	4401      	add	r1, r0
 8003f34:	1850      	adds	r0, r2, r1
 8003f36:	4283      	cmp	r3, r0
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	d1e0      	bne.n	8003efe <_free_r+0x22>
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4401      	add	r1, r0
 8003f42:	6011      	str	r1, [r2, #0]
 8003f44:	6053      	str	r3, [r2, #4]
 8003f46:	e7da      	b.n	8003efe <_free_r+0x22>
 8003f48:	d902      	bls.n	8003f50 <_free_r+0x74>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	e7d6      	b.n	8003efe <_free_r+0x22>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	1821      	adds	r1, r4, r0
 8003f54:	428b      	cmp	r3, r1
 8003f56:	bf01      	itttt	eq
 8003f58:	6819      	ldreq	r1, [r3, #0]
 8003f5a:	685b      	ldreq	r3, [r3, #4]
 8003f5c:	1809      	addeq	r1, r1, r0
 8003f5e:	6021      	streq	r1, [r4, #0]
 8003f60:	6063      	str	r3, [r4, #4]
 8003f62:	6054      	str	r4, [r2, #4]
 8003f64:	e7cb      	b.n	8003efe <_free_r+0x22>
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	20000188 	.word	0x20000188

08003f6c <_read_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	2200      	movs	r2, #0
 8003f76:	4d05      	ldr	r5, [pc, #20]	; (8003f8c <_read_r+0x20>)
 8003f78:	602a      	str	r2, [r5, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f7fc fdb8 	bl	8000af0 <_read>
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	d102      	bne.n	8003f8a <_read_r+0x1e>
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	b103      	cbz	r3, 8003f8a <_read_r+0x1e>
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
 8003f8c:	20000190 	.word	0x20000190

08003f90 <_fstat_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	2300      	movs	r3, #0
 8003f94:	4d06      	ldr	r5, [pc, #24]	; (8003fb0 <_fstat_r+0x20>)
 8003f96:	4604      	mov	r4, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	602b      	str	r3, [r5, #0]
 8003f9e:	f7fc fdeb 	bl	8000b78 <_fstat>
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	d102      	bne.n	8003fac <_fstat_r+0x1c>
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	b103      	cbz	r3, 8003fac <_fstat_r+0x1c>
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000190 	.word	0x20000190

08003fb4 <_isatty_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4d05      	ldr	r5, [pc, #20]	; (8003fd0 <_isatty_r+0x1c>)
 8003fba:	4604      	mov	r4, r0
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	f7fc fde9 	bl	8000b96 <_isatty>
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d102      	bne.n	8003fce <_isatty_r+0x1a>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	b103      	cbz	r3, 8003fce <_isatty_r+0x1a>
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
 8003fd0:	20000190 	.word	0x20000190

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
