
Car_Motion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000483c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a48  08004a48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a48  08004a48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a48  08004a48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08004a5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004a5c  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b94a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bd  00000000  00000000  0002b97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  0002ebc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b619  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114ad  00000000  00000000  0004ae31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c3f  00000000  00000000  0005c2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  000f4f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004a08 	.word	0x08004a08

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004a08 	.word	0x08004a08

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_d2f>:
 800059c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005a4:	bf24      	itt	cs
 80005a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ae:	d90d      	bls.n	80005cc <__aeabi_d2f+0x30>
 80005b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005c4:	bf08      	it	eq
 80005c6:	f020 0001 	biceq.w	r0, r0, #1
 80005ca:	4770      	bx	lr
 80005cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005d0:	d121      	bne.n	8000616 <__aeabi_d2f+0x7a>
 80005d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005d6:	bfbc      	itt	lt
 80005d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005dc:	4770      	bxlt	lr
 80005de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005e6:	f1c2 0218 	rsb	r2, r2, #24
 80005ea:	f1c2 0c20 	rsb	ip, r2, #32
 80005ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	bf18      	it	ne
 80005f8:	f040 0001 	orrne.w	r0, r0, #1
 80005fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000600:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000604:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000608:	ea40 000c 	orr.w	r0, r0, ip
 800060c:	fa23 f302 	lsr.w	r3, r3, r2
 8000610:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000614:	e7cc      	b.n	80005b0 <__aeabi_d2f+0x14>
 8000616:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800061a:	d107      	bne.n	800062c <__aeabi_d2f+0x90>
 800061c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000620:	bf1e      	ittt	ne
 8000622:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000626:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800062a:	4770      	bxne	lr
 800062c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <__aeabi_frsub>:
 800063c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000640:	e002      	b.n	8000648 <__addsf3>
 8000642:	bf00      	nop

08000644 <__aeabi_fsub>:
 8000644:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000648 <__addsf3>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	bf1f      	itttt	ne
 800064c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000650:	ea92 0f03 	teqne	r2, r3
 8000654:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000658:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065c:	d06a      	beq.n	8000734 <__addsf3+0xec>
 800065e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000662:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000666:	bfc1      	itttt	gt
 8000668:	18d2      	addgt	r2, r2, r3
 800066a:	4041      	eorgt	r1, r0
 800066c:	4048      	eorgt	r0, r1
 800066e:	4041      	eorgt	r1, r0
 8000670:	bfb8      	it	lt
 8000672:	425b      	neglt	r3, r3
 8000674:	2b19      	cmp	r3, #25
 8000676:	bf88      	it	hi
 8000678:	4770      	bxhi	lr
 800067a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800067e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000686:	bf18      	it	ne
 8000688:	4240      	negne	r0, r0
 800068a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800068e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000692:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000696:	bf18      	it	ne
 8000698:	4249      	negne	r1, r1
 800069a:	ea92 0f03 	teq	r2, r3
 800069e:	d03f      	beq.n	8000720 <__addsf3+0xd8>
 80006a0:	f1a2 0201 	sub.w	r2, r2, #1
 80006a4:	fa41 fc03 	asr.w	ip, r1, r3
 80006a8:	eb10 000c 	adds.w	r0, r0, ip
 80006ac:	f1c3 0320 	rsb	r3, r3, #32
 80006b0:	fa01 f103 	lsl.w	r1, r1, r3
 80006b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b8:	d502      	bpl.n	80006c0 <__addsf3+0x78>
 80006ba:	4249      	negs	r1, r1
 80006bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006c4:	d313      	bcc.n	80006ee <__addsf3+0xa6>
 80006c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ca:	d306      	bcc.n	80006da <__addsf3+0x92>
 80006cc:	0840      	lsrs	r0, r0, #1
 80006ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80006d2:	f102 0201 	add.w	r2, r2, #1
 80006d6:	2afe      	cmp	r2, #254	; 0xfe
 80006d8:	d251      	bcs.n	800077e <__addsf3+0x136>
 80006da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006e2:	bf08      	it	eq
 80006e4:	f020 0001 	biceq.w	r0, r0, #1
 80006e8:	ea40 0003 	orr.w	r0, r0, r3
 80006ec:	4770      	bx	lr
 80006ee:	0049      	lsls	r1, r1, #1
 80006f0:	eb40 0000 	adc.w	r0, r0, r0
 80006f4:	3a01      	subs	r2, #1
 80006f6:	bf28      	it	cs
 80006f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006fc:	d2ed      	bcs.n	80006da <__addsf3+0x92>
 80006fe:	fab0 fc80 	clz	ip, r0
 8000702:	f1ac 0c08 	sub.w	ip, ip, #8
 8000706:	ebb2 020c 	subs.w	r2, r2, ip
 800070a:	fa00 f00c 	lsl.w	r0, r0, ip
 800070e:	bfaa      	itet	ge
 8000710:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000714:	4252      	neglt	r2, r2
 8000716:	4318      	orrge	r0, r3
 8000718:	bfbc      	itt	lt
 800071a:	40d0      	lsrlt	r0, r2
 800071c:	4318      	orrlt	r0, r3
 800071e:	4770      	bx	lr
 8000720:	f092 0f00 	teq	r2, #0
 8000724:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000728:	bf06      	itte	eq
 800072a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800072e:	3201      	addeq	r2, #1
 8000730:	3b01      	subne	r3, #1
 8000732:	e7b5      	b.n	80006a0 <__addsf3+0x58>
 8000734:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000738:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800073c:	bf18      	it	ne
 800073e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000742:	d021      	beq.n	8000788 <__addsf3+0x140>
 8000744:	ea92 0f03 	teq	r2, r3
 8000748:	d004      	beq.n	8000754 <__addsf3+0x10c>
 800074a:	f092 0f00 	teq	r2, #0
 800074e:	bf08      	it	eq
 8000750:	4608      	moveq	r0, r1
 8000752:	4770      	bx	lr
 8000754:	ea90 0f01 	teq	r0, r1
 8000758:	bf1c      	itt	ne
 800075a:	2000      	movne	r0, #0
 800075c:	4770      	bxne	lr
 800075e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000762:	d104      	bne.n	800076e <__addsf3+0x126>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	bf28      	it	cs
 8000768:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800076c:	4770      	bx	lr
 800076e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000772:	bf3c      	itt	cc
 8000774:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000778:	4770      	bxcc	lr
 800077a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800077e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000782:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000786:	4770      	bx	lr
 8000788:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800078c:	bf16      	itet	ne
 800078e:	4608      	movne	r0, r1
 8000790:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000794:	4601      	movne	r1, r0
 8000796:	0242      	lsls	r2, r0, #9
 8000798:	bf06      	itte	eq
 800079a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800079e:	ea90 0f01 	teqeq	r0, r1
 80007a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_ui2f>:
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	e004      	b.n	80007b8 <__aeabi_i2f+0x8>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2f>:
 80007b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007b4:	bf48      	it	mi
 80007b6:	4240      	negmi	r0, r0
 80007b8:	ea5f 0c00 	movs.w	ip, r0
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007c4:	4601      	mov	r1, r0
 80007c6:	f04f 0000 	mov.w	r0, #0
 80007ca:	e01c      	b.n	8000806 <__aeabi_l2f+0x2a>

080007cc <__aeabi_ul2f>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e00a      	b.n	80007f0 <__aeabi_l2f+0x14>
 80007da:	bf00      	nop

080007dc <__aeabi_l2f>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__aeabi_l2f+0x14>
 80007ea:	4240      	negs	r0, r0
 80007ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f0:	ea5f 0c01 	movs.w	ip, r1
 80007f4:	bf02      	ittt	eq
 80007f6:	4684      	moveq	ip, r0
 80007f8:	4601      	moveq	r1, r0
 80007fa:	2000      	moveq	r0, #0
 80007fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000800:	bf08      	it	eq
 8000802:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000806:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800080a:	fabc f28c 	clz	r2, ip
 800080e:	3a08      	subs	r2, #8
 8000810:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000814:	db10      	blt.n	8000838 <__aeabi_l2f+0x5c>
 8000816:	fa01 fc02 	lsl.w	ip, r1, r2
 800081a:	4463      	add	r3, ip
 800081c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000820:	f1c2 0220 	rsb	r2, r2, #32
 8000824:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000828:	fa20 f202 	lsr.w	r2, r0, r2
 800082c:	eb43 0002 	adc.w	r0, r3, r2
 8000830:	bf08      	it	eq
 8000832:	f020 0001 	biceq.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	f102 0220 	add.w	r2, r2, #32
 800083c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000840:	f1c2 0220 	rsb	r2, r2, #32
 8000844:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000848:	fa21 f202 	lsr.w	r2, r1, r2
 800084c:	eb43 0002 	adc.w	r0, r3, r2
 8000850:	bf08      	it	eq
 8000852:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000856:	4770      	bx	lr

08000858 <__aeabi_fmul>:
 8000858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d06f      	beq.n	8000950 <__aeabi_fmul+0xf8>
 8000870:	441a      	add	r2, r3
 8000872:	ea80 0c01 	eor.w	ip, r0, r1
 8000876:	0240      	lsls	r0, r0, #9
 8000878:	bf18      	it	ne
 800087a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800087e:	d01e      	beq.n	80008be <__aeabi_fmul+0x66>
 8000880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000884:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000888:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800088c:	fba0 3101 	umull	r3, r1, r0, r1
 8000890:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000894:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000898:	bf3e      	ittt	cc
 800089a:	0049      	lslcc	r1, r1, #1
 800089c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008a0:	005b      	lslcc	r3, r3, #1
 80008a2:	ea40 0001 	orr.w	r0, r0, r1
 80008a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008aa:	2afd      	cmp	r2, #253	; 0xfd
 80008ac:	d81d      	bhi.n	80008ea <__aeabi_fmul+0x92>
 80008ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008b6:	bf08      	it	eq
 80008b8:	f020 0001 	biceq.w	r0, r0, #1
 80008bc:	4770      	bx	lr
 80008be:	f090 0f00 	teq	r0, #0
 80008c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008c6:	bf08      	it	eq
 80008c8:	0249      	lsleq	r1, r1, #9
 80008ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008d2:	3a7f      	subs	r2, #127	; 0x7f
 80008d4:	bfc2      	ittt	gt
 80008d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008de:	4770      	bxgt	lr
 80008e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	3a01      	subs	r2, #1
 80008ea:	dc5d      	bgt.n	80009a8 <__aeabi_fmul+0x150>
 80008ec:	f112 0f19 	cmn.w	r2, #25
 80008f0:	bfdc      	itt	le
 80008f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008f6:	4770      	bxle	lr
 80008f8:	f1c2 0200 	rsb	r2, r2, #0
 80008fc:	0041      	lsls	r1, r0, #1
 80008fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000902:	f1c2 0220 	rsb	r2, r2, #32
 8000906:	fa00 fc02 	lsl.w	ip, r0, r2
 800090a:	ea5f 0031 	movs.w	r0, r1, rrx
 800090e:	f140 0000 	adc.w	r0, r0, #0
 8000912:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000916:	bf08      	it	eq
 8000918:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800091c:	4770      	bx	lr
 800091e:	f092 0f00 	teq	r2, #0
 8000922:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000926:	bf02      	ittt	eq
 8000928:	0040      	lsleq	r0, r0, #1
 800092a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800092e:	3a01      	subeq	r2, #1
 8000930:	d0f9      	beq.n	8000926 <__aeabi_fmul+0xce>
 8000932:	ea40 000c 	orr.w	r0, r0, ip
 8000936:	f093 0f00 	teq	r3, #0
 800093a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800093e:	bf02      	ittt	eq
 8000940:	0049      	lsleq	r1, r1, #1
 8000942:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000946:	3b01      	subeq	r3, #1
 8000948:	d0f9      	beq.n	800093e <__aeabi_fmul+0xe6>
 800094a:	ea41 010c 	orr.w	r1, r1, ip
 800094e:	e78f      	b.n	8000870 <__aeabi_fmul+0x18>
 8000950:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000954:	ea92 0f0c 	teq	r2, ip
 8000958:	bf18      	it	ne
 800095a:	ea93 0f0c 	teqne	r3, ip
 800095e:	d00a      	beq.n	8000976 <__aeabi_fmul+0x11e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1d8      	bne.n	800091e <__aeabi_fmul+0xc6>
 800096c:	ea80 0001 	eor.w	r0, r0, r1
 8000970:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000974:	4770      	bx	lr
 8000976:	f090 0f00 	teq	r0, #0
 800097a:	bf17      	itett	ne
 800097c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000980:	4608      	moveq	r0, r1
 8000982:	f091 0f00 	teqne	r1, #0
 8000986:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800098a:	d014      	beq.n	80009b6 <__aeabi_fmul+0x15e>
 800098c:	ea92 0f0c 	teq	r2, ip
 8000990:	d101      	bne.n	8000996 <__aeabi_fmul+0x13e>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d10f      	bne.n	80009b6 <__aeabi_fmul+0x15e>
 8000996:	ea93 0f0c 	teq	r3, ip
 800099a:	d103      	bne.n	80009a4 <__aeabi_fmul+0x14c>
 800099c:	024b      	lsls	r3, r1, #9
 800099e:	bf18      	it	ne
 80009a0:	4608      	movne	r0, r1
 80009a2:	d108      	bne.n	80009b6 <__aeabi_fmul+0x15e>
 80009a4:	ea80 0001 	eor.w	r0, r0, r1
 80009a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b4:	4770      	bx	lr
 80009b6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009be:	4770      	bx	lr

080009c0 <__aeabi_fdiv>:
 80009c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009c8:	bf1e      	ittt	ne
 80009ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ce:	ea92 0f0c 	teqne	r2, ip
 80009d2:	ea93 0f0c 	teqne	r3, ip
 80009d6:	d069      	beq.n	8000aac <__aeabi_fdiv+0xec>
 80009d8:	eba2 0203 	sub.w	r2, r2, r3
 80009dc:	ea80 0c01 	eor.w	ip, r0, r1
 80009e0:	0249      	lsls	r1, r1, #9
 80009e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009e6:	d037      	beq.n	8000a58 <__aeabi_fdiv+0x98>
 80009e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf38      	it	cc
 80009fc:	005b      	lslcc	r3, r3, #1
 80009fe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a06:	428b      	cmp	r3, r1
 8000a08:	bf24      	itt	cs
 8000a0a:	1a5b      	subcs	r3, r3, r1
 8000a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a14:	bf24      	itt	cs
 8000a16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a22:	bf24      	itt	cs
 8000a24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a30:	bf24      	itt	cs
 8000a32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	bf18      	it	ne
 8000a3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a42:	d1e0      	bne.n	8000a06 <__aeabi_fdiv+0x46>
 8000a44:	2afd      	cmp	r2, #253	; 0xfd
 8000a46:	f63f af50 	bhi.w	80008ea <__aeabi_fmul+0x92>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a60:	327f      	adds	r2, #127	; 0x7f
 8000a62:	bfc2      	ittt	gt
 8000a64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6c:	4770      	bxgt	lr
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	3a01      	subs	r2, #1
 8000a78:	e737      	b.n	80008ea <__aeabi_fmul+0x92>
 8000a7a:	f092 0f00 	teq	r2, #0
 8000a7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a82:	bf02      	ittt	eq
 8000a84:	0040      	lsleq	r0, r0, #1
 8000a86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a8a:	3a01      	subeq	r2, #1
 8000a8c:	d0f9      	beq.n	8000a82 <__aeabi_fdiv+0xc2>
 8000a8e:	ea40 000c 	orr.w	r0, r0, ip
 8000a92:	f093 0f00 	teq	r3, #0
 8000a96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9a:	bf02      	ittt	eq
 8000a9c:	0049      	lsleq	r1, r1, #1
 8000a9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000aa2:	3b01      	subeq	r3, #1
 8000aa4:	d0f9      	beq.n	8000a9a <__aeabi_fdiv+0xda>
 8000aa6:	ea41 010c 	orr.w	r1, r1, ip
 8000aaa:	e795      	b.n	80009d8 <__aeabi_fdiv+0x18>
 8000aac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ab0:	ea92 0f0c 	teq	r2, ip
 8000ab4:	d108      	bne.n	8000ac8 <__aeabi_fdiv+0x108>
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	f47f af7d 	bne.w	80009b6 <__aeabi_fmul+0x15e>
 8000abc:	ea93 0f0c 	teq	r3, ip
 8000ac0:	f47f af70 	bne.w	80009a4 <__aeabi_fmul+0x14c>
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	e776      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000ac8:	ea93 0f0c 	teq	r3, ip
 8000acc:	d104      	bne.n	8000ad8 <__aeabi_fdiv+0x118>
 8000ace:	024b      	lsls	r3, r1, #9
 8000ad0:	f43f af4c 	beq.w	800096c <__aeabi_fmul+0x114>
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	e76e      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000ad8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000adc:	bf18      	it	ne
 8000ade:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ae2:	d1ca      	bne.n	8000a7a <__aeabi_fdiv+0xba>
 8000ae4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ae8:	f47f af5c 	bne.w	80009a4 <__aeabi_fmul+0x14c>
 8000aec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000af0:	f47f af3c 	bne.w	800096c <__aeabi_fmul+0x114>
 8000af4:	e75f      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000af6:	bf00      	nop

08000af8 <__gesf2>:
 8000af8:	f04f 3cff 	mov.w	ip, #4294967295
 8000afc:	e006      	b.n	8000b0c <__cmpsf2+0x4>
 8000afe:	bf00      	nop

08000b00 <__lesf2>:
 8000b00:	f04f 0c01 	mov.w	ip, #1
 8000b04:	e002      	b.n	8000b0c <__cmpsf2+0x4>
 8000b06:	bf00      	nop

08000b08 <__cmpsf2>:
 8000b08:	f04f 0c01 	mov.w	ip, #1
 8000b0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d011      	beq.n	8000b48 <__cmpsf2+0x40>
 8000b24:	b001      	add	sp, #4
 8000b26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b2a:	bf18      	it	ne
 8000b2c:	ea90 0f01 	teqne	r0, r1
 8000b30:	bf58      	it	pl
 8000b32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b36:	bf88      	it	hi
 8000b38:	17c8      	asrhi	r0, r1, #31
 8000b3a:	bf38      	it	cc
 8000b3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b40:	bf18      	it	ne
 8000b42:	f040 0001 	orrne.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	d102      	bne.n	8000b54 <__cmpsf2+0x4c>
 8000b4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b52:	d105      	bne.n	8000b60 <__cmpsf2+0x58>
 8000b54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b58:	d1e4      	bne.n	8000b24 <__cmpsf2+0x1c>
 8000b5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5e:	d0e1      	beq.n	8000b24 <__cmpsf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cfrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	4661      	mov	r1, ip
 8000b6e:	e7ff      	b.n	8000b70 <__aeabi_cfcmpeq>

08000b70 <__aeabi_cfcmpeq>:
 8000b70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b72:	f7ff ffc9 	bl	8000b08 <__cmpsf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b80 <__aeabi_fcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cfcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_fcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cfcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cfcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_fcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffd2 	bl	8000b68 <__aeabi_cfrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc8 	bl	8000b68 <__aeabi_cfrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_f2iz>:
 8000be4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bec:	d30f      	bcc.n	8000c0e <__aeabi_f2iz+0x2a>
 8000bee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bf6:	d90d      	bls.n	8000c14 <__aeabi_f2iz+0x30>
 8000bf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c04:	fa23 f002 	lsr.w	r0, r3, r2
 8000c08:	bf18      	it	ne
 8000c0a:	4240      	negne	r0, r0
 8000c0c:	4770      	bx	lr
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	4770      	bx	lr
 8000c14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c18:	d101      	bne.n	8000c1e <__aeabi_f2iz+0x3a>
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_f2iz+0x46>
 8000c1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <Bsp_Led_Show_State_Handle>:
#include "bsp.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b14      	cmp	r3, #20
 8000c46:	d907      	bls.n	8000c58 <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <Bsp_Led_Show_State_Handle+0x30>)
 8000c54:	f002 f91d 	bl	8002e92 <HAL_GPIO_TogglePin>
	}
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000002c 	.word	0x2000002c
 8000c60:	40011000 	.word	0x40011000

08000c64 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 8000c68:	2032      	movs	r0, #50	; 0x32
 8000c6a:	f000 f869 	bl	8000d40 <Beep_On_Time>
	Motor_Init();
 8000c6e:	f000 fcb1 	bl	80015d4 <Motor_Init>
	Encoder_Init();
 8000c72:	f000 f961 	bl	8000f38 <Encoder_Init>
	PID_Param_Init();
 8000c76:	f000 fdb5 	bl	80017e4 <PID_Param_Init>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <Bsp_Loop>:

int car_state = 0;
// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	Motion_Handle();
 8000c84:	f000 fc54 	bl	8001530 <Motion_Handle>
	
	if (Key1_State(1))
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 f981 	bl	8000f90 <Key1_State>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d016      	beq.n	8000cc2 <Bsp_Loop+0x42>
	{
		
		Beep_On_Time(50);
 8000c94:	2032      	movs	r0, #50	; 0x32
 8000c96:	f000 f853 	bl	8000d40 <Beep_On_Time>
		if (car_state == 0)
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <Bsp_Loop+0x54>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d109      	bne.n	8000cb6 <Bsp_Loop+0x36>
		{
			Motion_Ctrl(500, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000caa:	f000 fb83 	bl	80013b4 <Motion_Ctrl>
			car_state = 1;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <Bsp_Loop+0x54>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e005      	b.n	8000cc2 <Bsp_Loop+0x42>

		}
		else
		{
			Motion_Stop(STOP_BRAKE);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 f9f6 	bl	80010a8 <Motion_Stop>
			car_state = 0;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <Bsp_Loop+0x54>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
		}
	}
	Bsp_Led_Show_State_Handle();
 8000cc2:	f7ff ffb5 	bl	8000c30 <Bsp_Led_Show_State_Handle>
	Beep_Timeout_Close_Handle();
 8000cc6:	f000 f87b 	bl	8000dc0 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f001 fe16 	bl	80028fc <HAL_Delay>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000028 	.word	0x20000028

08000cd8 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <Beep_Set_Time+0x1c>)
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	8013      	strh	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000002e 	.word	0x2000002e

08000cf8 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <Beep_Get_Time+0x10>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	2000002e 	.word	0x2000002e

08000d0c <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <Beep_Set_State+0x1c>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	7013      	strb	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000030 	.word	0x20000030

08000d2c <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	return beep_state;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <Beep_Get_State+0x10>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000030 	.word	0x20000030

08000d40 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10b      	bne.n	8000d68 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ffdb 	bl	8000d0c <Beep_Set_State>
		Beep_Set_Time(0);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ffbe 	bl	8000cd8 <Beep_Set_Time>
		BEEP_ON();
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4815      	ldr	r0, [pc, #84]	; (8000db8 <Beep_On_Time+0x78>)
 8000d62:	f002 f87e 	bl	8002e62 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8000d66:	e022      	b.n	8000dae <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10b      	bne.n	8000d86 <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ffcc 	bl	8000d0c <Beep_Set_State>
		Beep_Set_Time(0);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ffaf 	bl	8000cd8 <Beep_Set_Time>
		BEEP_OFF();
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <Beep_On_Time+0x78>)
 8000d80:	f002 f86f 	bl	8002e62 <HAL_GPIO_WritePin>
}
 8000d84:	e013      	b.n	8000dae <Beep_On_Time+0x6e>
		if (time >= 10)
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d910      	bls.n	8000dae <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f7ff ffbd 	bl	8000d0c <Beep_Set_State>
			Beep_Set_Time(time / 10);
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <Beep_On_Time+0x7c>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff9a 	bl	8000cd8 <Beep_Set_Time>
			BEEP_ON();
 8000da4:	2201      	movs	r2, #1
 8000da6:	2120      	movs	r1, #32
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <Beep_On_Time+0x78>)
 8000daa:	f002 f85a 	bl	8002e62 <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	cccccccd 	.word	0xcccccccd

08000dc0 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 8000dc4:	f7ff ffb2 	bl	8000d2c <Beep_Get_State>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d113      	bne.n	8000df6 <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8000dce:	f7ff ff93 	bl	8000cf8 <Beep_Get_Time>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <Beep_Timeout_Close_Handle+0x3c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <Beep_Timeout_Close_Handle+0x3c>)
 8000de2:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 8000de4:	e007      	b.n	8000df6 <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 8000de6:	2200      	movs	r2, #0
 8000de8:	2120      	movs	r1, #32
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <Beep_Timeout_Close_Handle+0x40>)
 8000dec:	f002 f839 	bl	8002e62 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff ff8b 	bl	8000d0c <Beep_Set_State>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000002e 	.word	0x2000002e
 8000e00:	40011000 	.word	0x40011000

08000e04 <Encoder_Read_CNT>:
 * @Note: 
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1, MOTOR_ID_M2, MOTOR_ID_M3, MOTOR_ID_M4
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	81fb      	strh	r3, [r7, #14]
	switch(Motor_id)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d829      	bhi.n	8000e6c <Encoder_Read_CNT+0x68>
 8000e18:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <Encoder_Read_CNT+0x1c>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e43 	.word	0x08000e43
 8000e28:	08000e51 	.word	0x08000e51
 8000e2c:	08000e5f 	.word	0x08000e5f
	{
	case MOTOR_ID_M1:  Encoder_TIM = (short)TIM2 -> CNT; TIM2 -> CNT = 0; break;
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	81fb      	strh	r3, [r7, #14]
 8000e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e40:	e015      	b.n	8000e6e <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M2:  Encoder_TIM = (short)TIM4 -> CNT; TIM4 -> CNT = 0; break;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <Encoder_Read_CNT+0x78>)
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	81fb      	strh	r3, [r7, #14]
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <Encoder_Read_CNT+0x78>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e4e:	e00e      	b.n	8000e6e <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M3:  Encoder_TIM = (short)TIM5 -> CNT; TIM5 -> CNT = 0; break;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <Encoder_Read_CNT+0x7c>)
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	81fb      	strh	r3, [r7, #14]
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <Encoder_Read_CNT+0x7c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e5c:	e007      	b.n	8000e6e <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M4:  Encoder_TIM = (short)TIM3 -> CNT; TIM3 -> CNT = 0; break;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <Encoder_Read_CNT+0x80>)
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	81fb      	strh	r3, [r7, #14]
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <Encoder_Read_CNT+0x80>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
 8000e6a:	e000      	b.n	8000e6e <Encoder_Read_CNT+0x6a>
	default:  break;
 8000e6c:	bf00      	nop
	}
	return Encoder_TIM;
 8000e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40000800 	.word	0x40000800
 8000e80:	40000c00 	.word	0x40000c00
 8000e84:	40000400 	.word	0x40000400

08000e88 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int* Encoder_all)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <Encoder_Get_ALL+0x38>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <Encoder_Get_ALL+0x3c>)
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <Encoder_Get_ALL+0x40>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	330c      	adds	r3, #12
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <Encoder_Get_ALL+0x44>)
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000034 	.word	0x20000034
 8000ec4:	20000038 	.word	0x20000038
 8000ec8:	2000003c 	.word	0x2000003c
 8000ecc:	20000040 	.word	0x20000040

08000ed0 <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	// g_Encoder_M1_Now += Encoder_Read_CNT(MOTOR_ID_M1);
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff ff95 	bl	8000e04 <Encoder_Read_CNT>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <Encoder_Update_Count+0x58>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <Encoder_Update_Count+0x58>)
 8000ee6:	6013      	str	r3, [r2, #0]

	g_Encoder_M2_Now += Encoder_Read_CNT(MOTOR_ID_M2);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff ff8b 	bl	8000e04 <Encoder_Read_CNT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <Encoder_Update_Count+0x5c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <Encoder_Update_Count+0x5c>)
 8000efa:	6013      	str	r3, [r2, #0]
	// g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);

	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff ff81 	bl	8000e04 <Encoder_Read_CNT>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <Encoder_Update_Count+0x60>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <Encoder_Update_Count+0x60>)
 8000f0e:	6013      	str	r3, [r2, #0]
	// g_Encoder_M3_Now -= Encoder_Read_CNT(MOTOR_ID_M3);

	// g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
	g_Encoder_M4_Now -= Encoder_Read_CNT(MOTOR_ID_M4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f7ff ff77 	bl	8000e04 <Encoder_Read_CNT>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <Encoder_Update_Count+0x64>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <Encoder_Update_Count+0x64>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000034 	.word	0x20000034
 8000f2c:	20000038 	.word	0x20000038
 8000f30:	2000003c 	.word	0x2000003c
 8000f34:	20000040 	.word	0x20000040

08000f38 <Encoder_Init>:

// Initializing timer  初始化定时器
void Encoder_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <Encoder_Init+0x28>)
 8000f40:	f002 fdde 	bl	8003b00 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000f44:	2104      	movs	r1, #4
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <Encoder_Init+0x2c>)
 8000f48:	f002 fdda 	bl	8003b00 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <Encoder_Init+0x30>)
 8000f50:	f002 fdd6 	bl	8003b00 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000f54:	2104      	movs	r1, #4
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <Encoder_Init+0x34>)
 8000f58:	f002 fdd2 	bl	8003b00 <HAL_TIM_Encoder_Start>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000184 	.word	0x20000184
 8000f64:	200001cc 	.word	0x200001cc
 8000f68:	20000214 	.word	0x20000214
 8000f6c:	2000025c 	.word	0x2000025c

08000f70 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000f74:	2104      	movs	r1, #4
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <Key1_is_Press+0x1c>)
 8000f78:	f001 ff5c 	bl	8002e34 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40011400 	.word	0x40011400

08000f90 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8000f9a:	f7ff ffe9 	bl	8000f70 <Key1_is_Press>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d10e      	bne.n	8000fc2 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <Key1_State+0x50>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	3301      	adds	r3, #1
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	da09      	bge.n	8000fc8 <Key1_State+0x38>
		{
			key1_state++;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <Key1_State+0x50>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <Key1_State+0x50>)
 8000fbe:	801a      	strh	r2, [r3, #0]
 8000fc0:	e002      	b.n	8000fc8 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <Key1_State+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <Key1_State+0x50>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d101      	bne.n	8000fd4 <Key1_State+0x44>
	{
		return KEY_PRESS;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000044 	.word	0x20000044

08000fe4 <Motion_Set_Pwm>:


// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
// Control car movement, Motor_X=[-3600, 3600], beyond the range is invalid. 
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	803b      	strh	r3, [r7, #0]
    int16_t max_value = MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE;
 8001002:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001006:	81fb      	strh	r3, [r7, #14]
    if (Motor_1 >= -max_value && Motor_1 <= max_value)
 8001008:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800100c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001010:	425b      	negs	r3, r3
 8001012:	429a      	cmp	r2, r3
 8001014:	db0b      	blt.n	800102e <Motion_Set_Pwm+0x4a>
 8001016:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800101a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800101e:	429a      	cmp	r2, r3
 8001020:	dc05      	bgt.n	800102e <Motion_Set_Pwm+0x4a>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 8001022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001026:	4619      	mov	r1, r3
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fb47 	bl	80016bc <Motor_Set_Pwm>
    }
    if (Motor_2 >= -max_value && Motor_2 <= max_value)
 800102e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001032:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001036:	425b      	negs	r3, r3
 8001038:	429a      	cmp	r2, r3
 800103a:	db0b      	blt.n	8001054 <Motion_Set_Pwm+0x70>
 800103c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001044:	429a      	cmp	r2, r3
 8001046:	dc05      	bgt.n	8001054 <Motion_Set_Pwm+0x70>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 8001048:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800104c:	4619      	mov	r1, r3
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fb34 	bl	80016bc <Motor_Set_Pwm>
    }
    if (Motor_3 >= -max_value && Motor_3 <= max_value)
 8001054:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800105c:	425b      	negs	r3, r3
 800105e:	429a      	cmp	r2, r3
 8001060:	db0b      	blt.n	800107a <Motion_Set_Pwm+0x96>
 8001062:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106a:	429a      	cmp	r2, r3
 800106c:	dc05      	bgt.n	800107a <Motion_Set_Pwm+0x96>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 800106e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001072:	4619      	mov	r1, r3
 8001074:	2002      	movs	r0, #2
 8001076:	f000 fb21 	bl	80016bc <Motor_Set_Pwm>
    }
    if (Motor_4 >= -max_value && Motor_4 <= max_value)
 800107a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800107e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001082:	425b      	negs	r3, r3
 8001084:	429a      	cmp	r2, r3
 8001086:	db0b      	blt.n	80010a0 <Motion_Set_Pwm+0xbc>
 8001088:	f9b7 2000 	ldrsh.w	r2, [r7]
 800108c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001090:	429a      	cmp	r2, r3
 8001092:	dc05      	bgt.n	80010a0 <Motion_Set_Pwm+0xbc>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8001094:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001098:	4619      	mov	r1, r3
 800109a:	2003      	movs	r0, #3
 800109c:	f000 fb0e 	bl	80016bc <Motor_Set_Pwm>
    }
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}

080010a8 <Motion_Stop>:

// The car stopped  小车停止
void Motion_Stop(uint8_t brake)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 80010b2:	2300      	movs	r3, #0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f811 	bl	80010e0 <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 80010be:	2004      	movs	r0, #4
 80010c0:	f000 fcb8 	bl	8001a34 <PID_Clear_Motor>
    Motor_Stop(brake);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 faac 	bl	8001624 <Motor_Stop>
    g_start_ctrl = 0;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <Motion_Stop+0x34>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000078 	.word	0x20000078

080010e0 <Motion_Set_Speed>:


// 设置速度 speed_mX=[-1000, 1000], 单位为：mm/s
// Set speed speed mX=[-1000, 1000], unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	4603      	mov	r3, r0
 80010f4:	80bb      	strh	r3, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]
 80010fa:	4613      	mov	r3, r2
 80010fc:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <Motion_Set_Speed+0x80>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <Motion_Set_Speed+0x84>)
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <Motion_Set_Speed+0x84>)
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	8453      	strh	r3, [r2, #34]	; 0x22
    motor_data.speed_set[2] = speed_m3;
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <Motion_Set_Speed+0x84>)
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	8493      	strh	r3, [r2, #36]	; 0x24
    motor_data.speed_set[3] = speed_m4;
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <Motion_Set_Speed+0x84>)
 8001118:	883b      	ldrh	r3, [r7, #0]
 800111a:	84d3      	strh	r3, [r2, #38]	; 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e016      	b.n	8001150 <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i]*1.0);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <Motion_Set_Speed+0x84>)
 8001126:	3310      	adds	r3, #16
 8001128:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f9cb 	bl	80004c8 <__aeabi_i2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fa2f 	bl	800059c <__aeabi_d2f>
 800113e:	4602      	mov	r2, r0
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fd01 	bl	8001b4c <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3301      	adds	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d9e5      	bls.n	8001122 <Motion_Set_Speed+0x42>
    }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	20000078 	.word	0x20000078
 8001164:	20000084 	.word	0x20000084

08001168 <Motion_Get_Speed>:


// 从编码器读取当前各轮子速度，单位mm/s
// Read the current speed of each wheel from the encoder in mm/s
void Motion_Get_Speed(car_data_t* car)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    Motion_Get_Encoder();
 8001170:	f000 f8ee 	bl	8001350 <Motion_Get_Encoder>

    float circle_mm = Motion_Get_Circle_MM();
 8001174:	f000 f8e2 	bl	800133c <Motion_Get_Circle_MM>
 8001178:	61f8      	str	r0, [r7, #28]

    float speed_m1 = (g_Encoder_All_Offset[0]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <Motion_Get_Speed+0x1ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2264      	movs	r2, #100	; 0x64
 8001180:	fb02 f303 	mul.w	r3, r2, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb13 	bl	80007b0 <__aeabi_i2f>
 800118a:	4603      	mov	r3, r0
 800118c:	69f9      	ldr	r1, [r7, #28]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fb62 	bl	8000858 <__aeabi_fmul>
 8001194:	4603      	mov	r3, r0
 8001196:	4960      	ldr	r1, [pc, #384]	; (8001318 <Motion_Get_Speed+0x1b0>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fc11 	bl	80009c0 <__aeabi_fdiv>
 800119e:	4603      	mov	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
    float speed_m2 = (g_Encoder_All_Offset[1]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 80011a2:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <Motion_Get_Speed+0x1ac>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff faff 	bl	80007b0 <__aeabi_i2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	69f9      	ldr	r1, [r7, #28]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb4e 	bl	8000858 <__aeabi_fmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	4956      	ldr	r1, [pc, #344]	; (8001318 <Motion_Get_Speed+0x1b0>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fbfd 	bl	80009c0 <__aeabi_fdiv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	617b      	str	r3, [r7, #20]
    float speed_m3 = (g_Encoder_All_Offset[2]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 80011ca:	4b52      	ldr	r3, [pc, #328]	; (8001314 <Motion_Get_Speed+0x1ac>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2264      	movs	r2, #100	; 0x64
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff faeb 	bl	80007b0 <__aeabi_i2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	69f9      	ldr	r1, [r7, #28]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb3a 	bl	8000858 <__aeabi_fmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	494c      	ldr	r1, [pc, #304]	; (8001318 <Motion_Get_Speed+0x1b0>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fbe9 	bl	80009c0 <__aeabi_fdiv>
 80011ee:	4603      	mov	r3, r0
 80011f0:	613b      	str	r3, [r7, #16]
    float speed_m4 = (g_Encoder_All_Offset[3]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 80011f2:	4b48      	ldr	r3, [pc, #288]	; (8001314 <Motion_Get_Speed+0x1ac>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fad7 	bl	80007b0 <__aeabi_i2f>
 8001202:	4603      	mov	r3, r0
 8001204:	69f9      	ldr	r1, [r7, #28]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fb26 	bl	8000858 <__aeabi_fmul>
 800120c:	4603      	mov	r3, r0
 800120e:	4942      	ldr	r1, [pc, #264]	; (8001318 <Motion_Get_Speed+0x1b0>)
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fbd5 	bl	80009c0 <__aeabi_fdiv>
 8001216:	4603      	mov	r3, r0
 8001218:	60fb      	str	r3, [r7, #12]
    float robot_APB = Motion_Get_APB();
 800121a:	f000 f885 	bl	8001328 <Motion_Get_APB>
 800121e:	60b8      	str	r0, [r7, #8]

    car->Vx = (speed_m1 + speed_m2 + speed_m3 + speed_m4) / 4;
 8001220:	6979      	ldr	r1, [r7, #20]
 8001222:	69b8      	ldr	r0, [r7, #24]
 8001224:	f7ff fa10 	bl	8000648 <__addsf3>
 8001228:	4603      	mov	r3, r0
 800122a:	6939      	ldr	r1, [r7, #16]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fa0b 	bl	8000648 <__addsf3>
 8001232:	4603      	mov	r3, r0
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fa06 	bl	8000648 <__addsf3>
 800123c:	4603      	mov	r3, r0
 800123e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fbbc 	bl	80009c0 <__aeabi_fdiv>
 8001248:	4603      	mov	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fcca 	bl	8000be4 <__aeabi_f2iz>
 8001250:	4603      	mov	r3, r0
 8001252:	b21a      	sxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_m1 - speed_m2 - speed_m3 + speed_m4) / 4;
 8001258:	6979      	ldr	r1, [r7, #20]
 800125a:	69b8      	ldr	r0, [r7, #24]
 800125c:	f7ff f9f2 	bl	8000644 <__aeabi_fsub>
 8001260:	4603      	mov	r3, r0
 8001262:	6939      	ldr	r1, [r7, #16]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f9ed 	bl	8000644 <__aeabi_fsub>
 800126a:	4603      	mov	r3, r0
 800126c:	68f9      	ldr	r1, [r7, #12]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f9ea 	bl	8000648 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800127a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fb9e 	bl	80009c0 <__aeabi_fdiv>
 8001284:	4603      	mov	r3, r0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fcac 	bl	8000be4 <__aeabi_f2iz>
 800128c:	4603      	mov	r3, r0
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_m1 + speed_m2 - speed_m3 - speed_m4) / 4.0f / robot_APB * 1000;
 8001294:	6979      	ldr	r1, [r7, #20]
 8001296:	69b8      	ldr	r0, [r7, #24]
 8001298:	f7ff f9d6 	bl	8000648 <__addsf3>
 800129c:	4603      	mov	r3, r0
 800129e:	6939      	ldr	r1, [r7, #16]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f9cf 	bl	8000644 <__aeabi_fsub>
 80012a6:	4603      	mov	r3, r0
 80012a8:	68f9      	ldr	r1, [r7, #12]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f9ca 	bl	8000644 <__aeabi_fsub>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012b6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fb80 	bl	80009c0 <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fb7b 	bl	80009c0 <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4913      	ldr	r1, [pc, #76]	; (800131c <Motion_Get_Speed+0x1b4>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fac2 	bl	8000858 <__aeabi_fmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fc84 	bl	8000be4 <__aeabi_f2iz>
 80012dc:	4603      	mov	r3, r0
 80012de:	b21a      	sxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <Motion_Get_Speed+0x1b8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00e      	beq.n	800130a <Motion_Get_Speed+0x1a2>
    {
        motor_data.speed_mm_s[0] = speed_m1;
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <Motion_Get_Speed+0x1bc>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
        motor_data.speed_mm_s[1] = speed_m2;
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <Motion_Get_Speed+0x1bc>)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	6053      	str	r3, [r2, #4]
        motor_data.speed_mm_s[2] = speed_m3;
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <Motion_Get_Speed+0x1bc>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6093      	str	r3, [r2, #8]
        motor_data.speed_mm_s[3] = speed_m4;
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <Motion_Get_Speed+0x1bc>)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	60d3      	str	r3, [r2, #12]
        PID_Calc_Motor(&motor_data);
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <Motion_Get_Speed+0x1bc>)
 8001306:	f000 fb6d 	bl	80019e4 <PID_Calc_Motor>
    }
}
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000068 	.word	0x20000068
 8001318:	44a50000 	.word	0x44a50000
 800131c:	447a0000 	.word	0x447a0000
 8001320:	20000078 	.word	0x20000078
 8001324:	20000084 	.word	0x20000084

08001328 <Motion_Get_APB>:

// Returns half of the sum of the current cart wheel axles  返回当前小车轮子轴间距和的一半
float Motion_Get_APB(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    return MECANUM_MINI_APB;
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <Motion_Get_APB+0x10>)
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	43248e14 	.word	0x43248e14

0800133c <Motion_Get_Circle_MM>:

// Returns the number of millimeters at which the current wheel has been turned  返回当前小车轮子转一圈多少毫米
float Motion_Get_Circle_MM(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    return MECANUM_MINI_CIRCLE_MM;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <Motion_Get_Circle_MM+0x10>)
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	434c33f8 	.word	0x434c33f8

08001350 <Motion_Get_Encoder>:


// Obtain encoder data and calculate the number of deviation pulses  获取编码器数据，并计算偏差脉冲数
void Motion_Get_Encoder(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
    Encoder_Update_Count();
 8001356:	f7ff fdbb 	bl	8000ed0 <Encoder_Update_Count>
    Encoder_Get_ALL(g_Encoder_All_Now);
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <Motion_Get_Encoder+0x58>)
 800135c:	f7ff fd94 	bl	8000e88 <Encoder_Get_ALL>

    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	e017      	b.n	8001396 <Motion_Get_Encoder+0x46>
    {
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <Motion_Get_Encoder+0x58>)
 800136a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <Motion_Get_Encoder+0x5c>)
 8001372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	1a8a      	subs	r2, r1, r2
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <Motion_Get_Encoder+0x60>)
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4908      	ldr	r1, [pc, #32]	; (80013a8 <Motion_Get_Encoder+0x58>)
 8001386:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <Motion_Get_Encoder+0x5c>)
 800138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3301      	adds	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d9e4      	bls.n	8001366 <Motion_Get_Encoder+0x16>
    }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000048 	.word	0x20000048
 80013ac:	20000058 	.word	0x20000058
 80013b0:	20000068 	.word	0x20000068

080013b4 <Motion_Ctrl>:

// Control car movement  控制小车运动
void Motion_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
 80013be:	460b      	mov	r3, r1
 80013c0:	80bb      	strh	r3, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 80013c6:	f7ff ffaf 	bl	8001328 <Motion_Get_APB>
 80013ca:	6178      	str	r0, [r7, #20]
    float speed_lr = -V_y;
 80013cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d0:	425b      	negs	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f9ec 	bl	80007b0 <__aeabi_i2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	613b      	str	r3, [r7, #16]
    float speed_fb = V_x;
 80013dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f9e5 	bl	80007b0 <__aeabi_i2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	60fb      	str	r3, [r7, #12]
    float speed_spin = -V_z / 1000.0f * robot_APB;
 80013ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ee:	425b      	negs	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f9dd 	bl	80007b0 <__aeabi_i2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	494b      	ldr	r1, [pc, #300]	; (8001528 <Motion_Ctrl+0x174>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fae0 	bl	80009c0 <__aeabi_fdiv>
 8001400:	4603      	mov	r3, r0
 8001402:	4619      	mov	r1, r3
 8001404:	6978      	ldr	r0, [r7, #20]
 8001406:	f7ff fa27 	bl	8000858 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	60bb      	str	r3, [r7, #8]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10b      	bne.n	800142e <Motion_Ctrl+0x7a>
 8001416:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d107      	bne.n	800142e <Motion_Ctrl+0x7a>
 800141e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <Motion_Ctrl+0x7a>
    {
        Motion_Stop(STOP_BRAKE);
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fe3e 	bl	80010a8 <Motion_Stop>
        return;
 800142c:	e079      	b.n	8001522 <Motion_Ctrl+0x16e>
    }

    int speed_L1_setup = speed_fb + speed_lr + speed_spin;
 800142e:	6939      	ldr	r1, [r7, #16]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff f909 	bl	8000648 <__addsf3>
 8001436:	4603      	mov	r3, r0
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f904 	bl	8000648 <__addsf3>
 8001440:	4603      	mov	r3, r0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbce 	bl	8000be4 <__aeabi_f2iz>
 8001448:	4603      	mov	r3, r0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    int speed_L2_setup = speed_fb - speed_lr + speed_spin;
 800144c:	6939      	ldr	r1, [r7, #16]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7ff f8f8 	bl	8000644 <__aeabi_fsub>
 8001454:	4603      	mov	r3, r0
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f8f5 	bl	8000648 <__addsf3>
 800145e:	4603      	mov	r3, r0
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fbbf 	bl	8000be4 <__aeabi_f2iz>
 8001466:	4603      	mov	r3, r0
 8001468:	623b      	str	r3, [r7, #32]
    int speed_R1_setup = speed_fb - speed_lr - speed_spin;
 800146a:	6939      	ldr	r1, [r7, #16]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff f8e9 	bl	8000644 <__aeabi_fsub>
 8001472:	4603      	mov	r3, r0
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f8e4 	bl	8000644 <__aeabi_fsub>
 800147c:	4603      	mov	r3, r0
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fbb0 	bl	8000be4 <__aeabi_f2iz>
 8001484:	4603      	mov	r3, r0
 8001486:	61fb      	str	r3, [r7, #28]
    int speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff f8dc 	bl	8000648 <__addsf3>
 8001490:	4603      	mov	r3, r0
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f8d5 	bl	8000644 <__aeabi_fsub>
 800149a:	4603      	mov	r3, r0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fba1 	bl	8000be4 <__aeabi_f2iz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]

    if (speed_L1_setup > 1000) speed_L1_setup = 1000;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ac:	dd02      	ble.n	80014b4 <Motion_Ctrl+0x100>
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    if (speed_L1_setup < -1000) speed_L1_setup = -1000;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80014ba:	da01      	bge.n	80014c0 <Motion_Ctrl+0x10c>
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <Motion_Ctrl+0x178>)
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    if (speed_L2_setup > 1000) speed_L2_setup = 1000;
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c6:	dd02      	ble.n	80014ce <Motion_Ctrl+0x11a>
 80014c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014cc:	623b      	str	r3, [r7, #32]
    if (speed_L2_setup < -1000) speed_L2_setup = -1000;
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80014d4:	da01      	bge.n	80014da <Motion_Ctrl+0x126>
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <Motion_Ctrl+0x178>)
 80014d8:	623b      	str	r3, [r7, #32]
    if (speed_R1_setup > 1000) speed_R1_setup = 1000;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e0:	dd02      	ble.n	80014e8 <Motion_Ctrl+0x134>
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	61fb      	str	r3, [r7, #28]
    if (speed_R1_setup < -1000) speed_R1_setup = -1000;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80014ee:	da01      	bge.n	80014f4 <Motion_Ctrl+0x140>
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <Motion_Ctrl+0x178>)
 80014f2:	61fb      	str	r3, [r7, #28]
    if (speed_R2_setup > 1000) speed_R2_setup = 1000;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fa:	dd02      	ble.n	8001502 <Motion_Ctrl+0x14e>
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	61bb      	str	r3, [r7, #24]
    if (speed_R2_setup < -1000) speed_R2_setup = -1000;
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001508:	da01      	bge.n	800150e <Motion_Ctrl+0x15a>
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <Motion_Ctrl+0x178>)
 800150c:	61bb      	str	r3, [r7, #24]
    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	b218      	sxth	r0, r3
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	b219      	sxth	r1, r3
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	b21a      	sxth	r2, r3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	b21b      	sxth	r3, r3
 800151e:	f7ff fddf 	bl	80010e0 <Motion_Set_Speed>
}
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	447a0000 	.word	0x447a0000
 800152c:	fffffc18 	.word	0xfffffc18

08001530 <Motion_Handle>:


// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
// Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8001534:	4814      	ldr	r0, [pc, #80]	; (8001588 <Motion_Handle+0x58>)
 8001536:	f7ff fe17 	bl	8001168 <Motion_Get_Speed>

    if (g_start_ctrl)
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <Motion_Handle+0x5c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d020      	beq.n	8001584 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <Motion_Handle+0x60>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fb4c 	bl	8000be4 <__aeabi_f2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	b21c      	sxth	r4, r3
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <Motion_Handle+0x60>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb45 	bl	8000be4 <__aeabi_f2iz>
 800155a:	4603      	mov	r3, r0
 800155c:	b21d      	sxth	r5, r3
        		motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <Motion_Handle+0x60>)
 8001560:	699b      	ldr	r3, [r3, #24]
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb3e 	bl	8000be4 <__aeabi_f2iz>
 8001568:	4603      	mov	r3, r0
 800156a:	b21e      	sxth	r6, r3
        		motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <Motion_Handle+0x60>)
 800156e:	69db      	ldr	r3, [r3, #28]
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fb37 	bl	8000be4 <__aeabi_f2iz>
 8001576:	4603      	mov	r3, r0
 8001578:	b21b      	sxth	r3, r3
 800157a:	4632      	mov	r2, r6
 800157c:	4629      	mov	r1, r5
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff fd30 	bl	8000fe4 <Motion_Set_Pwm>
    }
}
 8001584:	bf00      	nop
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001588:	2000007c 	.word	0x2000007c
 800158c:	20000078 	.word	0x20000078
 8001590:	20000084 	.word	0x20000084

08001594 <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dd05      	ble.n	80015b2 <Motor_Ignore_Dead_Zone+0x1e>
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	e00a      	b.n	80015c8 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da05      	bge.n	80015c6 <Motor_Ignore_Dead_Zone+0x32>
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	e000      	b.n	80015c8 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015d8:	2100      	movs	r1, #0
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <Motor_Init+0x48>)
 80015dc:	f002 f934 	bl	8003848 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80015e0:	2104      	movs	r1, #4
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <Motor_Init+0x48>)
 80015e4:	f002 ff7c 	bl	80044e0 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80015e8:	2108      	movs	r1, #8
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <Motor_Init+0x48>)
 80015ec:	f002 ff78 	bl	80044e0 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80015f0:	210c      	movs	r1, #12
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <Motor_Init+0x48>)
 80015f4:	f002 f928 	bl	8003848 <HAL_TIM_PWM_Start>
    
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80015f8:	2100      	movs	r1, #0
 80015fa:	4809      	ldr	r0, [pc, #36]	; (8001620 <Motor_Init+0x4c>)
 80015fc:	f002 f924 	bl	8003848 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001600:	2104      	movs	r1, #4
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <Motor_Init+0x4c>)
 8001604:	f002 f920 	bl	8003848 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001608:	2108      	movs	r1, #8
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <Motor_Init+0x4c>)
 800160c:	f002 f91c 	bl	8003848 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001610:	210c      	movs	r1, #12
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <Motor_Init+0x4c>)
 8001614:	f002 f918 	bl	8003848 <HAL_TIM_PWM_Start>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000013c 	.word	0x2000013c
 8001620:	200002a4 	.word	0x200002a4

08001624 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <Motor_Stop+0x14>
 8001634:	2301      	movs	r3, #1
 8001636:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800163e:	fb03 f202 	mul.w	r2, r3, r2
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <Motor_Stop+0x90>)
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800164c:	fb03 f202 	mul.w	r2, r3, r2
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <Motor_Stop+0x90>)
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800165a:	fb03 f202 	mul.w	r2, r3, r2
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <Motor_Stop+0x90>)
 8001660:	63da      	str	r2, [r3, #60]	; 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001668:	fb03 f202 	mul.w	r2, r3, r2
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <Motor_Stop+0x90>)
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001676:	fb03 f202 	mul.w	r2, r3, r2
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <Motor_Stop+0x94>)
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001684:	fb03 f202 	mul.w	r2, r3, r2
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <Motor_Stop+0x94>)
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001692:	fb03 f202 	mul.w	r2, r3, r2
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <Motor_Stop+0x94>)
 8001698:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80016a0:	fb03 f202 	mul.w	r2, r3, r2
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <Motor_Stop+0x94>)
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40013400 	.word	0x40013400
 80016b8:	40012c00 	.word	0x40012c00

080016bc <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	460a      	mov	r2, r1
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	4613      	mov	r3, r2
 80016ca:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 80016cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <Motor_Ignore_Dead_Zone>
 80016d6:	4603      	mov	r3, r0
 80016d8:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 80016da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016de:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80016e2:	db02      	blt.n	80016ea <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 80016e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80016e8:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 80016ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ee:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 80016f2:	dc02      	bgt.n	80016fa <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 80016f4:	f24f 13f0 	movw	r3, #61936	; 0xf1f0
 80016f8:	81fb      	strh	r3, [r7, #14]

    switch (id)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d867      	bhi.n	80017d0 <Motor_Set_Pwm+0x114>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <Motor_Set_Pwm+0x4c>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001719 	.word	0x08001719
 800170c:	0800174b 	.word	0x0800174b
 8001710:	0800177d 	.word	0x0800177d
 8001714:	080017a7 	.word	0x080017a7
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8001718:	89fb      	ldrh	r3, [r7, #14]
 800171a:	425b      	negs	r3, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8001720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db07      	blt.n	8001738 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8001728:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <Motor_Set_Pwm+0x120>)
 800172a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800172e:	6353      	str	r3, [r2, #52]	; 0x34
            PWM_M1_B = 0;
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <Motor_Set_Pwm+0x120>)
 8001732:	2200      	movs	r2, #0
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 8001736:	e04c      	b.n	80017d2 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <Motor_Set_Pwm+0x120>)
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	; 0x34
            PWM_M1_B = -pulse;
 800173e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001742:	425a      	negs	r2, r3
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <Motor_Set_Pwm+0x120>)
 8001746:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8001748:	e043      	b.n	80017d2 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	425b      	negs	r3, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8001752:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db07      	blt.n	800176a <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 800175a:	4a20      	ldr	r2, [pc, #128]	; (80017dc <Motor_Set_Pwm+0x120>)
 800175c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001760:	63d3      	str	r3, [r2, #60]	; 0x3c
            PWM_M2_B = 0;
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <Motor_Set_Pwm+0x120>)
 8001764:	2200      	movs	r2, #0
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 8001768:	e033      	b.n	80017d2 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <Motor_Set_Pwm+0x120>)
 800176c:	2200      	movs	r2, #0
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
            PWM_M2_B = -pulse;
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	425a      	negs	r2, r3
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <Motor_Set_Pwm+0x120>)
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800177a:	e02a      	b.n	80017d2 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 800177c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db07      	blt.n	8001794 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8001784:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <Motor_Set_Pwm+0x124>)
 8001786:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
            PWM_M3_B = 0;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <Motor_Set_Pwm+0x124>)
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8001792:	e01e      	b.n	80017d2 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <Motor_Set_Pwm+0x124>)
 8001796:	2200      	movs	r2, #0
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
            PWM_M3_B = -pulse;
 800179a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800179e:	425a      	negs	r2, r3
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <Motor_Set_Pwm+0x124>)
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80017a4:	e015      	b.n	80017d2 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 80017a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db07      	blt.n	80017be <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 80017ae:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <Motor_Set_Pwm+0x124>)
 80017b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38
            PWM_M4_B = 0;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <Motor_Set_Pwm+0x124>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 80017bc:	e009      	b.n	80017d2 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <Motor_Set_Pwm+0x124>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
            PWM_M4_B = -pulse;
 80017c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c8:	425a      	negs	r2, r3
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <Motor_Set_Pwm+0x124>)
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 80017ce:	e000      	b.n	80017d2 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 80017d0:	bf00      	nop
    }
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40013400 	.word	0x40013400
 80017e0:	40012c00 	.word	0x40012c00

080017e4 <PID_Param_Init>:
motor_pid_t pid_motor[4];


// Example Initialize PID parameters 初始化PID参数
void PID_Param_Init(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_MOTOR; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	e062      	b.n	80018b6 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <PID_Param_Init+0xe4>)
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8001804:	4930      	ldr	r1, [pc, #192]	; (80018c8 <PID_Param_Init+0xe4>)
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3304      	adds	r3, #4
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 800181a:	492b      	ldr	r1, [pc, #172]	; (80018c8 <PID_Param_Init+0xe4>)
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3314      	adds	r3, #20
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 8001830:	4925      	ldr	r1, [pc, #148]	; (80018c8 <PID_Param_Init+0xe4>)
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3318      	adds	r3, #24
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 8001846:	4920      	ldr	r1, [pc, #128]	; (80018c8 <PID_Param_Init+0xe4>)
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	331c      	adds	r3, #28
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 800185c:	491a      	ldr	r1, [pc, #104]	; (80018c8 <PID_Param_Init+0xe4>)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3320      	adds	r3, #32
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8001872:	4915      	ldr	r1, [pc, #84]	; (80018c8 <PID_Param_Init+0xe4>)
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3308      	adds	r3, #8
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <PID_Param_Init+0xe8>)
 8001884:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8001886:	4910      	ldr	r1, [pc, #64]	; (80018c8 <PID_Param_Init+0xe4>)
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	330c      	adds	r3, #12
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <PID_Param_Init+0xec>)
 8001898:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 800189a:	490b      	ldr	r1, [pc, #44]	; (80018c8 <PID_Param_Init+0xe4>)
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3310      	adds	r3, #16
 80018aa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80018ae:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3301      	adds	r3, #1
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	dd99      	ble.n	80017f0 <PID_Param_Init+0xc>
    }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	200000ac 	.word	0x200000ac
 80018cc:	3f4ccccd 	.word	0x3f4ccccd
 80018d0:	3d75c28f 	.word	0x3d75c28f

080018d4 <PID_Incre_Calc>:

// Incremental PID calculation formula  增量式PID计算公式
float PID_Incre_Calc(motor_pid_t *pid, float actual_val)
{
 80018d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
    pid->err = pid->target_val - actual_val;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe feac 	bl	8000644 <__aeabi_fsub>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	615a      	str	r2, [r3, #20]
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685c      	ldr	r4, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689d      	ldr	r5, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f7fe fe9c 	bl	8000644 <__aeabi_fsub>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	4628      	mov	r0, r5
 8001912:	f7fe ffa1 	bl	8000858 <__aeabi_fmul>
 8001916:	4603      	mov	r3, r0
 8001918:	461d      	mov	r5, r3
                    + pid->Ki * pid->err
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4619      	mov	r1, r3
 8001924:	4610      	mov	r0, r2
 8001926:	f7fe ff97 	bl	8000858 <__aeabi_fmul>
 800192a:	4603      	mov	r3, r0
 800192c:	4619      	mov	r1, r3
 800192e:	4628      	mov	r0, r5
 8001930:	f7fe fe8a 	bl	8000648 <__addsf3>
 8001934:	4603      	mov	r3, r0
 8001936:	4698      	mov	r8, r3
                    + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691d      	ldr	r5, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695e      	ldr	r6, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4619      	mov	r1, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe7e 	bl	8000648 <__addsf3>
 800194c:	4603      	mov	r3, r0
 800194e:	4619      	mov	r1, r3
 8001950:	4630      	mov	r0, r6
 8001952:	f7fe fe77 	bl	8000644 <__aeabi_fsub>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f7fe fe71 	bl	8000648 <__addsf3>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4628      	mov	r0, r5
 800196c:	f7fe ff74 	bl	8000858 <__aeabi_fmul>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	4640      	mov	r0, r8
 8001976:	f7fe fe67 	bl	8000648 <__addsf3>
 800197a:	4603      	mov	r3, r0
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next)
 800197c:	4619      	mov	r1, r3
 800197e:	4620      	mov	r0, r4
 8001980:	f7fe fe62 	bl	8000648 <__addsf3>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]
    pid->err_last = pid->err_next;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
    pid->err_next = pid->err;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	61da      	str	r2, [r3, #28]
    if (pid->pwm_output > MOTOR_MAX_PULSE)  pid->pwm_output = MOTOR_MAX_PULSE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <PID_Incre_Calc+0x108>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f914 	bl	8000bd0 <__aeabi_fcmpgt>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <PID_Incre_Calc+0xe0>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <PID_Incre_Calc+0x108>)
 80019b2:	605a      	str	r2, [r3, #4]
    if (pid->pwm_output < -MOTOR_MAX_PULSE) pid->pwm_output = -MOTOR_MAX_PULSE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <PID_Incre_Calc+0x10c>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f8ea 	bl	8000b94 <__aeabi_fcmplt>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <PID_Incre_Calc+0xf8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <PID_Incre_Calc+0x10c>)
 80019ca:	605a      	str	r2, [r3, #4]
    return pid->pwm_output;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019da:	bf00      	nop
 80019dc:	45610000 	.word	0x45610000
 80019e0:	c5610000 	.word	0xc5610000

080019e4 <PID_Calc_Motor>:

// PID Calculates the output value  PID计算输出值
void PID_Calc_Motor(motor_data_t* motor)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_MOTOR; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e016      	b.n	8001a20 <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <PID_Calc_Motor+0x4c>)
 80019fe:	1898      	adds	r0, r3, r2
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff ff63 	bl	80018d4 <PID_Incre_Calc>
 8001a0e:	4601      	mov	r1, r0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	3204      	adds	r2, #4
 8001a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	dde5      	ble.n	80019f2 <PID_Calc_Motor+0xe>
    }
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200000ac 	.word	0x200000ac

08001a34 <PID_Clear_Motor>:
    }
}

// Clearing PID Data  清除PID数据
void PID_Clear_Motor(uint8_t motor_id)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR) return;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d87b      	bhi.n	8001b3c <PID_Clear_Motor+0x108>

    if (motor_id == MAX_MOTOR)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d140      	bne.n	8001acc <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	e039      	b.n	8001ac4 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 8001a50:	493d      	ldr	r1, [pc, #244]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3304      	adds	r3, #4
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8001a66:	4938      	ldr	r1, [pc, #224]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	3314      	adds	r3, #20
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8001a7c:	4932      	ldr	r1, [pc, #200]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 8001a92:	492d      	ldr	r1, [pc, #180]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	331c      	adds	r3, #28
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8001aa8:	4927      	ldr	r1, [pc, #156]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3320      	adds	r3, #32
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	ddc2      	ble.n	8001a50 <PID_Clear_Motor+0x1c>
 8001aca:	e038      	b.n	8001b3e <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	491e      	ldr	r1, [pc, #120]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	3304      	adds	r3, #4
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	4918      	ldr	r1, [pc, #96]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3314      	adds	r3, #20
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	4913      	ldr	r1, [pc, #76]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3318      	adds	r3, #24
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 8001b0e:	79fa      	ldrb	r2, [r7, #7]
 8001b10:	490d      	ldr	r1, [pc, #52]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	331c      	adds	r3, #28
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <PID_Clear_Motor+0x114>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	3320      	adds	r3, #32
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e000      	b.n	8001b3e <PID_Clear_Motor+0x10a>
    if (motor_id > MAX_MOTOR) return;
 8001b3c:	bf00      	nop
    }
}
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200000ac 	.word	0x200000ac

08001b4c <PID_Set_Motor_Target>:

// Set PID target speed, unit: mm/s  设置PID目标速度，单位为：mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR) return;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d81f      	bhi.n	8001b9e <PID_Set_Motor_Target+0x52>

    if (motor_id == MAX_MOTOR)
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d112      	bne.n	8001b8a <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e00b      	b.n	8001b82 <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8001b6a:	490f      	ldr	r1, [pc, #60]	; (8001ba8 <PID_Set_Motor_Target+0x5c>)
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	ddf0      	ble.n	8001b6a <PID_Set_Motor_Target+0x1e>
 8001b88:	e00a      	b.n	8001ba0 <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	4906      	ldr	r1, [pc, #24]	; (8001ba8 <PID_Set_Motor_Target+0x5c>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e000      	b.n	8001ba0 <PID_Set_Motor_Target+0x54>
    if (motor_id > MAX_MOTOR) return;
 8001b9e:	bf00      	nop
    }
}
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	200000ac 	.word	0x200000ac

08001bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd8:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bde:	f043 0320 	orr.w	r3, r3, #32
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f242 0120 	movw	r1, #8224	; 0x2020
 8001c26:	4812      	ldr	r0, [pc, #72]	; (8001c70 <MX_GPIO_Init+0xc4>)
 8001c28:	f001 f91b 	bl	8002e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8001c2c:	f242 0320 	movw	r3, #8224	; 0x2020
 8001c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <MX_GPIO_Init+0xc4>)
 8001c46:	f000 ff61 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_GPIO_Init+0xc8>)
 8001c5e:	f000 ff55 	bl	8002b0c <HAL_GPIO_Init>

}
 8001c62:	bf00      	nop
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7c:	f000 fddc 	bl	8002838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c80:	f000 f815 	bl	8001cae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c84:	f7ff ff92 	bl	8001bac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c88:	f000 f980 	bl	8001f8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c8c:	f000 f9d2 	bl	8002034 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c90:	f000 fa24 	bl	80020dc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c94:	f000 fa76 	bl	8002184 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001c98:	f000 f8b4 	bl	8001e04 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c9c:	f000 fac6 	bl	800222c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001ca0:	f000 fd2e 	bl	8002700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8001ca4:	f7fe ffde 	bl	8000c64 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8001ca8:	f7fe ffea 	bl	8000c80 <Bsp_Loop>
 8001cac:	e7fc      	b.n	8001ca8 <main+0x30>

08001cae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b090      	sub	sp, #64	; 0x40
 8001cb2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	2228      	movs	r2, #40	; 0x28
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fe9b 	bl	80049f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf2:	f107 0318 	add.w	r3, r7, #24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f8e4 	bl	8002ec4 <HAL_RCC_OscConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d02:	f000 f819 	bl	8001d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d06:	230f      	movs	r3, #15
 8001d08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 fb51 	bl	80033c8 <HAL_RCC_ClockConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d2c:	f000 f804 	bl	8001d38 <Error_Handler>
  }
}
 8001d30:	bf00      	nop
 8001d32:	3740      	adds	r7, #64	; 0x40
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <Error_Handler+0x8>
	...

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_MspInit+0x5c>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <HAL_MspInit+0x5c>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6193      	str	r3, [r2, #24]
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_MspInit+0x5c>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_MspInit+0x5c>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_MspInit+0x5c>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_MspInit+0x5c>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_MspInit+0x60>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_MspInit+0x60>)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <MemManage_Handler+0x4>

08001dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dee:	f000 fd69 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
	...

08001e04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b096      	sub	sp, #88	; 0x58
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2220      	movs	r2, #32
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fddb 	bl	80049f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e42:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e44:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <MX_TIM1_Init+0x184>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e56:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e6e:	4845      	ldr	r0, [pc, #276]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e70:	f001 fc42 	bl	80036f8 <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e7a:	f7ff ff5d 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e88:	4619      	mov	r1, r3
 8001e8a:	483e      	ldr	r0, [pc, #248]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e8c:	f001 ff84 	bl	8003d98 <HAL_TIM_ConfigClockSource>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e96:	f7ff ff4f 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e9a:	483a      	ldr	r0, [pc, #232]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001e9c:	f001 fc7b 	bl	8003796 <HAL_TIM_PWM_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ea6:	f7ff ff47 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4832      	ldr	r0, [pc, #200]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001eba:	f002 fbbd 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ec4:	f7ff ff38 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec8:	2360      	movs	r3, #96	; 0x60
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4825      	ldr	r0, [pc, #148]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001eee:	f001 fe95 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ef8:	f7ff ff1e 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	2204      	movs	r2, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	481f      	ldr	r0, [pc, #124]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001f06:	f001 fe89 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001f10:	f7ff ff12 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4819      	ldr	r0, [pc, #100]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001f1e:	f001 fe7d 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001f28:	f7ff ff06 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f30:	220c      	movs	r2, #12
 8001f32:	4619      	mov	r1, r3
 8001f34:	4813      	ldr	r0, [pc, #76]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001f36:	f001 fe71 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001f40:	f7ff fefa 	bl	8001d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001f68:	f002 fbd2 	bl	8004710 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001f72:	f7ff fee1 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM1_Init+0x180>)
 8001f78:	f000 fb3e 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 8001f7c:	bf00      	nop
 8001f7e:	3758      	adds	r7, #88	; 0x58
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000013c 	.word	0x2000013c
 8001f88:	40012c00 	.word	0x40012c00

08001f8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fd2c 	bl	80049f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <MX_TIM2_Init+0xa4>)
 8001faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <MX_TIM2_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <MX_TIM2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <MX_TIM2_Init+0xa4>)
 8001fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_TIM2_Init+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <MX_TIM2_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480d      	ldr	r0, [pc, #52]	; (8002030 <MX_TIM2_Init+0xa4>)
 8001ffc:	f001 fcde 	bl	80039bc <HAL_TIM_Encoder_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002006:	f7ff fe97 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <MX_TIM2_Init+0xa4>)
 8002018:	f002 fb0e 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002022:	f7ff fe89 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	3730      	adds	r7, #48	; 0x30
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000184 	.word	0x20000184

08002034 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	; 0x30
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fcd8 	bl	80049f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002050:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <MX_TIM3_Init+0xa0>)
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <MX_TIM3_Init+0xa4>)
 8002054:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <MX_TIM3_Init+0xa0>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <MX_TIM3_Init+0xa0>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <MX_TIM3_Init+0xa0>)
 8002064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002068:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <MX_TIM3_Init+0xa0>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <MX_TIM3_Init+0xa0>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002076:	2303      	movs	r3, #3
 8002078:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800207e:	2301      	movs	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800208e:	2301      	movs	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <MX_TIM3_Init+0xa0>)
 80020a2:	f001 fc8b 	bl	80039bc <HAL_TIM_Encoder_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f7ff fe44 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_TIM3_Init+0xa0>)
 80020be:	f002 fabb 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020c8:	f7ff fe36 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200001cc 	.word	0x200001cc
 80020d8:	40000400 	.word	0x40000400

080020dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fc84 	bl	80049f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <MX_TIM4_Init+0xa0>)
 80020fa:	4a21      	ldr	r2, [pc, #132]	; (8002180 <MX_TIM4_Init+0xa4>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <MX_TIM4_Init+0xa0>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_TIM4_Init+0xa0>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_TIM4_Init+0xa0>)
 800210c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002110:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_TIM4_Init+0xa0>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_TIM4_Init+0xa0>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800211e:	2303      	movs	r3, #3
 8002120:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002126:	2301      	movs	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002136:	2301      	movs	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_TIM4_Init+0xa0>)
 800214a:	f001 fc37 	bl	80039bc <HAL_TIM_Encoder_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002154:	f7ff fdf0 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_TIM4_Init+0xa0>)
 8002166:	f002 fa67 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002170:	f7ff fde2 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	3730      	adds	r7, #48	; 0x30
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000214 	.word	0x20000214
 8002180:	40000800 	.word	0x40000800

08002184 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f002 fc30 	bl	80049f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <MX_TIM5_Init+0xa0>)
 80021a2:	4a21      	ldr	r2, [pc, #132]	; (8002228 <MX_TIM5_Init+0xa4>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_TIM5_Init+0xa0>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <MX_TIM5_Init+0xa0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_TIM5_Init+0xa0>)
 80021b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <MX_TIM5_Init+0xa0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <MX_TIM5_Init+0xa0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021c6:	2303      	movs	r3, #3
 80021c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021ce:	2301      	movs	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021de:	2301      	movs	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <MX_TIM5_Init+0xa0>)
 80021f2:	f001 fbe3 	bl	80039bc <HAL_TIM_Encoder_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80021fc:	f7ff fd9c 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_TIM5_Init+0xa0>)
 800220e:	f002 fa13 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002218:	f7ff fd8e 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	3730      	adds	r7, #48	; 0x30
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000025c 	.word	0x2000025c
 8002228:	40000c00 	.word	0x40000c00

0800222c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b096      	sub	sp, #88	; 0x58
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2220      	movs	r2, #32
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fbc7 	bl	80049f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <MX_TIM8_Init+0x180>)
 800226c:	4a50      	ldr	r2, [pc, #320]	; (80023b0 <MX_TIM8_Init+0x184>)
 800226e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002270:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <MX_TIM8_Init+0x180>)
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002276:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <MX_TIM8_Init+0x180>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <MX_TIM8_Init+0x180>)
 800227e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002282:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <MX_TIM8_Init+0x180>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <MX_TIM8_Init+0x180>)
 800228c:	2200      	movs	r2, #0
 800228e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <MX_TIM8_Init+0x180>)
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002296:	4845      	ldr	r0, [pc, #276]	; (80023ac <MX_TIM8_Init+0x180>)
 8002298:	f001 fa2e 	bl	80036f8 <HAL_TIM_Base_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80022a2:	f7ff fd49 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022b0:	4619      	mov	r1, r3
 80022b2:	483e      	ldr	r0, [pc, #248]	; (80023ac <MX_TIM8_Init+0x180>)
 80022b4:	f001 fd70 	bl	8003d98 <HAL_TIM_ConfigClockSource>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80022be:	f7ff fd3b 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80022c2:	483a      	ldr	r0, [pc, #232]	; (80023ac <MX_TIM8_Init+0x180>)
 80022c4:	f001 fa67 	bl	8003796 <HAL_TIM_PWM_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80022ce:	f7ff fd33 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022de:	4619      	mov	r1, r3
 80022e0:	4832      	ldr	r0, [pc, #200]	; (80023ac <MX_TIM8_Init+0x180>)
 80022e2:	f002 f9a9 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80022ec:	f7ff fd24 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f0:	2360      	movs	r3, #96	; 0x60
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	2200      	movs	r2, #0
 8002312:	4619      	mov	r1, r3
 8002314:	4825      	ldr	r0, [pc, #148]	; (80023ac <MX_TIM8_Init+0x180>)
 8002316:	f001 fc81 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002320:	f7ff fd0a 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	2204      	movs	r2, #4
 800232a:	4619      	mov	r1, r3
 800232c:	481f      	ldr	r0, [pc, #124]	; (80023ac <MX_TIM8_Init+0x180>)
 800232e:	f001 fc75 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002338:	f7ff fcfe 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002340:	2208      	movs	r2, #8
 8002342:	4619      	mov	r1, r3
 8002344:	4819      	ldr	r0, [pc, #100]	; (80023ac <MX_TIM8_Init+0x180>)
 8002346:	f001 fc69 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002350:	f7ff fcf2 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002358:	220c      	movs	r2, #12
 800235a:	4619      	mov	r1, r3
 800235c:	4813      	ldr	r0, [pc, #76]	; (80023ac <MX_TIM8_Init+0x180>)
 800235e:	f001 fc5d 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002368:	f7ff fce6 	bl	8001d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002384:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <MX_TIM8_Init+0x180>)
 8002390:	f002 f9be 	bl	8004710 <HAL_TIMEx_ConfigBreakDeadTime>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800239a:	f7ff fccd 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800239e:	4803      	ldr	r0, [pc, #12]	; (80023ac <MX_TIM8_Init+0x180>)
 80023a0:	f000 f92a 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80023a4:	bf00      	nop
 80023a6:	3758      	adds	r7, #88	; 0x58
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200002a4 	.word	0x200002a4
 80023b0:	40013400 	.word	0x40013400

080023b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_TIM_Base_MspInit+0x58>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10c      	bne.n	80023e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_TIM_Base_MspInit+0x5c>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_TIM_Base_MspInit+0x5c>)
 80023cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d0:	6193      	str	r3, [r2, #24]
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_TIM_Base_MspInit+0x5c>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80023de:	e010      	b.n	8002402 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <HAL_TIM_Base_MspInit+0x60>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10b      	bne.n	8002402 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_TIM_Base_MspInit+0x5c>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <HAL_TIM_Base_MspInit+0x5c>)
 80023f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023f4:	6193      	str	r3, [r2, #24]
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_TIM_Base_MspInit+0x5c>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40013400 	.word	0x40013400

08002418 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b090      	sub	sp, #64	; 0x40
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d14f      	bne.n	80024d8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	4a67      	ldr	r2, [pc, #412]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	61d3      	str	r3, [r2, #28]
 8002444:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a61      	ldr	r2, [pc, #388]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b5f      	ldr	r3, [pc, #380]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b5c      	ldr	r3, [pc, #368]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a5b      	ldr	r2, [pc, #364]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002486:	2300      	movs	r3, #0
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248a:	2301      	movs	r3, #1
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002492:	4619      	mov	r1, r3
 8002494:	4852      	ldr	r0, [pc, #328]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002496:	f000 fb39 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800249a:	2308      	movs	r3, #8
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249e:	2300      	movs	r3, #0
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	484d      	ldr	r0, [pc, #308]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80024ae:	f000 fb2d 	bl	8002b0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80024b2:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80024d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80024d6:	e07c      	b.n	80025d2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_TIM_Encoder_MspInit+0x1d4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d124      	bne.n	800252c <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e2:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4a3d      	ldr	r2, [pc, #244]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	61d3      	str	r3, [r2, #28]
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4a37      	ldr	r2, [pc, #220]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6193      	str	r3, [r2, #24]
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002516:	2300      	movs	r3, #0
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800251a:	2301      	movs	r3, #1
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002522:	4619      	mov	r1, r3
 8002524:	482e      	ldr	r0, [pc, #184]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002526:	f000 faf1 	bl	8002b0c <HAL_GPIO_Init>
}
 800252a:	e052      	b.n	80025d2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2f      	ldr	r2, [pc, #188]	; (80025f0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d124      	bne.n	8002580 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a28      	ldr	r2, [pc, #160]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	61d3      	str	r3, [r2, #28]
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	4b23      	ldr	r3, [pc, #140]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002566:	23c0      	movs	r3, #192	; 0xc0
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256a:	2300      	movs	r3, #0
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256e:	2301      	movs	r3, #1
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002576:	4619      	mov	r1, r3
 8002578:	481a      	ldr	r0, [pc, #104]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800257a:	f000 fac7 	bl	8002b0c <HAL_GPIO_Init>
}
 800257e:	e028      	b.n	80025d2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM5)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d123      	bne.n	80025d2 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6193      	str	r3, [r2, #24]
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025ba:	2303      	movs	r3, #3
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ca:	4619      	mov	r1, r3
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80025ce:	f000 fa9d 	bl	8002b0c <HAL_GPIO_Init>
}
 80025d2:	bf00      	nop
 80025d4:	3740      	adds	r7, #64	; 0x40
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010800 	.word	0x40010800
 80025e4:	40010c00 	.word	0x40010c00
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40000c00 	.word	0x40000c00

080025f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_TIM_MspPostInit+0xec>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d143      	bne.n	80026a0 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002618:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a2c      	ldr	r2, [pc, #176]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002648:	2303      	movs	r3, #3
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2302      	movs	r3, #2
 8002652:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	4824      	ldr	r0, [pc, #144]	; (80026ec <HAL_TIM_MspPostInit+0xf4>)
 800265c:	f000 fa56 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002660:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2302      	movs	r3, #2
 800266c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	481e      	ldr	r0, [pc, #120]	; (80026f0 <HAL_TIM_MspPostInit+0xf8>)
 8002676:	f000 fa49 	bl	8002b0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800267a:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_TIM_MspPostInit+0xfc>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_TIM_MspPostInit+0xfc>)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800269e:	e01d      	b.n	80026dc <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_TIM_MspPostInit+0x100>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d118      	bne.n	80026dc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	6193      	str	r3, [r2, #24]
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_TIM_MspPostInit+0xf0>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026c2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2302      	movs	r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	4809      	ldr	r0, [pc, #36]	; (80026fc <HAL_TIM_MspPostInit+0x104>)
 80026d8:	f000 fa18 	bl	8002b0c <HAL_GPIO_Init>
}
 80026dc:	bf00      	nop
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010c00 	.word	0x40010c00
 80026f0:	40010800 	.word	0x40010800
 80026f4:	40010000 	.word	0x40010000
 80026f8:	40013400 	.word	0x40013400
 80026fc:	40011000 	.word	0x40011000

08002700 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_USART1_UART_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_USART1_UART_Init+0x4c>)
 8002738:	f002 f85f 	bl	80047fa <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002742:	f7ff faf9 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200002ec 	.word	0x200002ec
 8002750:	40013800 	.word	0x40013800

08002754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_UART_MspInit+0x8c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d131      	bne.n	80027d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_UART_MspInit+0x90>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a1a      	ldr	r2, [pc, #104]	; (80027e4 <HAL_UART_MspInit+0x90>)
 800277a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_UART_MspInit+0x90>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_UART_MspInit+0x90>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <HAL_UART_MspInit+0x90>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_UART_MspInit+0x90>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	4619      	mov	r1, r3
 80027b8:	480b      	ldr	r0, [pc, #44]	; (80027e8 <HAL_UART_MspInit+0x94>)
 80027ba:	f000 f9a7 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	4619      	mov	r1, r3
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <HAL_UART_MspInit+0x94>)
 80027d4:	f000 f99a 	bl	8002b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010800 	.word	0x40010800

080027ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ec:	480c      	ldr	r0, [pc, #48]	; (8002820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ee:	490d      	ldr	r1, [pc, #52]	; (8002824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002804:	4c0a      	ldr	r4, [pc, #40]	; (8002830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002812:	f7ff faf0 	bl	8001df6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f002 f8cb 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800281a:	f7ff fa2d 	bl	8001c78 <main>
  bx lr
 800281e:	4770      	bx	lr
  ldr r0, =_sdata
 8002820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002828:	08004a50 	.word	0x08004a50
  ldr r2, =_sbss
 800282c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002830:	20000334 	.word	0x20000334

08002834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002834:	e7fe      	b.n	8002834 <ADC1_2_IRQHandler>
	...

08002838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_Init+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_Init+0x28>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f92b 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	200f      	movs	r0, #15
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fa76 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f935 	bl	8002af2 <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f000 f90b 	bl	8002aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000008 	.word	0x20000008
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x20>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a03      	ldr	r2, [pc, #12]	; (80028e4 <HAL_IncTick+0x20>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20000008 	.word	0x20000008
 80028e4:	20000330 	.word	0x20000330

080028e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <HAL_GetTick+0x10>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000330 	.word	0x20000330

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fff0 	bl	80028e8 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffe0 	bl	80028e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000008 	.word	0x20000008

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db0a      	blt.n	80029d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	490c      	ldr	r1, [pc, #48]	; (80029f4 <__NVIC_SetPriority+0x4c>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d0:	e00a      	b.n	80029e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <__NVIC_SetPriority+0x50>)
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3b04      	subs	r3, #4
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	440b      	add	r3, r1
 80029e6:	761a      	strb	r2, [r3, #24]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f1c3 0307 	rsb	r3, r3, #7
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf28      	it	cs
 8002a1a:	2304      	movcs	r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d902      	bls.n	8002a2c <NVIC_EncodePriority+0x30>
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b03      	subs	r3, #3
 8002a2a:	e000      	b.n	8002a2e <NVIC_EncodePriority+0x32>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	401a      	ands	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	4313      	orrs	r3, r2
         );
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff90 	bl	80029a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff49 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff5e 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff90 	bl	80029fc <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5f 	bl	80029a8 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ffb0 	bl	8002a60 <SysTick_Config>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b08b      	sub	sp, #44	; 0x2c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1e:	e179      	b.n	8002e14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b20:	2201      	movs	r2, #1
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f040 8168 	bne.w	8002e0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a96      	ldr	r2, [pc, #600]	; (8002d9c <HAL_GPIO_Init+0x290>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d05e      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b48:	4a94      	ldr	r2, [pc, #592]	; (8002d9c <HAL_GPIO_Init+0x290>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d875      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b4e:	4a94      	ldr	r2, [pc, #592]	; (8002da0 <HAL_GPIO_Init+0x294>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d058      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b54:	4a92      	ldr	r2, [pc, #584]	; (8002da0 <HAL_GPIO_Init+0x294>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d86f      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b5a:	4a92      	ldr	r2, [pc, #584]	; (8002da4 <HAL_GPIO_Init+0x298>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d052      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b60:	4a90      	ldr	r2, [pc, #576]	; (8002da4 <HAL_GPIO_Init+0x298>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d869      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b66:	4a90      	ldr	r2, [pc, #576]	; (8002da8 <HAL_GPIO_Init+0x29c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04c      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b6c:	4a8e      	ldr	r2, [pc, #568]	; (8002da8 <HAL_GPIO_Init+0x29c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d863      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b72:	4a8e      	ldr	r2, [pc, #568]	; (8002dac <HAL_GPIO_Init+0x2a0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d046      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b78:	4a8c      	ldr	r2, [pc, #560]	; (8002dac <HAL_GPIO_Init+0x2a0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d85d      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b7e:	2b12      	cmp	r3, #18
 8002b80:	d82a      	bhi.n	8002bd8 <HAL_GPIO_Init+0xcc>
 8002b82:	2b12      	cmp	r3, #18
 8002b84:	d859      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <HAL_GPIO_Init+0x80>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002c07 	.word	0x08002c07
 8002b90:	08002be1 	.word	0x08002be1
 8002b94:	08002bf3 	.word	0x08002bf3
 8002b98:	08002c35 	.word	0x08002c35
 8002b9c:	08002c3b 	.word	0x08002c3b
 8002ba0:	08002c3b 	.word	0x08002c3b
 8002ba4:	08002c3b 	.word	0x08002c3b
 8002ba8:	08002c3b 	.word	0x08002c3b
 8002bac:	08002c3b 	.word	0x08002c3b
 8002bb0:	08002c3b 	.word	0x08002c3b
 8002bb4:	08002c3b 	.word	0x08002c3b
 8002bb8:	08002c3b 	.word	0x08002c3b
 8002bbc:	08002c3b 	.word	0x08002c3b
 8002bc0:	08002c3b 	.word	0x08002c3b
 8002bc4:	08002c3b 	.word	0x08002c3b
 8002bc8:	08002c3b 	.word	0x08002c3b
 8002bcc:	08002c3b 	.word	0x08002c3b
 8002bd0:	08002be9 	.word	0x08002be9
 8002bd4:	08002bfd 	.word	0x08002bfd
 8002bd8:	4a75      	ldr	r2, [pc, #468]	; (8002db0 <HAL_GPIO_Init+0x2a4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bde:	e02c      	b.n	8002c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e029      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e024      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e01f      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	330c      	adds	r3, #12
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e01a      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e013      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	611a      	str	r2, [r3, #16]
          break;
 8002c26:	e009      	b.n	8002c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	615a      	str	r2, [r3, #20]
          break;
 8002c32:	e003      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	e000      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          break;
 8002c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2bff      	cmp	r3, #255	; 0xff
 8002c40:	d801      	bhi.n	8002c46 <HAL_GPIO_Init+0x13a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e001      	b.n	8002c4a <HAL_GPIO_Init+0x13e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2bff      	cmp	r3, #255	; 0xff
 8002c50:	d802      	bhi.n	8002c58 <HAL_GPIO_Init+0x14c>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	e002      	b.n	8002c5e <HAL_GPIO_Init+0x152>
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3b08      	subs	r3, #8
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	210f      	movs	r1, #15
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	6a39      	ldr	r1, [r7, #32]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80c1 	beq.w	8002e0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8c:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_GPIO_Init+0x2a8>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a48      	ldr	r2, [pc, #288]	; (8002db4 <HAL_GPIO_Init+0x2a8>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_GPIO_Init+0x2a8>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca4:	4a44      	ldr	r2, [pc, #272]	; (8002db8 <HAL_GPIO_Init+0x2ac>)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_GPIO_Init+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01f      	beq.n	8002d10 <HAL_GPIO_Init+0x204>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3b      	ldr	r2, [pc, #236]	; (8002dc0 <HAL_GPIO_Init+0x2b4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d019      	beq.n	8002d0c <HAL_GPIO_Init+0x200>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_GPIO_Init+0x2b8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_GPIO_Init+0x1fc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a39      	ldr	r2, [pc, #228]	; (8002dc8 <HAL_GPIO_Init+0x2bc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00d      	beq.n	8002d04 <HAL_GPIO_Init+0x1f8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <HAL_GPIO_Init+0x2c0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <HAL_GPIO_Init+0x1f4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a37      	ldr	r2, [pc, #220]	; (8002dd0 <HAL_GPIO_Init+0x2c4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_GPIO_Init+0x1f0>
 8002cf8:	2305      	movs	r3, #5
 8002cfa:	e00a      	b.n	8002d12 <HAL_GPIO_Init+0x206>
 8002cfc:	2306      	movs	r3, #6
 8002cfe:	e008      	b.n	8002d12 <HAL_GPIO_Init+0x206>
 8002d00:	2304      	movs	r3, #4
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x206>
 8002d04:	2303      	movs	r3, #3
 8002d06:	e004      	b.n	8002d12 <HAL_GPIO_Init+0x206>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x206>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_GPIO_Init+0x206>
 8002d10:	2300      	movs	r3, #0
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d22:	4925      	ldr	r1, [pc, #148]	; (8002db8 <HAL_GPIO_Init+0x2ac>)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4924      	ldr	r1, [pc, #144]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d4a:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4920      	ldr	r1, [pc, #128]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	491a      	ldr	r1, [pc, #104]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	4916      	ldr	r1, [pc, #88]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d025      	beq.n	8002dd8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4910      	ldr	r1, [pc, #64]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]
 8002d98:	e025      	b.n	8002de6 <HAL_GPIO_Init+0x2da>
 8002d9a:	bf00      	nop
 8002d9c:	10320000 	.word	0x10320000
 8002da0:	10310000 	.word	0x10310000
 8002da4:	10220000 	.word	0x10220000
 8002da8:	10210000 	.word	0x10210000
 8002dac:	10120000 	.word	0x10120000
 8002db0:	10110000 	.word	0x10110000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40010800 	.word	0x40010800
 8002dc0:	40010c00 	.word	0x40010c00
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	40011800 	.word	0x40011800
 8002dd0:	40011c00 	.word	0x40011c00
 8002dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	4913      	ldr	r1, [pc, #76]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	490e      	ldr	r1, [pc, #56]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]
 8002dfe:	e006      	b.n	8002e0e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4909      	ldr	r1, [pc, #36]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	3301      	adds	r3, #1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f ae7e 	bne.w	8002b20 <HAL_GPIO_Init+0x14>
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	372c      	adds	r7, #44	; 0x2c
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40010400 	.word	0x40010400

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	807b      	strh	r3, [r7, #2]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e72:	787b      	ldrb	r3, [r7, #1]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e7e:	e003      	b.n	8002e88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	041a      	lsls	r2, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	611a      	str	r2, [r3, #16]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ea4:	887a      	ldrh	r2, [r7, #2]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	041a      	lsls	r2, r3, #16
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	400b      	ands	r3, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e272      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8087 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee4:	4b92      	ldr	r3, [pc, #584]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d00c      	beq.n	8002f0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ef0:	4b8f      	ldr	r3, [pc, #572]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d112      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5e>
 8002efc:	4b8c      	ldr	r3, [pc, #560]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d10b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0a:	4b89      	ldr	r3, [pc, #548]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x12c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d168      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e24c      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x76>
 8002f2c:	4b80      	ldr	r3, [pc, #512]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7f      	ldr	r2, [pc, #508]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e02e      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x98>
 8002f42:	4b7b      	ldr	r3, [pc, #492]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7a      	ldr	r2, [pc, #488]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b78      	ldr	r3, [pc, #480]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a77      	ldr	r2, [pc, #476]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0xbc>
 8002f66:	4b72      	ldr	r3, [pc, #456]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a71      	ldr	r2, [pc, #452]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b6f      	ldr	r3, [pc, #444]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a6e      	ldr	r2, [pc, #440]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f80:	4b6b      	ldr	r3, [pc, #428]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b68      	ldr	r3, [pc, #416]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a67      	ldr	r2, [pc, #412]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff fca2 	bl	80028e8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff fc9e 	bl	80028e8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e200      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b5d      	ldr	r3, [pc, #372]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe4>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff fc8e 	bl	80028e8 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7ff fc8a 	bl	80028e8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1ec      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	4b53      	ldr	r3, [pc, #332]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x10c>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d063      	beq.n	80030c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffe:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800300a:	4b49      	ldr	r3, [pc, #292]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x18c>
 8003016:	4b46      	ldr	r3, [pc, #280]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x176>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1c0      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4939      	ldr	r1, [pc, #228]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	e03a      	b.n	80030c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003058:	4b36      	ldr	r3, [pc, #216]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7ff fc43 	bl	80028e8 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003066:	f7ff fc3f 	bl	80028e8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1a1      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4927      	ldr	r1, [pc, #156]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]
 8003098:	e015      	b.n	80030c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fc22 	bl	80028e8 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7ff fc1e 	bl	80028e8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e180      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d03a      	beq.n	8003148 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_RCC_OscConfig+0x274>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7ff fc02 	bl	80028e8 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e8:	f7ff fbfe 	bl	80028e8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e160      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003106:	2001      	movs	r0, #1
 8003108:	f000 fad8 	bl	80036bc <RCC_Delay>
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_OscConfig+0x274>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003114:	f7ff fbe8 	bl	80028e8 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311a:	e00f      	b.n	800313c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311c:	f7ff fbe4 	bl	80028e8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d908      	bls.n	800313c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e146      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	42420000 	.word	0x42420000
 8003138:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b92      	ldr	r3, [pc, #584]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e9      	bne.n	800311c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a6 	beq.w	80032a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b8b      	ldr	r3, [pc, #556]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4a87      	ldr	r2, [pc, #540]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	61d3      	str	r3, [r2, #28]
 8003172:	4b85      	ldr	r3, [pc, #532]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	4b82      	ldr	r3, [pc, #520]	; (800338c <HAL_RCC_OscConfig+0x4c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318e:	4b7f      	ldr	r3, [pc, #508]	; (800338c <HAL_RCC_OscConfig+0x4c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7e      	ldr	r2, [pc, #504]	; (800338c <HAL_RCC_OscConfig+0x4c8>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7ff fba5 	bl	80028e8 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7ff fba1 	bl	80028e8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e103      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b75      	ldr	r3, [pc, #468]	; (800338c <HAL_RCC_OscConfig+0x4c8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x312>
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	e02d      	b.n	8003232 <HAL_RCC_OscConfig+0x36e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x334>
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a69      	ldr	r2, [pc, #420]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a66      	ldr	r2, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	e01c      	b.n	8003232 <HAL_RCC_OscConfig+0x36e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0x356>
 8003200:	4b61      	ldr	r3, [pc, #388]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a60      	ldr	r2, [pc, #384]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4a5d      	ldr	r2, [pc, #372]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0x36e>
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a5a      	ldr	r2, [pc, #360]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6213      	str	r3, [r2, #32]
 8003226:	4b58      	ldr	r3, [pc, #352]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a57      	ldr	r2, [pc, #348]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7ff fb55 	bl	80028e8 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7ff fb51 	bl	80028e8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0b1      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ee      	beq.n	8003242 <HAL_RCC_OscConfig+0x37e>
 8003264:	e014      	b.n	8003290 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7ff fb3f 	bl	80028e8 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7ff fb3b 	bl	80028e8 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e09b      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ee      	bne.n	800326e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8087 	beq.w	80033ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d061      	beq.n	800337c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d146      	bne.n	800334e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7ff fb0f 	bl	80028e8 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ce:	f7ff fb0b 	bl	80028e8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e06d      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d108      	bne.n	8003308 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4921      	ldr	r1, [pc, #132]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003308:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a19      	ldr	r1, [r3, #32]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	430b      	orrs	r3, r1
 800331a:	491b      	ldr	r1, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7ff fadf 	bl	80028e8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7ff fadb 	bl	80028e8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e03d      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x46a>
 800334c:	e035      	b.n	80033ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_OscConfig+0x4cc>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7ff fac8 	bl	80028e8 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7ff fac4 	bl	80028e8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e026      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x498>
 800337a:	e01e      	b.n	80033ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e019      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_OscConfig+0x500>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000

080033c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0d0      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 0207 	bic.w	r2, r3, #7
 80033f2:	4965      	ldr	r1, [pc, #404]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800342e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d040      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e073      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4936      	ldr	r1, [pc, #216]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b8:	f7ff fa16 	bl	80028e8 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7ff fa12 	bl	80028e8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e053      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d210      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 0207 	bic.w	r2, r3, #7
 80034fe:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1cc>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1d0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f974 	bl	8002864 <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
 8003590:	08004a30 	.word	0x08004a30
 8003594:	20000000 	.word	0x20000000
 8003598:	20000004 	.word	0x20000004

0800359c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b490      	push	{r4, r7}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_GetSysClockFreq+0xac>)
 80035a4:	1d3c      	adds	r4, r7, #4
 80035a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035ac:	f240 2301 	movw	r3, #513	; 0x201
 80035b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <HAL_RCC_GetSysClockFreq+0xb0>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d002      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x40>
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d003      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x46>
 80035da:	e02b      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035dc:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035de:	623b      	str	r3, [r7, #32]
      break;
 80035e0:	e02b      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	0c9b      	lsrs	r3, r3, #18
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3328      	adds	r3, #40	; 0x28
 80035ec:	443b      	add	r3, r7
 80035ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d012      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0c5b      	lsrs	r3, r3, #17
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	3328      	adds	r3, #40	; 0x28
 800360a:	443b      	add	r3, r7
 800360c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003610:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4a0e      	ldr	r2, [pc, #56]	; (8003650 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003616:	fb03 f202 	mul.w	r2, r3, r2
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	e004      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	623b      	str	r3, [r7, #32]
      break;
 8003632:	e002      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003636:	623b      	str	r3, [r7, #32]
      break;
 8003638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363a:	6a3b      	ldr	r3, [r7, #32]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc90      	pop	{r4, r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	08004a20 	.word	0x08004a20
 800364c:	40021000 	.word	0x40021000
 8003650:	007a1200 	.word	0x007a1200
 8003654:	003d0900 	.word	0x003d0900

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <HAL_RCC_GetHCLKFreq+0x10>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003670:	f7ff fff2 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08004a40 	.word	0x08004a40

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003698:	f7ff ffde 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0adb      	lsrs	r3, r3, #11
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08004a40 	.word	0x08004a40

080036bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <RCC_Delay+0x34>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <RCC_Delay+0x38>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0a5b      	lsrs	r3, r3, #9
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d8:	bf00      	nop
  }
  while (Delay --);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	60fa      	str	r2, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f9      	bne.n	80036d8 <RCC_Delay+0x1c>
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	20000000 	.word	0x20000000
 80036f4:	10624dd3 	.word	0x10624dd3

080036f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e041      	b.n	800378e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe fe48 	bl	80023b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f000 fbf2 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e041      	b.n	800382c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f839 	bl	8003834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f000 fba3 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
	...

08003848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_TIM_PWM_Start+0x24>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e022      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d109      	bne.n	8003886 <HAL_TIM_PWM_Start+0x3e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e015      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d109      	bne.n	80038a0 <HAL_TIM_PWM_Start+0x58>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e008      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e072      	b.n	80039a0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start+0x82>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0x92>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d8:	e00b      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0xa2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e8:	e003      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fdcc 	bl	8004498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_TIM_PWM_Start+0x160>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_TIM_PWM_Start+0xcc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a27      	ldr	r2, [pc, #156]	; (80039ac <HAL_TIM_PWM_Start+0x164>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_TIM_PWM_Start+0xd0>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_TIM_PWM_Start+0xd2>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_TIM_PWM_Start+0x160>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_TIM_PWM_Start+0x122>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_TIM_PWM_Start+0x164>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_TIM_PWM_Start+0x122>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d00e      	beq.n	800396a <HAL_TIM_PWM_Start+0x122>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_TIM_PWM_Start+0x168>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_TIM_PWM_Start+0x122>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_TIM_PWM_Start+0x16c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_TIM_PWM_Start+0x122>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <HAL_TIM_PWM_Start+0x170>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d010      	beq.n	800399e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	e007      	b.n	800399e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40013400 	.word	0x40013400
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00

080039bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e093      	b.n	8003af8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fe fd17 	bl	8002418 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a00:	f023 0307 	bic.w	r3, r3, #7
 8003a04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f000 fa85 	bl	8003f20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a5c:	f023 030c 	bic.w	r3, r3, #12
 8003a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	011a      	lsls	r2, r3, #4
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	031b      	lsls	r3, r3, #12
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b36:	7b7b      	ldrb	r3, [r7, #13]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d001      	beq.n	8003b40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e069      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b50:	e031      	b.n	8003bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d110      	bne.n	8003b7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b58:	7bbb      	ldrb	r3, [r7, #14]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d102      	bne.n	8003b64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b5e:	7b3b      	ldrb	r3, [r7, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e055      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b78:	e01d      	b.n	8003bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d108      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	7b7b      	ldrb	r3, [r7, #13]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b8c:	7b3b      	ldrb	r3, [r7, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e03e      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_Encoder_Start+0xc4>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d008      	beq.n	8003bd4 <HAL_TIM_Encoder_Start+0xd4>
 8003bc2:	e00f      	b.n	8003be4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fc63 	bl	8004498 <TIM_CCxChannelCmd>
      break;
 8003bd2:	e016      	b.n	8003c02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2104      	movs	r1, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fc5b 	bl	8004498 <TIM_CCxChannelCmd>
      break;
 8003be2:	e00e      	b.n	8003c02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fc53 	bl	8004498 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fc4c 	bl	8004498 <TIM_CCxChannelCmd>
      break;
 8003c00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0ac      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	f200 809f 	bhi.w	8003d84 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c46:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003d85 	.word	0x08003d85
 8003c54:	08003d85 	.word	0x08003d85
 8003c58:	08003d85 	.word	0x08003d85
 8003c5c:	08003cc1 	.word	0x08003cc1
 8003c60:	08003d85 	.word	0x08003d85
 8003c64:	08003d85 	.word	0x08003d85
 8003c68:	08003d85 	.word	0x08003d85
 8003c6c:	08003d03 	.word	0x08003d03
 8003c70:	08003d85 	.word	0x08003d85
 8003c74:	08003d85 	.word	0x08003d85
 8003c78:	08003d85 	.word	0x08003d85
 8003c7c:	08003d43 	.word	0x08003d43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f9c4 	bl	8004014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0208 	orr.w	r2, r2, #8
 8003c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0204 	bic.w	r2, r2, #4
 8003caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	619a      	str	r2, [r3, #24]
      break;
 8003cbe:	e062      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fa14 	bl	80040f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6999      	ldr	r1, [r3, #24]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	021a      	lsls	r2, r3, #8
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	619a      	str	r2, [r3, #24]
      break;
 8003d00:	e041      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fa67 	bl	80041dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0208 	orr.w	r2, r2, #8
 8003d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0204 	bic.w	r2, r2, #4
 8003d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69d9      	ldr	r1, [r3, #28]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	61da      	str	r2, [r3, #28]
      break;
 8003d40:	e021      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fabb 	bl	80042c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69d9      	ldr	r1, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	021a      	lsls	r2, r3, #8
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	61da      	str	r2, [r3, #28]
      break;
 8003d82:	e000      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIM_ConfigClockSource+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e0b3      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x180>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de8:	d03e      	beq.n	8003e68 <HAL_TIM_ConfigClockSource+0xd0>
 8003dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dee:	f200 8087 	bhi.w	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	f000 8085 	beq.w	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfe:	d87f      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003e00:	2b70      	cmp	r3, #112	; 0x70
 8003e02:	d01a      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0xa2>
 8003e04:	2b70      	cmp	r3, #112	; 0x70
 8003e06:	d87b      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003e08:	2b60      	cmp	r3, #96	; 0x60
 8003e0a:	d050      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x116>
 8003e0c:	2b60      	cmp	r3, #96	; 0x60
 8003e0e:	d877      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003e10:	2b50      	cmp	r3, #80	; 0x50
 8003e12:	d03c      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0xf6>
 8003e14:	2b50      	cmp	r3, #80	; 0x50
 8003e16:	d873      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d058      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x136>
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d86f      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003e20:	2b30      	cmp	r3, #48	; 0x30
 8003e22:	d064      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x156>
 8003e24:	2b30      	cmp	r3, #48	; 0x30
 8003e26:	d86b      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d060      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x156>
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d867      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d05c      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x156>
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d05a      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e38:	e062      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f000 fb06 	bl	800445a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	609a      	str	r2, [r3, #8]
      break;
 8003e66:	e04e      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6899      	ldr	r1, [r3, #8]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f000 faef 	bl	800445a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e8a:	609a      	str	r2, [r3, #8]
      break;
 8003e8c:	e03b      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 fa66 	bl	800436c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2150      	movs	r1, #80	; 0x50
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fabd 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003eac:	e02b      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fa84 	bl	80043c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2160      	movs	r1, #96	; 0x60
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 faad 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e01b      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f000 fa46 	bl	800436c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fa9d 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003eec:	e00b      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f000 fa94 	bl	8004426 <TIM_ITRx_SetConfig>
        break;
 8003efe:	e002      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f00:	bf00      	nop
 8003f02:	e000      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a33      	ldr	r2, [pc, #204]	; (8004000 <TIM_Base_SetConfig+0xe0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00f      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <TIM_Base_SetConfig+0xe8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2e      	ldr	r2, [pc, #184]	; (800400c <TIM_Base_SetConfig+0xec>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <TIM_Base_SetConfig+0xf0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <TIM_Base_SetConfig+0xe0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <TIM_Base_SetConfig+0x82>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <TIM_Base_SetConfig+0x82>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x82>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <TIM_Base_SetConfig+0xe8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0x82>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <TIM_Base_SetConfig+0xec>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0x82>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <TIM_Base_SetConfig+0xf0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <TIM_Base_SetConfig+0xe0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0xc8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40013400 	.word	0x40013400
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00

08004014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0201 	bic.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 0302 	bic.w	r3, r3, #2
 800405c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a20      	ldr	r2, [pc, #128]	; (80040ec <TIM_OC1_SetConfig+0xd8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_OC1_SetConfig+0x64>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <TIM_OC1_SetConfig+0xdc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d10c      	bne.n	8004092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f023 0308 	bic.w	r3, r3, #8
 800407e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a15      	ldr	r2, [pc, #84]	; (80040ec <TIM_OC1_SetConfig+0xd8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_OC1_SetConfig+0x8e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <TIM_OC1_SetConfig+0xdc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d111      	bne.n	80040c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	621a      	str	r2, [r3, #32]
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40013400 	.word	0x40013400

080040f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0210 	bic.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0320 	bic.w	r3, r3, #32
 800413e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a21      	ldr	r2, [pc, #132]	; (80041d4 <TIM_OC2_SetConfig+0xe0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC2_SetConfig+0x68>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <TIM_OC2_SetConfig+0xe4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10d      	bne.n	8004178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <TIM_OC2_SetConfig+0xe0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_OC2_SetConfig+0x94>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <TIM_OC2_SetConfig+0xe4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d113      	bne.n	80041b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800418e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40013400 	.word	0x40013400

080041dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a21      	ldr	r2, [pc, #132]	; (80042bc <TIM_OC3_SetConfig+0xe0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <TIM_OC3_SetConfig+0x66>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <TIM_OC3_SetConfig+0xe4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10d      	bne.n	800425e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_OC3_SetConfig+0xe0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_OC3_SetConfig+0x92>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <TIM_OC3_SetConfig+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d113      	bne.n	8004296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800427c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	621a      	str	r2, [r3, #32]
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40013400 	.word	0x40013400

080042c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800430e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a11      	ldr	r2, [pc, #68]	; (8004364 <TIM_OC4_SetConfig+0xa0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_OC4_SetConfig+0x68>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <TIM_OC4_SetConfig+0xa4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d109      	bne.n	8004340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40013400 	.word	0x40013400

0800436c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f023 030a 	bic.w	r3, r3, #10
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f023 0210 	bic.w	r2, r3, #16
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	031b      	lsls	r3, r3, #12
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004404:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	f043 0307 	orr.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800445a:	b480      	push	{r7}
 800445c:	b087      	sub	sp, #28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004474:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	021a      	lsls	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	431a      	orrs	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4313      	orrs	r3, r2
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	609a      	str	r2, [r3, #8]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	2201      	movs	r2, #1
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_TIMEx_PWMN_Start+0x24>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e022      	b.n	800454a <HAL_TIMEx_PWMN_Start+0x6a>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d109      	bne.n	800451e <HAL_TIMEx_PWMN_Start+0x3e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e015      	b.n	800454a <HAL_TIMEx_PWMN_Start+0x6a>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d109      	bne.n	8004538 <HAL_TIMEx_PWMN_Start+0x58>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e008      	b.n	800454a <HAL_TIMEx_PWMN_Start+0x6a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e063      	b.n	800461a <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_TIMEx_PWMN_Start+0x82>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	e013      	b.n	800458a <HAL_TIMEx_PWMN_Start+0xaa>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d104      	bne.n	8004572 <HAL_TIMEx_PWMN_Start+0x92>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004570:	e00b      	b.n	800458a <HAL_TIMEx_PWMN_Start+0xaa>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d104      	bne.n	8004582 <HAL_TIMEx_PWMN_Start+0xa2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004580:	e003      	b.n	800458a <HAL_TIMEx_PWMN_Start+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2204      	movs	r2, #4
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f90d 	bl	80047b2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_TIMEx_PWMN_Start+0x144>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <HAL_TIMEx_PWMN_Start+0x104>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <HAL_TIMEx_PWMN_Start+0x148>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <HAL_TIMEx_PWMN_Start+0x104>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d00e      	beq.n	80045e4 <HAL_TIMEx_PWMN_Start+0x104>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_TIMEx_PWMN_Start+0x14c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_TIMEx_PWMN_Start+0x104>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_TIMEx_PWMN_Start+0x150>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIMEx_PWMN_Start+0x104>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a15      	ldr	r2, [pc, #84]	; (8004634 <HAL_TIMEx_PWMN_Start+0x154>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d111      	bne.n	8004608 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d010      	beq.n	8004618 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	e007      	b.n	8004618 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40013400 	.word	0x40013400
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00

08004638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e050      	b.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a14      	ldr	r2, [pc, #80]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a12      	ldr	r2, [pc, #72]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10c      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40013400 	.word	0x40013400
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00

08004710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004728:	2302      	movs	r3, #2
 800472a:	e03d      	b.n	80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b087      	sub	sp, #28
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2204      	movs	r2, #4
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	401a      	ands	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e03f      	b.n	800488c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fd ff97 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2224      	movs	r2, #36	; 0x24
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f828 	bl	8004894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004852:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004862:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004872:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048ce:	f023 030c 	bic.w	r3, r3, #12
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	430b      	orrs	r3, r1
 80048da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2c      	ldr	r2, [pc, #176]	; (80049a8 <UART_SetConfig+0x114>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d103      	bne.n	8004904 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fe feca 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	e002      	b.n	800490a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7fe feb2 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8004908:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009a      	lsls	r2, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <UART_SetConfig+0x118>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	0119      	lsls	r1, r3, #4
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <UART_SetConfig+0x118>)
 8004942:	fba3 0302 	umull	r0, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2064      	movs	r0, #100	; 0x64
 800494a:	fb00 f303 	mul.w	r3, r0, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	3332      	adds	r3, #50	; 0x32
 8004954:	4a15      	ldr	r2, [pc, #84]	; (80049ac <UART_SetConfig+0x118>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004960:	4419      	add	r1, r3
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009a      	lsls	r2, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	fbb2 f2f3 	udiv	r2, r2, r3
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <UART_SetConfig+0x118>)
 800497a:	fba3 0302 	umull	r0, r3, r3, r2
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2064      	movs	r0, #100	; 0x64
 8004982:	fb00 f303 	mul.w	r3, r0, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	3332      	adds	r3, #50	; 0x32
 800498c:	4a07      	ldr	r2, [pc, #28]	; (80049ac <UART_SetConfig+0x118>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	f003 020f 	and.w	r2, r3, #15
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	440a      	add	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40013800 	.word	0x40013800
 80049ac:	51eb851f 	.word	0x51eb851f

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	2600      	movs	r6, #0
 80049b4:	4d0c      	ldr	r5, [pc, #48]	; (80049e8 <__libc_init_array+0x38>)
 80049b6:	4c0d      	ldr	r4, [pc, #52]	; (80049ec <__libc_init_array+0x3c>)
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	f000 f822 	bl	8004a08 <_init>
 80049c4:	2600      	movs	r6, #0
 80049c6:	4d0a      	ldr	r5, [pc, #40]	; (80049f0 <__libc_init_array+0x40>)
 80049c8:	4c0a      	ldr	r4, [pc, #40]	; (80049f4 <__libc_init_array+0x44>)
 80049ca:	1b64      	subs	r4, r4, r5
 80049cc:	10a4      	asrs	r4, r4, #2
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	08004a48 	.word	0x08004a48
 80049ec:	08004a48 	.word	0x08004a48
 80049f0:	08004a48 	.word	0x08004a48
 80049f4:	08004a4c 	.word	0x08004a4c

080049f8 <memset>:
 80049f8:	4603      	mov	r3, r0
 80049fa:	4402      	add	r2, r0
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d100      	bne.n	8004a02 <memset+0xa>
 8004a00:	4770      	bx	lr
 8004a02:	f803 1b01 	strb.w	r1, [r3], #1
 8004a06:	e7f9      	b.n	80049fc <memset+0x4>

08004a08 <_init>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr

08004a14 <_fini>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr
