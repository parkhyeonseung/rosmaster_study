
Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c2c  08003c2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c2c  08003c2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003ca4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003ca4  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000720e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed9  00000000  00000000  000272a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00029180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  000299f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab2d  00000000  00000000  0002a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbeb  00000000  00000000  00044c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d74  00000000  00000000  00050870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e25e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002674  00000000  00000000  000e2634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003b48 	.word	0x08003b48

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003b48 	.word	0x08003b48

08000224 <Bsp_Led_Show_State_Handle>:
#include "bsp.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f001 fb4d 	bl	80018e6 <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000008c 	.word	0x2000008c
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 f85d 	bl	800031c <Beep_On_Time>
	USART1_Init();
 8000262:	f000 f8f7 	bl	8000454 <USART1_Init>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 8000270:	2001      	movs	r0, #1
 8000272:	f000 f8c5 	bl	8000400 <Key1_State>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d00d      	beq.n	8000298 <Bsp_Loop+0x2c>
	{
		Beep_On_Time(50);
 800027c:	2032      	movs	r0, #50	; 0x32
 800027e:	f000 f84d 	bl	800031c <Beep_On_Time>
		static int press = 0;
		press++;
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <Bsp_Loop+0x40>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a08      	ldr	r2, [pc, #32]	; (80002ac <Bsp_Loop+0x40>)
 800028a:	6013      	str	r3, [r2, #0]
		printf("press:%d\n", press);
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <Bsp_Loop+0x40>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4619      	mov	r1, r3
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <Bsp_Loop+0x44>)
 8000294:	f002 fcc4 	bl	8002c20 <iprintf>
	}

	Bsp_Led_Show_State_Handle();
 8000298:	f7ff ffc4 	bl	8000224 <Bsp_Led_Show_State_Handle>
	// The buzzer automatically shuts down when times out   蜂鸣器超时自动关闭
	Beep_Timeout_Close_Handle();
 800029c:	f000 f87e 	bl	800039c <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 80002a0:	200a      	movs	r0, #10
 80002a2:	f000 fc37 	bl	8000b14 <HAL_Delay>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000090 	.word	0x20000090
 80002b0:	08003b60 	.word	0x08003b60

080002b4 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 80002be:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <Beep_Set_Time+0x1c>)
 80002c0:	88fb      	ldrh	r3, [r7, #6]
 80002c2:	8013      	strh	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000094 	.word	0x20000094

080002d4 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	return beep_on_time;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <Beep_Get_Time+0x10>)
 80002da:	881b      	ldrh	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000094 	.word	0x20000094

080002e8 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 80002f2:	4a04      	ldr	r2, [pc, #16]	; (8000304 <Beep_Set_State+0x1c>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	7013      	strb	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000096 	.word	0x20000096

08000308 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	return beep_state;
 800030c:	4b02      	ldr	r3, [pc, #8]	; (8000318 <Beep_Get_State+0x10>)
 800030e:	781b      	ldrb	r3, [r3, #0]
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	20000096 	.word	0x20000096

0800031c <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10b      	bne.n	8000344 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ffdb 	bl	80002e8 <Beep_Set_State>
		Beep_Set_Time(0);
 8000332:	2000      	movs	r0, #0
 8000334:	f7ff ffbe 	bl	80002b4 <Beep_Set_Time>
		BEEP_ON();
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	4815      	ldr	r0, [pc, #84]	; (8000394 <Beep_On_Time+0x78>)
 800033e:	f001 faba 	bl	80018b6 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8000342:	e022      	b.n	800038a <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000344:	88fb      	ldrh	r3, [r7, #6]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d10b      	bne.n	8000362 <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 800034a:	2000      	movs	r0, #0
 800034c:	f7ff ffcc 	bl	80002e8 <Beep_Set_State>
		Beep_Set_Time(0);
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffaf 	bl	80002b4 <Beep_Set_Time>
		BEEP_OFF();
 8000356:	2200      	movs	r2, #0
 8000358:	2120      	movs	r1, #32
 800035a:	480e      	ldr	r0, [pc, #56]	; (8000394 <Beep_On_Time+0x78>)
 800035c:	f001 faab 	bl	80018b6 <HAL_GPIO_WritePin>
}
 8000360:	e013      	b.n	800038a <Beep_On_Time+0x6e>
		if (time >= 10)
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	2b09      	cmp	r3, #9
 8000366:	d910      	bls.n	800038a <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8000368:	2002      	movs	r0, #2
 800036a:	f7ff ffbd 	bl	80002e8 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	4a09      	ldr	r2, [pc, #36]	; (8000398 <Beep_On_Time+0x7c>)
 8000372:	fba2 2303 	umull	r2, r3, r2, r3
 8000376:	08db      	lsrs	r3, r3, #3
 8000378:	b29b      	uxth	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff9a 	bl	80002b4 <Beep_Set_Time>
			BEEP_ON();
 8000380:	2201      	movs	r2, #1
 8000382:	2120      	movs	r1, #32
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <Beep_On_Time+0x78>)
 8000386:	f001 fa96 	bl	80018b6 <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40011000 	.word	0x40011000
 8000398:	cccccccd 	.word	0xcccccccd

0800039c <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80003a0:	f7ff ffb2 	bl	8000308 <Beep_Get_State>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d113      	bne.n	80003d2 <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 80003aa:	f7ff ff93 	bl	80002d4 <Beep_Get_Time>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d006      	beq.n	80003c2 <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <Beep_Timeout_Close_Handle+0x3c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <Beep_Timeout_Close_Handle+0x3c>)
 80003be:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 80003c0:	e007      	b.n	80003d2 <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <Beep_Timeout_Close_Handle+0x40>)
 80003c8:	f001 fa75 	bl	80018b6 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff8b 	bl	80002e8 <Beep_Set_State>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000094 	.word	0x20000094
 80003dc:	40011000 	.word	0x40011000

080003e0 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 80003e4:	2104      	movs	r1, #4
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <Key1_is_Press+0x1c>)
 80003e8:	f001 fa4e 	bl	8001888 <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d101      	bne.n	80003f6 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 80003f2:	2301      	movs	r3, #1
 80003f4:	e000      	b.n	80003f8 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40011400 	.word	0x40011400

08000400 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800040a:	f7ff ffe9 	bl	80003e0 <Key1_is_Press>
 800040e:	4603      	mov	r3, r0
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10e      	bne.n	8000432 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000414:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <Key1_State+0x50>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	3301      	adds	r3, #1
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	429a      	cmp	r2, r3
 8000422:	da09      	bge.n	8000438 <Key1_State+0x38>
		{
			key1_state++;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <Key1_State+0x50>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <Key1_State+0x50>)
 800042e:	801a      	strh	r2, [r3, #0]
 8000430:	e002      	b.n	8000438 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <Key1_State+0x50>)
 8000434:	2200      	movs	r2, #0
 8000436:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <Key1_State+0x50>)
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d101      	bne.n	8000444 <Key1_State+0x44>
	{
		return KEY_PRESS;
 8000440:	2301      	movs	r3, #1
 8000442:	e000      	b.n	8000446 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000444:	2300      	movs	r3, #0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000098 	.word	0x20000098

08000454 <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000458:	2201      	movs	r2, #1
 800045a:	4903      	ldr	r1, [pc, #12]	; (8000468 <USART1_Init+0x14>)
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <USART1_Init+0x18>)
 800045e:	f001 ff54 	bl	800230a <HAL_UART_Receive_IT>
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000009a 	.word	0x2000009a
 800046c:	200000a0 	.word	0x200000a0

08000470 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800047a:	1df9      	adds	r1, r7, #7
 800047c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000480:	2201      	movs	r2, #1
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <USART1_Send_U8+0x20>)
 8000484:	f001 feaf 	bl	80021e6 <HAL_UART_Transmit>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000a0 	.word	0x200000a0

08000494 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_UART_RxCpltCallback+0x24>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffe5 	bl	8000470 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 80004a6:	2201      	movs	r2, #1
 80004a8:	4903      	ldr	r1, [pc, #12]	; (80004b8 <HAL_UART_RxCpltCallback+0x24>)
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <HAL_UART_RxCpltCallback+0x28>)
 80004ac:	f001 ff2d 	bl	800230a <HAL_UART_Receive_IT>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000009a 	.word	0x2000009a
 80004bc:	200000a0 	.word	0x200000a0

080004c0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80004c8:	1d39      	adds	r1, r7, #4
 80004ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ce:	2201      	movs	r2, #1
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <__io_putchar+0x20>)
 80004d2:	f001 fe88 	bl	80021e6 <HAL_UART_Transmit>
    return ch;
 80004d6:	687b      	ldr	r3, [r7, #4]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000a0 	.word	0x200000a0

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a0b      	ldr	r2, [pc, #44]	; (800051c <MX_DMA_Init+0x38>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_DMA_Init+0x38>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	200e      	movs	r0, #14
 8000508:	f000 fbff 	bl	8000d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800050c:	200e      	movs	r0, #14
 800050e:	f000 fc18 	bl	8000d42 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <MX_GPIO_Init+0xa8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <MX_GPIO_Init+0xa8>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <MX_GPIO_Init+0xa8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0310 	and.w	r3, r3, #16
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_GPIO_Init+0xa8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_GPIO_Init+0xa8>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_GPIO_Init+0xa8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_GPIO_Init+0xa8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <MX_GPIO_Init+0xa8>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_GPIO_Init+0xa8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f242 0120 	movw	r1, #8224	; 0x2020
 8000582:	4812      	ldr	r0, [pc, #72]	; (80005cc <MX_GPIO_Init+0xac>)
 8000584:	f001 f997 	bl	80018b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8000588:	f242 0320 	movw	r3, #8224	; 0x2020
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2302      	movs	r3, #2
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	480a      	ldr	r0, [pc, #40]	; (80005cc <MX_GPIO_Init+0xac>)
 80005a2:	f000 ffdd 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80005a6:	2304      	movs	r3, #4
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_GPIO_Init+0xb0>)
 80005ba:	f000 ffd1 	bl	8001560 <HAL_GPIO_Init>

}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40011000 	.word	0x40011000
 80005d0:	40011400 	.word	0x40011400

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fa3a 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f80b 	bl	80005f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f7ff ff9e 	bl	8000520 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f966 	bl	80008b4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80005e8:	f7ff ff7c 	bl	80004e4 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 80005ec:	f7ff fe34 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 80005f0:	f7ff fe3c 	bl	800026c <Bsp_Loop>
 80005f4:	e7fc      	b.n	80005f0 <main+0x1c>

080005f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b090      	sub	sp, #64	; 0x40
 80005fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	2228      	movs	r2, #40	; 0x28
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fb03 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000634:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000638:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f96a 	bl	8001918 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800064a:	f000 f819 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fbd7 	bl	8001e1c <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000674:	f000 f804 	bl	8000680 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3740      	adds	r7, #64	; 0x40
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <HAL_MspInit+0x5c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_MspInit+0x5c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_MspInit+0x5c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x5c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_MspInit+0x60>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_MspInit+0x60>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000736:	f000 f9d1 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <DMA1_Channel4_IRQHandler+0x10>)
 8000746:	f000 fccf 	bl	80010e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000e4 	.word	0x200000e4

08000754 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <USART1_IRQHandler+0x10>)
 800075a:	f001 fe07 	bl	800236c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000a0 	.word	0x200000a0

08000768 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	e00a      	b.n	8000790 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800077a:	f3af 8000 	nop.w
 800077e:	4601      	mov	r1, r0
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	60ba      	str	r2, [r7, #8]
 8000786:	b2ca      	uxtb	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf0      	blt.n	800077a <_read+0x12>
	}

return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	e009      	b.n	80007c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe7f 	bl	80004c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbf1      	blt.n	80007b4 <_write+0x12>
	}
	return len;
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <_close>:

int _close(int file)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	return -1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000800:	605a      	str	r2, [r3, #4]
	return 0;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <_isatty>:

int _isatty(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	return 1;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
	...

0800083c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <_sbrk+0x5c>)
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <_sbrk+0x60>)
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <_sbrk+0x64>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <_sbrk+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d207      	bcs.n	800087c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800086c:	f002 f9a6 	bl	8002bbc <__errno>
 8000870:	4603      	mov	r3, r0
 8000872:	220c      	movs	r2, #12
 8000874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	e009      	b.n	8000890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <_sbrk+0x64>)
 800088c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000c000 	.word	0x2000c000
 800089c:	00000400 	.word	0x00000400
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	20000140 	.word	0x20000140

080008a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART1_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008ec:	f001 fc2e 	bl	800214c <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f7ff fec3 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000a0 	.word	0x200000a0
 8000904:	40013800 	.word	0x40013800

08000908 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <HAL_UART_MspInit+0xe8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d15f      	bne.n	80009e8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000928:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <HAL_UART_MspInit+0xec>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <HAL_UART_MspInit+0xec>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <HAL_UART_MspInit+0xec>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <HAL_UART_MspInit+0xec>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a2b      	ldr	r2, [pc, #172]	; (80009f4 <HAL_UART_MspInit+0xec>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <HAL_UART_MspInit+0xec>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	4822      	ldr	r0, [pc, #136]	; (80009f8 <HAL_UART_MspInit+0xf0>)
 800096e:	f000 fdf7 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	481c      	ldr	r0, [pc, #112]	; (80009f8 <HAL_UART_MspInit+0xf0>)
 8000988:	f000 fdea 	bl	8001560 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_UART_MspInit+0xf4>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0xf8>)
 8000990:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_UART_MspInit+0xf4>)
 8000994:	2210      	movs	r2, #16
 8000996:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0xf4>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009be:	f000 f9db 	bl	8000d78 <HAL_DMA_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80009c8:	f7ff fe5a 	bl	8000680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_UART_MspInit+0xf4>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2025      	movs	r0, #37	; 0x25
 80009de:	f000 f994 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009e2:	2025      	movs	r0, #37	; 0x25
 80009e4:	f000 f9ad 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40013800 	.word	0x40013800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	200000e4 	.word	0x200000e4
 8000a00:	40020044 	.word	0x40020044

08000a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ff3d 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 f8cb 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fdcf 	bl	80005d4 <main>
  bx lr
 8000a36:	4770      	bx	lr
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a40:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8000a44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a48:	2000013c 	.word	0x2000013c

08000a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_2_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x28>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x28>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f947 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fe0e 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f95f 	bl	8000d5e <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f927 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000128 	.word	0x20000128

08000b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20000128 	.word	0x20000128

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fff0 	bl	8000b00 <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffe0 	bl	8000b00 <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <__NVIC_EnableIRQ+0x34>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff90 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff2d 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff42 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff90 	bl	8000c4c <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5f 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff35 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e059      	b.n	8000e42 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_DMA_Init+0xd4>)
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d80f      	bhi.n	8000dba <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_DMA_Init+0xd8>)
 8000da2:	4413      	add	r3, r2
 8000da4:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <HAL_DMA_Init+0xdc>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	009a      	lsls	r2, r3, #2
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <HAL_DMA_Init+0xe0>)
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000db8:	e00e      	b.n	8000dd8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_DMA_Init+0xe4>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_DMA_Init+0xdc>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	009a      	lsls	r2, r3, #2
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_DMA_Init+0xe8>)
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2202      	movs	r2, #2
 8000ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40020407 	.word	0x40020407
 8000e50:	bffdfff8 	.word	0xbffdfff8
 8000e54:	cccccccd 	.word	0xcccccccd
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	bffdfbf8 	.word	0xbffdfbf8
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d008      	beq.n	8000e8c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e020      	b.n	8000ece <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 020e 	bic.w	r2, r2, #14
 8000e9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d005      	beq.n	8000efa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e0d6      	b.n	80010a8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <HAL_DMA_Abort_IT+0x1dc>)
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d958      	bls.n	8000fd8 <HAL_DMA_Abort_IT+0x100>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a63      	ldr	r2, [pc, #396]	; (80010b8 <HAL_DMA_Abort_IT+0x1e0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d04f      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xf8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a61      	ldr	r2, [pc, #388]	; (80010bc <HAL_DMA_Abort_IT+0x1e4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d048      	beq.n	8000fcc <HAL_DMA_Abort_IT+0xf4>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a60      	ldr	r2, [pc, #384]	; (80010c0 <HAL_DMA_Abort_IT+0x1e8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d040      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0xee>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a5e      	ldr	r2, [pc, #376]	; (80010c4 <HAL_DMA_Abort_IT+0x1ec>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d038      	beq.n	8000fc0 <HAL_DMA_Abort_IT+0xe8>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a5d      	ldr	r2, [pc, #372]	; (80010c8 <HAL_DMA_Abort_IT+0x1f0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d030      	beq.n	8000fba <HAL_DMA_Abort_IT+0xe2>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a5b      	ldr	r2, [pc, #364]	; (80010cc <HAL_DMA_Abort_IT+0x1f4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d028      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0xdc>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <HAL_DMA_Abort_IT+0x1dc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d020      	beq.n	8000fae <HAL_DMA_Abort_IT+0xd6>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <HAL_DMA_Abort_IT+0x1f8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_DMA_Abort_IT+0xd2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_DMA_Abort_IT+0x1fc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d012      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0xce>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a54      	ldr	r2, [pc, #336]	; (80010d8 <HAL_DMA_Abort_IT+0x200>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00a      	beq.n	8000fa0 <HAL_DMA_Abort_IT+0xc8>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a53      	ldr	r2, [pc, #332]	; (80010dc <HAL_DMA_Abort_IT+0x204>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d102      	bne.n	8000f9a <HAL_DMA_Abort_IT+0xc2>
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	e01b      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9e:	e018      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	e015      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	e013      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e011      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb2:	e00e      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fb8:	e00b      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbe:	e008      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	e005      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fca:	e002      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fcc:	2310      	movs	r3, #16
 8000fce:	e000      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xfa>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	4a43      	ldr	r2, [pc, #268]	; (80010e0 <HAL_DMA_Abort_IT+0x208>)
 8000fd4:	6053      	str	r3, [r2, #4]
 8000fd6:	e057      	b.n	8001088 <HAL_DMA_Abort_IT+0x1b0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a36      	ldr	r2, [pc, #216]	; (80010b8 <HAL_DMA_Abort_IT+0x1e0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d04f      	beq.n	8001082 <HAL_DMA_Abort_IT+0x1aa>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a35      	ldr	r2, [pc, #212]	; (80010bc <HAL_DMA_Abort_IT+0x1e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d048      	beq.n	800107e <HAL_DMA_Abort_IT+0x1a6>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a33      	ldr	r2, [pc, #204]	; (80010c0 <HAL_DMA_Abort_IT+0x1e8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d040      	beq.n	8001078 <HAL_DMA_Abort_IT+0x1a0>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_DMA_Abort_IT+0x1ec>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d038      	beq.n	8001072 <HAL_DMA_Abort_IT+0x19a>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <HAL_DMA_Abort_IT+0x1f0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d030      	beq.n	800106c <HAL_DMA_Abort_IT+0x194>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <HAL_DMA_Abort_IT+0x1f4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d028      	beq.n	8001066 <HAL_DMA_Abort_IT+0x18e>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a26      	ldr	r2, [pc, #152]	; (80010b4 <HAL_DMA_Abort_IT+0x1dc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d020      	beq.n	8001060 <HAL_DMA_Abort_IT+0x188>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a2b      	ldr	r2, [pc, #172]	; (80010d0 <HAL_DMA_Abort_IT+0x1f8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d019      	beq.n	800105c <HAL_DMA_Abort_IT+0x184>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <HAL_DMA_Abort_IT+0x1fc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d012      	beq.n	8001058 <HAL_DMA_Abort_IT+0x180>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_DMA_Abort_IT+0x200>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00a      	beq.n	8001052 <HAL_DMA_Abort_IT+0x17a>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_DMA_Abort_IT+0x204>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d102      	bne.n	800104c <HAL_DMA_Abort_IT+0x174>
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	e01b      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 800104c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001050:	e018      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	e015      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 8001058:	2310      	movs	r3, #16
 800105a:	e013      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 800105c:	2301      	movs	r3, #1
 800105e:	e011      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 8001060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001064:	e00e      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 8001066:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800106a:	e00b      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	e008      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	e005      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 8001078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107c:	e002      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 800107e:	2310      	movs	r3, #16
 8001080:	e000      	b.n	8001084 <HAL_DMA_Abort_IT+0x1ac>
 8001082:	2301      	movs	r3, #1
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <HAL_DMA_Abort_IT+0x20c>)
 8001086:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3
    } 
  }
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020080 	.word	0x40020080
 80010b8:	40020008 	.word	0x40020008
 80010bc:	4002001c 	.word	0x4002001c
 80010c0:	40020030 	.word	0x40020030
 80010c4:	40020044 	.word	0x40020044
 80010c8:	40020058 	.word	0x40020058
 80010cc:	4002006c 	.word	0x4002006c
 80010d0:	40020408 	.word	0x40020408
 80010d4:	4002041c 	.word	0x4002041c
 80010d8:	40020430 	.word	0x40020430
 80010dc:	40020444 	.word	0x40020444
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	2204      	movs	r2, #4
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80f1 	beq.w	80012f4 <HAL_DMA_IRQHandler+0x20c>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80eb 	beq.w	80012f4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	2b00      	cmp	r3, #0
 800112a:	d107      	bne.n	800113c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0204 	bic.w	r2, r2, #4
 800113a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <HAL_DMA_IRQHandler+0x1d8>)
 8001144:	429a      	cmp	r2, r3
 8001146:	d958      	bls.n	80011fa <HAL_DMA_IRQHandler+0x112>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a5d      	ldr	r2, [pc, #372]	; (80012c4 <HAL_DMA_IRQHandler+0x1dc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d04f      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x10a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a5c      	ldr	r2, [pc, #368]	; (80012c8 <HAL_DMA_IRQHandler+0x1e0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d048      	beq.n	80011ee <HAL_DMA_IRQHandler+0x106>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a5a      	ldr	r2, [pc, #360]	; (80012cc <HAL_DMA_IRQHandler+0x1e4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d040      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x100>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a59      	ldr	r2, [pc, #356]	; (80012d0 <HAL_DMA_IRQHandler+0x1e8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d038      	beq.n	80011e2 <HAL_DMA_IRQHandler+0xfa>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a57      	ldr	r2, [pc, #348]	; (80012d4 <HAL_DMA_IRQHandler+0x1ec>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d030      	beq.n	80011dc <HAL_DMA_IRQHandler+0xf4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a56      	ldr	r2, [pc, #344]	; (80012d8 <HAL_DMA_IRQHandler+0x1f0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d028      	beq.n	80011d6 <HAL_DMA_IRQHandler+0xee>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a4d      	ldr	r2, [pc, #308]	; (80012c0 <HAL_DMA_IRQHandler+0x1d8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d020      	beq.n	80011d0 <HAL_DMA_IRQHandler+0xe8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_DMA_IRQHandler+0x1f4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d019      	beq.n	80011cc <HAL_DMA_IRQHandler+0xe4>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_DMA_IRQHandler+0x1f8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d012      	beq.n	80011c8 <HAL_DMA_IRQHandler+0xe0>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_DMA_IRQHandler+0x1fc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00a      	beq.n	80011c2 <HAL_DMA_IRQHandler+0xda>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_DMA_IRQHandler+0x200>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d102      	bne.n	80011bc <HAL_DMA_IRQHandler+0xd4>
 80011b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ba:	e01b      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011c0:	e018      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c6:	e015      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	e013      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011cc:	2304      	movs	r3, #4
 80011ce:	e011      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011d4:	e00e      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011da:	e00b      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011e0:	e008      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e6:	e005      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	e002      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011ee:	2340      	movs	r3, #64	; 0x40
 80011f0:	e000      	b.n	80011f4 <HAL_DMA_IRQHandler+0x10c>
 80011f2:	2304      	movs	r3, #4
 80011f4:	4a3d      	ldr	r2, [pc, #244]	; (80012ec <HAL_DMA_IRQHandler+0x204>)
 80011f6:	6053      	str	r3, [r2, #4]
 80011f8:	e057      	b.n	80012aa <HAL_DMA_IRQHandler+0x1c2>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a31      	ldr	r2, [pc, #196]	; (80012c4 <HAL_DMA_IRQHandler+0x1dc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d04f      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x1bc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <HAL_DMA_IRQHandler+0x1e0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d048      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x1b8>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2e      	ldr	r2, [pc, #184]	; (80012cc <HAL_DMA_IRQHandler+0x1e4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d040      	beq.n	800129a <HAL_DMA_IRQHandler+0x1b2>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a2c      	ldr	r2, [pc, #176]	; (80012d0 <HAL_DMA_IRQHandler+0x1e8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d038      	beq.n	8001294 <HAL_DMA_IRQHandler+0x1ac>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a2b      	ldr	r2, [pc, #172]	; (80012d4 <HAL_DMA_IRQHandler+0x1ec>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d030      	beq.n	800128e <HAL_DMA_IRQHandler+0x1a6>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <HAL_DMA_IRQHandler+0x1f0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d028      	beq.n	8001288 <HAL_DMA_IRQHandler+0x1a0>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <HAL_DMA_IRQHandler+0x1d8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d020      	beq.n	8001282 <HAL_DMA_IRQHandler+0x19a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a25      	ldr	r2, [pc, #148]	; (80012dc <HAL_DMA_IRQHandler+0x1f4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_DMA_IRQHandler+0x196>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a24      	ldr	r2, [pc, #144]	; (80012e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d012      	beq.n	800127a <HAL_DMA_IRQHandler+0x192>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <HAL_DMA_IRQHandler+0x1fc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00a      	beq.n	8001274 <HAL_DMA_IRQHandler+0x18c>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_DMA_IRQHandler+0x200>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d102      	bne.n	800126e <HAL_DMA_IRQHandler+0x186>
 8001268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800126c:	e01b      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 800126e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001272:	e018      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 8001274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001278:	e015      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	e013      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 800127e:	2304      	movs	r3, #4
 8001280:	e011      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 8001282:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001286:	e00e      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 8001288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800128c:	e00b      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 800128e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001292:	e008      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 8001294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001298:	e005      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	e002      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	e000      	b.n	80012a6 <HAL_DMA_IRQHandler+0x1be>
 80012a4:	2304      	movs	r3, #4
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_DMA_IRQHandler+0x208>)
 80012a8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8136 	beq.w	8001520 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	e130      	b.n	8001520 <HAL_DMA_IRQHandler+0x438>
 80012be:	bf00      	nop
 80012c0:	40020080 	.word	0x40020080
 80012c4:	40020008 	.word	0x40020008
 80012c8:	4002001c 	.word	0x4002001c
 80012cc:	40020030 	.word	0x40020030
 80012d0:	40020044 	.word	0x40020044
 80012d4:	40020058 	.word	0x40020058
 80012d8:	4002006c 	.word	0x4002006c
 80012dc:	40020408 	.word	0x40020408
 80012e0:	4002041c 	.word	0x4002041c
 80012e4:	40020430 	.word	0x40020430
 80012e8:	40020444 	.word	0x40020444
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2202      	movs	r2, #2
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80dd 	beq.w	80014c0 <HAL_DMA_IRQHandler+0x3d8>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80d7 	beq.w	80014c0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10b      	bne.n	8001338 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 020a 	bic.w	r2, r2, #10
 800132e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b7b      	ldr	r3, [pc, #492]	; (800152c <HAL_DMA_IRQHandler+0x444>)
 8001340:	429a      	cmp	r2, r3
 8001342:	d958      	bls.n	80013f6 <HAL_DMA_IRQHandler+0x30e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a79      	ldr	r2, [pc, #484]	; (8001530 <HAL_DMA_IRQHandler+0x448>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d04f      	beq.n	80013ee <HAL_DMA_IRQHandler+0x306>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a78      	ldr	r2, [pc, #480]	; (8001534 <HAL_DMA_IRQHandler+0x44c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d048      	beq.n	80013ea <HAL_DMA_IRQHandler+0x302>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a76      	ldr	r2, [pc, #472]	; (8001538 <HAL_DMA_IRQHandler+0x450>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d040      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x2fc>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a75      	ldr	r2, [pc, #468]	; (800153c <HAL_DMA_IRQHandler+0x454>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d038      	beq.n	80013de <HAL_DMA_IRQHandler+0x2f6>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a73      	ldr	r2, [pc, #460]	; (8001540 <HAL_DMA_IRQHandler+0x458>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d030      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x2f0>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a72      	ldr	r2, [pc, #456]	; (8001544 <HAL_DMA_IRQHandler+0x45c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d028      	beq.n	80013d2 <HAL_DMA_IRQHandler+0x2ea>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a69      	ldr	r2, [pc, #420]	; (800152c <HAL_DMA_IRQHandler+0x444>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d020      	beq.n	80013cc <HAL_DMA_IRQHandler+0x2e4>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a6e      	ldr	r2, [pc, #440]	; (8001548 <HAL_DMA_IRQHandler+0x460>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d019      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x2e0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6c      	ldr	r2, [pc, #432]	; (800154c <HAL_DMA_IRQHandler+0x464>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d012      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x2dc>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6b      	ldr	r2, [pc, #428]	; (8001550 <HAL_DMA_IRQHandler+0x468>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d00a      	beq.n	80013be <HAL_DMA_IRQHandler+0x2d6>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a69      	ldr	r2, [pc, #420]	; (8001554 <HAL_DMA_IRQHandler+0x46c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d102      	bne.n	80013b8 <HAL_DMA_IRQHandler+0x2d0>
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	e01b      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013bc:	e018      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c2:	e015      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013c4:	2320      	movs	r3, #32
 80013c6:	e013      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e011      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d0:	e00e      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013d6:	e00b      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013dc:	e008      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	e005      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e8:	e002      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013ea:	2320      	movs	r3, #32
 80013ec:	e000      	b.n	80013f0 <HAL_DMA_IRQHandler+0x308>
 80013ee:	2302      	movs	r3, #2
 80013f0:	4a59      	ldr	r2, [pc, #356]	; (8001558 <HAL_DMA_IRQHandler+0x470>)
 80013f2:	6053      	str	r3, [r2, #4]
 80013f4:	e057      	b.n	80014a6 <HAL_DMA_IRQHandler+0x3be>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a4d      	ldr	r2, [pc, #308]	; (8001530 <HAL_DMA_IRQHandler+0x448>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d04f      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x3b8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <HAL_DMA_IRQHandler+0x44c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d048      	beq.n	800149c <HAL_DMA_IRQHandler+0x3b4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_DMA_IRQHandler+0x450>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d040      	beq.n	8001496 <HAL_DMA_IRQHandler+0x3ae>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_DMA_IRQHandler+0x454>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d038      	beq.n	8001490 <HAL_DMA_IRQHandler+0x3a8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_DMA_IRQHandler+0x458>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d030      	beq.n	800148a <HAL_DMA_IRQHandler+0x3a2>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <HAL_DMA_IRQHandler+0x45c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d028      	beq.n	8001484 <HAL_DMA_IRQHandler+0x39c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a3d      	ldr	r2, [pc, #244]	; (800152c <HAL_DMA_IRQHandler+0x444>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d020      	beq.n	800147e <HAL_DMA_IRQHandler+0x396>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a41      	ldr	r2, [pc, #260]	; (8001548 <HAL_DMA_IRQHandler+0x460>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d019      	beq.n	800147a <HAL_DMA_IRQHandler+0x392>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a40      	ldr	r2, [pc, #256]	; (800154c <HAL_DMA_IRQHandler+0x464>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d012      	beq.n	8001476 <HAL_DMA_IRQHandler+0x38e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <HAL_DMA_IRQHandler+0x468>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00a      	beq.n	8001470 <HAL_DMA_IRQHandler+0x388>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <HAL_DMA_IRQHandler+0x46c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <HAL_DMA_IRQHandler+0x382>
 8001464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001468:	e01b      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 800146a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146e:	e018      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 8001470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001474:	e015      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 8001476:	2320      	movs	r3, #32
 8001478:	e013      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 800147a:	2302      	movs	r3, #2
 800147c:	e011      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 800147e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001482:	e00e      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 8001484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001488:	e00b      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 800148a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148e:	e008      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 8001490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001494:	e005      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 8001496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149a:	e002      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 800149c:	2320      	movs	r3, #32
 800149e:	e000      	b.n	80014a2 <HAL_DMA_IRQHandler+0x3ba>
 80014a0:	2302      	movs	r3, #2
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <HAL_DMA_IRQHandler+0x474>)
 80014a4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d034      	beq.n	8001520 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014be:	e02f      	b.n	8001520 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	2208      	movs	r2, #8
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d028      	beq.n	8001522 <HAL_DMA_IRQHandler+0x43a>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 020e 	bic.w	r2, r2, #14
 80014e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    }
  }
  return;
 8001520:	bf00      	nop
 8001522:	bf00      	nop
}
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020080 	.word	0x40020080
 8001530:	40020008 	.word	0x40020008
 8001534:	4002001c 	.word	0x4002001c
 8001538:	40020030 	.word	0x40020030
 800153c:	40020044 	.word	0x40020044
 8001540:	40020058 	.word	0x40020058
 8001544:	4002006c 	.word	0x4002006c
 8001548:	40020408 	.word	0x40020408
 800154c:	4002041c 	.word	0x4002041c
 8001550:	40020430 	.word	0x40020430
 8001554:	40020444 	.word	0x40020444
 8001558:	40020400 	.word	0x40020400
 800155c:	40020000 	.word	0x40020000

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b08b      	sub	sp, #44	; 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e179      	b.n	8001868 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001574:	2201      	movs	r2, #1
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8168 	bne.w	8001862 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a96      	ldr	r2, [pc, #600]	; (80017f0 <HAL_GPIO_Init+0x290>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d05e      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 800159c:	4a94      	ldr	r2, [pc, #592]	; (80017f0 <HAL_GPIO_Init+0x290>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d875      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015a2:	4a94      	ldr	r2, [pc, #592]	; (80017f4 <HAL_GPIO_Init+0x294>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d058      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015a8:	4a92      	ldr	r2, [pc, #584]	; (80017f4 <HAL_GPIO_Init+0x294>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d86f      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015ae:	4a92      	ldr	r2, [pc, #584]	; (80017f8 <HAL_GPIO_Init+0x298>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d052      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015b4:	4a90      	ldr	r2, [pc, #576]	; (80017f8 <HAL_GPIO_Init+0x298>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d869      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015ba:	4a90      	ldr	r2, [pc, #576]	; (80017fc <HAL_GPIO_Init+0x29c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d04c      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015c0:	4a8e      	ldr	r2, [pc, #568]	; (80017fc <HAL_GPIO_Init+0x29c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d863      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015c6:	4a8e      	ldr	r2, [pc, #568]	; (8001800 <HAL_GPIO_Init+0x2a0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d046      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015cc:	4a8c      	ldr	r2, [pc, #560]	; (8001800 <HAL_GPIO_Init+0x2a0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d85d      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d82a      	bhi.n	800162c <HAL_GPIO_Init+0xcc>
 80015d6:	2b12      	cmp	r3, #18
 80015d8:	d859      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015da:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <HAL_GPIO_Init+0x80>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	0800165b 	.word	0x0800165b
 80015e4:	08001635 	.word	0x08001635
 80015e8:	08001647 	.word	0x08001647
 80015ec:	08001689 	.word	0x08001689
 80015f0:	0800168f 	.word	0x0800168f
 80015f4:	0800168f 	.word	0x0800168f
 80015f8:	0800168f 	.word	0x0800168f
 80015fc:	0800168f 	.word	0x0800168f
 8001600:	0800168f 	.word	0x0800168f
 8001604:	0800168f 	.word	0x0800168f
 8001608:	0800168f 	.word	0x0800168f
 800160c:	0800168f 	.word	0x0800168f
 8001610:	0800168f 	.word	0x0800168f
 8001614:	0800168f 	.word	0x0800168f
 8001618:	0800168f 	.word	0x0800168f
 800161c:	0800168f 	.word	0x0800168f
 8001620:	0800168f 	.word	0x0800168f
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001651 	.word	0x08001651
 800162c:	4a75      	ldr	r2, [pc, #468]	; (8001804 <HAL_GPIO_Init+0x2a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001632:	e02c      	b.n	800168e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e029      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	3304      	adds	r3, #4
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e024      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	3308      	adds	r3, #8
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e01f      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	330c      	adds	r3, #12
 8001656:	623b      	str	r3, [r7, #32]
          break;
 8001658:	e01a      	b.n	8001690 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001662:	2304      	movs	r3, #4
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e013      	b.n	8001690 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001670:	2308      	movs	r3, #8
 8001672:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	611a      	str	r2, [r3, #16]
          break;
 800167a:	e009      	b.n	8001690 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	615a      	str	r2, [r3, #20]
          break;
 8001686:	e003      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x130>
          break;
 800168e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d801      	bhi.n	800169a <HAL_GPIO_Init+0x13a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	e001      	b.n	800169e <HAL_GPIO_Init+0x13e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2bff      	cmp	r3, #255	; 0xff
 80016a4:	d802      	bhi.n	80016ac <HAL_GPIO_Init+0x14c>
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x152>
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	3b08      	subs	r3, #8
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	210f      	movs	r1, #15
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
 80016c4:	6a39      	ldr	r1, [r7, #32]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	431a      	orrs	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80c1 	beq.w	8001862 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e0:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x2a8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2a8>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_GPIO_Init+0x2a8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f8:	4a44      	ldr	r2, [pc, #272]	; (800180c <HAL_GPIO_Init+0x2ac>)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3c      	ldr	r2, [pc, #240]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d01f      	beq.n	8001764 <HAL_GPIO_Init+0x204>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <HAL_GPIO_Init+0x2b4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d019      	beq.n	8001760 <HAL_GPIO_Init+0x200>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <HAL_GPIO_Init+0x2b8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_GPIO_Init+0x1fc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a39      	ldr	r2, [pc, #228]	; (800181c <HAL_GPIO_Init+0x2bc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00d      	beq.n	8001758 <HAL_GPIO_Init+0x1f8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a38      	ldr	r2, [pc, #224]	; (8001820 <HAL_GPIO_Init+0x2c0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0x1f4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a37      	ldr	r2, [pc, #220]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_GPIO_Init+0x1f0>
 800174c:	2305      	movs	r3, #5
 800174e:	e00a      	b.n	8001766 <HAL_GPIO_Init+0x206>
 8001750:	2306      	movs	r3, #6
 8001752:	e008      	b.n	8001766 <HAL_GPIO_Init+0x206>
 8001754:	2304      	movs	r3, #4
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x206>
 8001758:	2303      	movs	r3, #3
 800175a:	e004      	b.n	8001766 <HAL_GPIO_Init+0x206>
 800175c:	2302      	movs	r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x206>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x206>
 8001764:	2300      	movs	r3, #0
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001776:	4925      	ldr	r1, [pc, #148]	; (800180c <HAL_GPIO_Init+0x2ac>)
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4924      	ldr	r1, [pc, #144]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4920      	ldr	r1, [pc, #128]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	491a      	ldr	r1, [pc, #104]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d025      	beq.n	800182c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4910      	ldr	r1, [pc, #64]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
 80017ec:	e025      	b.n	800183a <HAL_GPIO_Init+0x2da>
 80017ee:	bf00      	nop
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10310000 	.word	0x10310000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	10210000 	.word	0x10210000
 8001800:	10120000 	.word	0x10120000
 8001804:	10110000 	.word	0x10110000
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40011000 	.word	0x40011000
 800181c:	40011400 	.word	0x40011400
 8001820:	40011800 	.word	0x40011800
 8001824:	40011c00 	.word	0x40011c00
 8001828:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_GPIO_Init+0x324>)
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	43db      	mvns	r3, r3
 8001834:	4913      	ldr	r1, [pc, #76]	; (8001884 <HAL_GPIO_Init+0x324>)
 8001836:	4013      	ands	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_GPIO_Init+0x324>)
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_GPIO_Init+0x324>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	60cb      	str	r3, [r1, #12]
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_GPIO_Init+0x324>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	43db      	mvns	r3, r3
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <HAL_GPIO_Init+0x324>)
 800185e:	4013      	ands	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3301      	adds	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f ae7e 	bne.w	8001574 <HAL_GPIO_Init+0x14>
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c6:	787b      	ldrb	r3, [r7, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	041a      	lsls	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	611a      	str	r2, [r3, #16]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018f8:	887a      	ldrh	r2, [r7, #2]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	041a      	lsls	r2, r3, #16
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43d9      	mvns	r1, r3
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	400b      	ands	r3, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e272      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8087 	beq.w	8001a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b04      	cmp	r3, #4
 8001942:	d00c      	beq.n	800195e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001944:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d112      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
 8001950:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195e:	4b89      	ldr	r3, [pc, #548]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x12c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d168      	bne.n	8001a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e24c      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x76>
 8001980:	4b80      	ldr	r3, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e02e      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x98>
 8001996:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7a      	ldr	r2, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a77      	ldr	r2, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01d      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0xbc>
 80019ba:	4b72      	ldr	r3, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a71      	ldr	r2, [pc, #452]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019d4:	4b6b      	ldr	r3, [pc, #428]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a67      	ldr	r2, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f884 	bl	8000b00 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff f880 	bl	8000b00 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e200      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0xe4>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f870 	bl	8000b00 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff f86c 	bl	8000b00 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1ec      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x10c>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a52:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5e:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d11c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
 8001a6a:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e1c0      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4939      	ldr	r1, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e03a      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f825 	bl	8000b00 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff f821 	bl	8000b00 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e1a1      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4927      	ldr	r1, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_RCC_OscConfig+0x270>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff f804 	bl	8000b00 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff f800 	bl	8000b00 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e180      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03a      	beq.n	8001b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d019      	beq.n	8001b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7fe ffe4 	bl	8000b00 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7fe ffe0 	bl	8000b00 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e160      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f000 fad8 	bl	8002110 <RCC_Delay>
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe ffca 	bl	8000b00 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	e00f      	b.n	8001b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe ffc6 	bl	8000b00 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d908      	bls.n	8001b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e146      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	42420000 	.word	0x42420000
 8001b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b92      	ldr	r3, [pc, #584]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e9      	bne.n	8001b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a6 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a87      	ldr	r2, [pc, #540]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7e      	ldr	r2, [pc, #504]	; (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7fe ff87 	bl	8000b00 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7fe ff83 	bl	8000b00 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e103      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b75      	ldr	r3, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x4c8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x312>
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a6e      	ldr	r2, [pc, #440]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	e02d      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x334>
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a69      	ldr	r2, [pc, #420]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a66      	ldr	r2, [pc, #408]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	e01c      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x356>
 8001c54:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a60      	ldr	r2, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x36e>
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a5a      	ldr	r2, [pc, #360]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	4b58      	ldr	r3, [pc, #352]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe ff37 	bl	8000b00 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7fe ff33 	bl	8000b00 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0b1      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ee      	beq.n	8001c96 <HAL_RCC_OscConfig+0x37e>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7fe ff21 	bl	8000b00 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7fe ff1d 	bl	8000b00 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e09b      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d061      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d146      	bne.n	8001da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7fe fef1 	bl	8000b00 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe feed 	bl	8000b00 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e06d      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4921      	ldr	r1, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a19      	ldr	r1, [r3, #32]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	491b      	ldr	r1, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fec1 	bl	8000b00 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe febd 	bl	8000b00 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e03d      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x46a>
 8001da0:	e035      	b.n	8001e0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_OscConfig+0x4cc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe feaa 	bl	8000b00 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe fea6 	bl	8000b00 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e026      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x498>
 8001dce:	e01e      	b.n	8001e0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e019      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_OscConfig+0x500>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000

08001e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0d0      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d910      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4965      	ldr	r1, [pc, #404]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0b8      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d040      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d115      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e073      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06b      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4936      	ldr	r1, [pc, #216]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fdf8 	bl	8000b00 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe fdf4 	bl	8000b00 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e053      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 020c 	and.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1eb      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d210      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4922      	ldr	r1, [pc, #136]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e032      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001faa:	f000 f821 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x1d0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fd56 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08003b7c 	.word	0x08003b7c
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b490      	push	{r4, r7}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_GetSysClockFreq+0xac>)
 8001ff8:	1d3c      	adds	r4, r7, #4
 8001ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002000:	f240 2301 	movw	r3, #513	; 0x201
 8002004:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x40>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x46>
 800202e:	e02b      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002032:	623b      	str	r3, [r7, #32]
      break;
 8002034:	e02b      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3328      	adds	r3, #40	; 0x28
 8002040:	443b      	add	r3, r7
 8002042:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002046:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d012      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0c5b      	lsrs	r3, r3, #17
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	3328      	adds	r3, #40	; 0x28
 800205e:	443b      	add	r3, r7
 8002060:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002064:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206a:	fb03 f202 	mul.w	r2, r3, r2
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	e004      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207c:	fb02 f303 	mul.w	r3, r2, r3
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	623b      	str	r3, [r7, #32]
      break;
 8002086:	e002      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800208a:	623b      	str	r3, [r7, #32]
      break;
 800208c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208e:	6a3b      	ldr	r3, [r7, #32]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bc90      	pop	{r4, r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	08003b6c 	.word	0x08003b6c
 80020a0:	40021000 	.word	0x40021000
 80020a4:	007a1200 	.word	0x007a1200
 80020a8:	003d0900 	.word	0x003d0900

080020ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b02      	ldr	r3, [pc, #8]	; (80020bc <HAL_RCC_GetHCLKFreq+0x10>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000000 	.word	0x20000000

080020c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c4:	f7ff fff2 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08003b8c 	.word	0x08003b8c

080020e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020ec:	f7ff ffde 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	0adb      	lsrs	r3, r3, #11
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4903      	ldr	r1, [pc, #12]	; (800210c <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	08003b8c 	.word	0x08003b8c

08002110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <RCC_Delay+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <RCC_Delay+0x38>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0a5b      	lsrs	r3, r3, #9
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800212c:	bf00      	nop
  }
  while (Delay --);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <RCC_Delay+0x1c>
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000000 	.word	0x20000000
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e03f      	b.n	80021de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe fbc8 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2224      	movs	r2, #36	; 0x24
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fc85 	bl	8002aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b08a      	sub	sp, #40	; 0x28
 80021ea:	af02      	add	r7, sp, #8
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	d17c      	bne.n	8002300 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_UART_Transmit+0x2c>
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e075      	b.n	8002302 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_UART_Transmit+0x3e>
 8002220:	2302      	movs	r3, #2
 8002222:	e06e      	b.n	8002302 <HAL_UART_Transmit+0x11c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2221      	movs	r2, #33	; 0x21
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800223a:	f7fe fc61 	bl	8000b00 <HAL_GetTick>
 800223e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	88fa      	ldrh	r2, [r7, #6]
 8002244:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002254:	d108      	bne.n	8002268 <HAL_UART_Transmit+0x82>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d104      	bne.n	8002268 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e003      	b.n	8002270 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002278:	e02a      	b.n	80022d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2200      	movs	r2, #0
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fa38 	bl	80026fa <UART_WaitOnFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e036      	b.n	8002302 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10b      	bne.n	80022b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	3302      	adds	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	e007      	b.n	80022c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	3301      	adds	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1cf      	bne.n	800227a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2200      	movs	r2, #0
 80022e2:	2140      	movs	r1, #64	; 0x40
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fa08 	bl	80026fa <UART_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e006      	b.n	8002302 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d11d      	bne.n	8002360 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_UART_Receive_IT+0x26>
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e016      	b.n	8002362 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_UART_Receive_IT+0x38>
 800233e:	2302      	movs	r3, #2
 8002340:	e00f      	b.n	8002362 <HAL_UART_Receive_IT+0x58>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	461a      	mov	r2, r3
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fa19 	bl	800278e <UART_Start_Receive_IT>
 800235c:	4603      	mov	r3, r0
 800235e:	e000      	b.n	8002362 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_UART_IRQHandler+0x52>
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fac9 	bl	800294e <UART_Receive_IT>
      return;
 80023bc:	e17b      	b.n	80026b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80b1 	beq.w	8002528 <HAL_UART_IRQHandler+0x1bc>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_UART_IRQHandler+0x70>
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80a6 	beq.w	8002528 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_UART_IRQHandler+0x90>
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_UART_IRQHandler+0xb0>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_UART_IRQHandler+0xd0>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00f      	beq.n	8002466 <HAL_UART_IRQHandler+0xfa>
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <HAL_UART_IRQHandler+0xee>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0208 	orr.w	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 811e 	beq.w	80026ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_UART_IRQHandler+0x11e>
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fa62 	bl	800294e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <HAL_UART_IRQHandler+0x146>
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d031      	beq.n	8002516 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f9a4 	bl	8002800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d023      	beq.n	800250e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d013      	beq.n	8002506 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	4a76      	ldr	r2, [pc, #472]	; (80026bc <HAL_UART_IRQHandler+0x350>)
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fcf4 	bl	8000ed8 <HAL_DMA_Abort_IT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002500:	4610      	mov	r0, r2
 8002502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002504:	e00e      	b.n	8002524 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8e3 	bl	80026d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250c:	e00a      	b.n	8002524 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8df 	bl	80026d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002514:	e006      	b.n	8002524 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8db 	bl	80026d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002522:	e0c3      	b.n	80026ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002524:	bf00      	nop
    return;
 8002526:	e0c1      	b.n	80026ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 80a1 	bne.w	8002674 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 809b 	beq.w	8002674 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8095 	beq.w	8002674 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d04e      	beq.n	800260c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002578:	8a3b      	ldrh	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8098 	beq.w	80026b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002584:	8a3a      	ldrh	r2, [r7, #16]
 8002586:	429a      	cmp	r2, r3
 8002588:	f080 8092 	bcs.w	80026b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8a3a      	ldrh	r2, [r7, #16]
 8002590:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b20      	cmp	r3, #32
 800259a:	d02b      	beq.n	80025f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0210 	bic.w	r2, r2, #16
 80025e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fc38 	bl	8000e64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f86d 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800260a:	e051      	b.n	80026b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002614:	b29b      	uxth	r3, r3
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d047      	beq.n	80026b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002624:	8a7b      	ldrh	r3, [r7, #18]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d044      	beq.n	80026b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002638:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0210 	bic.w	r2, r2, #16
 8002666:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002668:	8a7b      	ldrh	r3, [r7, #18]
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f839 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002672:	e01f      	b.n	80026b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_UART_IRQHandler+0x324>
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8f9 	bl	8002880 <UART_Transmit_IT>
    return;
 800268e:	e012      	b.n	80026b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_UART_IRQHandler+0x34a>
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f93a 	bl	800291e <UART_EndTransmit_IT>
    return;
 80026aa:	e004      	b.n	80026b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80026ac:	bf00      	nop
 80026ae:	e002      	b.n	80026b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80026b0:	bf00      	nop
 80026b2:	e000      	b.n	80026b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80026b4:	bf00      	nop
  }
}
 80026b6:	3728      	adds	r7, #40	; 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	08002859 	.word	0x08002859

080026c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800270a:	e02c      	b.n	8002766 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d028      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <UART_WaitOnFlagUntilTimeout+0x30>
 800271a:	f7fe f9f1 	bl	8000b00 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	429a      	cmp	r2, r3
 8002728:	d21d      	bcs.n	8002766 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002738:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e00f      	b.n	8002786 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4013      	ands	r3, r2
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	429a      	cmp	r2, r3
 8002782:	d0c3      	beq.n	800270c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	88fa      	ldrh	r2, [r7, #6]
 80027a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2222      	movs	r2, #34	; 0x22
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002816:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0210 	bic.w	r2, r2, #16
 800283e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff ff2d 	bl	80026d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b21      	cmp	r3, #33	; 0x21
 8002892:	d13e      	bne.n	8002912 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	d114      	bne.n	80028c8 <UART_Transmit_IT+0x48>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d110      	bne.n	80028c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	1c9a      	adds	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	621a      	str	r2, [r3, #32]
 80028c6:	e008      	b.n	80028da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	1c59      	adds	r1, r3, #1
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6211      	str	r1, [r2, #32]
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4619      	mov	r1, r3
 80028e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002934:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff febe 	bl	80026c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b22      	cmp	r3, #34	; 0x22
 8002960:	f040 8099 	bne.w	8002a96 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296c:	d117      	bne.n	800299e <UART_Receive_IT+0x50>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d113      	bne.n	800299e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298c:	b29a      	uxth	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	1c9a      	adds	r2, r3, #2
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
 800299c:	e026      	b.n	80029ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d007      	beq.n	80029c2 <UART_Receive_IT+0x74>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <UART_Receive_IT+0x82>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e008      	b.n	80029e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4619      	mov	r1, r3
 80029fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d148      	bne.n	8002a92 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0220 	bic.w	r2, r2, #32
 8002a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d123      	bne.n	8002a88 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0210 	bic.w	r2, r2, #16
 8002a54:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d10a      	bne.n	8002a7a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fe2f 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
 8002a86:	e002      	b.n	8002a8e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fd fd03 	bl	8000494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e002      	b.n	8002a98 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e000      	b.n	8002a98 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ada:	f023 030c 	bic.w	r3, r3, #12
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <UART_SetConfig+0x114>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d103      	bne.n	8002b10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b08:	f7ff faee 	bl	80020e8 <HAL_RCC_GetPCLK2Freq>
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	e002      	b.n	8002b16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b10:	f7ff fad6 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8002b14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009a      	lsls	r2, r3, #2
 8002b20:	441a      	add	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <UART_SetConfig+0x118>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	0119      	lsls	r1, r3, #4
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009a      	lsls	r2, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <UART_SetConfig+0x118>)
 8002b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2064      	movs	r0, #100	; 0x64
 8002b56:	fb00 f303 	mul.w	r3, r0, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	3332      	adds	r3, #50	; 0x32
 8002b60:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <UART_SetConfig+0x118>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	4419      	add	r1, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <UART_SetConfig+0x118>)
 8002b86:	fba3 0302 	umull	r0, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2064      	movs	r0, #100	; 0x64
 8002b8e:	fb00 f303 	mul.w	r3, r0, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	3332      	adds	r3, #50	; 0x32
 8002b98:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <UART_SetConfig+0x118>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	440a      	add	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	51eb851f 	.word	0x51eb851f

08002bbc <__errno>:
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <__errno+0x8>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	2600      	movs	r6, #0
 8002bcc:	4d0c      	ldr	r5, [pc, #48]	; (8002c00 <__libc_init_array+0x38>)
 8002bce:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bd0:	1b64      	subs	r4, r4, r5
 8002bd2:	10a4      	asrs	r4, r4, #2
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	f000 ffb6 	bl	8003b48 <_init>
 8002bdc:	2600      	movs	r6, #0
 8002bde:	4d0a      	ldr	r5, [pc, #40]	; (8002c08 <__libc_init_array+0x40>)
 8002be0:	4c0a      	ldr	r4, [pc, #40]	; (8002c0c <__libc_init_array+0x44>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08003c2c 	.word	0x08003c2c
 8002c04:	08003c2c 	.word	0x08003c2c
 8002c08:	08003c2c 	.word	0x08003c2c
 8002c0c:	08003c30 	.word	0x08003c30

08002c10 <memset>:
 8002c10:	4603      	mov	r3, r0
 8002c12:	4402      	add	r2, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <iprintf>:
 8002c20:	b40f      	push	{r0, r1, r2, r3}
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <iprintf+0x2c>)
 8002c24:	b513      	push	{r0, r1, r4, lr}
 8002c26:	681c      	ldr	r4, [r3, #0]
 8002c28:	b124      	cbz	r4, 8002c34 <iprintf+0x14>
 8002c2a:	69a3      	ldr	r3, [r4, #24]
 8002c2c:	b913      	cbnz	r3, 8002c34 <iprintf+0x14>
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f000 f866 	bl	8002d00 <__sinit>
 8002c34:	ab05      	add	r3, sp, #20
 8002c36:	4620      	mov	r0, r4
 8002c38:	9a04      	ldr	r2, [sp, #16]
 8002c3a:	68a1      	ldr	r1, [r4, #8]
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	f000 f9bb 	bl	8002fb8 <_vfiprintf_r>
 8002c42:	b002      	add	sp, #8
 8002c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c48:	b004      	add	sp, #16
 8002c4a:	4770      	bx	lr
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <std>:
 8002c50:	2300      	movs	r3, #0
 8002c52:	b510      	push	{r4, lr}
 8002c54:	4604      	mov	r4, r0
 8002c56:	e9c0 3300 	strd	r3, r3, [r0]
 8002c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c5e:	6083      	str	r3, [r0, #8]
 8002c60:	8181      	strh	r1, [r0, #12]
 8002c62:	6643      	str	r3, [r0, #100]	; 0x64
 8002c64:	81c2      	strh	r2, [r0, #14]
 8002c66:	6183      	str	r3, [r0, #24]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	305c      	adds	r0, #92	; 0x5c
 8002c6e:	f7ff ffcf 	bl	8002c10 <memset>
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <std+0x38>)
 8002c74:	6224      	str	r4, [r4, #32]
 8002c76:	6263      	str	r3, [r4, #36]	; 0x24
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <std+0x3c>)
 8002c7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <std+0x40>)
 8002c7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <std+0x44>)
 8002c82:	6323      	str	r3, [r4, #48]	; 0x30
 8002c84:	bd10      	pop	{r4, pc}
 8002c86:	bf00      	nop
 8002c88:	08003565 	.word	0x08003565
 8002c8c:	08003587 	.word	0x08003587
 8002c90:	080035bf 	.word	0x080035bf
 8002c94:	080035e3 	.word	0x080035e3

08002c98 <_cleanup_r>:
 8002c98:	4901      	ldr	r1, [pc, #4]	; (8002ca0 <_cleanup_r+0x8>)
 8002c9a:	f000 b8af 	b.w	8002dfc <_fwalk_reent>
 8002c9e:	bf00      	nop
 8002ca0:	080038b5 	.word	0x080038b5

08002ca4 <__sfmoreglue>:
 8002ca4:	2268      	movs	r2, #104	; 0x68
 8002ca6:	b570      	push	{r4, r5, r6, lr}
 8002ca8:	1e4d      	subs	r5, r1, #1
 8002caa:	4355      	muls	r5, r2
 8002cac:	460e      	mov	r6, r1
 8002cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002cb2:	f000 f8e5 	bl	8002e80 <_malloc_r>
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	b140      	cbz	r0, 8002ccc <__sfmoreglue+0x28>
 8002cba:	2100      	movs	r1, #0
 8002cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8002cc0:	300c      	adds	r0, #12
 8002cc2:	60a0      	str	r0, [r4, #8]
 8002cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002cc8:	f7ff ffa2 	bl	8002c10 <memset>
 8002ccc:	4620      	mov	r0, r4
 8002cce:	bd70      	pop	{r4, r5, r6, pc}

08002cd0 <__sfp_lock_acquire>:
 8002cd0:	4801      	ldr	r0, [pc, #4]	; (8002cd8 <__sfp_lock_acquire+0x8>)
 8002cd2:	f000 b8b3 	b.w	8002e3c <__retarget_lock_acquire_recursive>
 8002cd6:	bf00      	nop
 8002cd8:	2000012d 	.word	0x2000012d

08002cdc <__sfp_lock_release>:
 8002cdc:	4801      	ldr	r0, [pc, #4]	; (8002ce4 <__sfp_lock_release+0x8>)
 8002cde:	f000 b8ae 	b.w	8002e3e <__retarget_lock_release_recursive>
 8002ce2:	bf00      	nop
 8002ce4:	2000012d 	.word	0x2000012d

08002ce8 <__sinit_lock_acquire>:
 8002ce8:	4801      	ldr	r0, [pc, #4]	; (8002cf0 <__sinit_lock_acquire+0x8>)
 8002cea:	f000 b8a7 	b.w	8002e3c <__retarget_lock_acquire_recursive>
 8002cee:	bf00      	nop
 8002cf0:	2000012e 	.word	0x2000012e

08002cf4 <__sinit_lock_release>:
 8002cf4:	4801      	ldr	r0, [pc, #4]	; (8002cfc <__sinit_lock_release+0x8>)
 8002cf6:	f000 b8a2 	b.w	8002e3e <__retarget_lock_release_recursive>
 8002cfa:	bf00      	nop
 8002cfc:	2000012e 	.word	0x2000012e

08002d00 <__sinit>:
 8002d00:	b510      	push	{r4, lr}
 8002d02:	4604      	mov	r4, r0
 8002d04:	f7ff fff0 	bl	8002ce8 <__sinit_lock_acquire>
 8002d08:	69a3      	ldr	r3, [r4, #24]
 8002d0a:	b11b      	cbz	r3, 8002d14 <__sinit+0x14>
 8002d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d10:	f7ff bff0 	b.w	8002cf4 <__sinit_lock_release>
 8002d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002d18:	6523      	str	r3, [r4, #80]	; 0x50
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <__sinit+0x68>)
 8002d1c:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <__sinit+0x6c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	bf08      	it	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	bf08      	it	eq
 8002d2c:	61a3      	streq	r3, [r4, #24]
 8002d2e:	f000 f81f 	bl	8002d70 <__sfp>
 8002d32:	6060      	str	r0, [r4, #4]
 8002d34:	4620      	mov	r0, r4
 8002d36:	f000 f81b 	bl	8002d70 <__sfp>
 8002d3a:	60a0      	str	r0, [r4, #8]
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f000 f817 	bl	8002d70 <__sfp>
 8002d42:	2200      	movs	r2, #0
 8002d44:	2104      	movs	r1, #4
 8002d46:	60e0      	str	r0, [r4, #12]
 8002d48:	6860      	ldr	r0, [r4, #4]
 8002d4a:	f7ff ff81 	bl	8002c50 <std>
 8002d4e:	2201      	movs	r2, #1
 8002d50:	2109      	movs	r1, #9
 8002d52:	68a0      	ldr	r0, [r4, #8]
 8002d54:	f7ff ff7c 	bl	8002c50 <std>
 8002d58:	2202      	movs	r2, #2
 8002d5a:	2112      	movs	r1, #18
 8002d5c:	68e0      	ldr	r0, [r4, #12]
 8002d5e:	f7ff ff77 	bl	8002c50 <std>
 8002d62:	2301      	movs	r3, #1
 8002d64:	61a3      	str	r3, [r4, #24]
 8002d66:	e7d1      	b.n	8002d0c <__sinit+0xc>
 8002d68:	08003b94 	.word	0x08003b94
 8002d6c:	08002c99 	.word	0x08002c99

08002d70 <__sfp>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	4607      	mov	r7, r0
 8002d74:	f7ff ffac 	bl	8002cd0 <__sfp_lock_acquire>
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <__sfp+0x84>)
 8002d7a:	681e      	ldr	r6, [r3, #0]
 8002d7c:	69b3      	ldr	r3, [r6, #24]
 8002d7e:	b913      	cbnz	r3, 8002d86 <__sfp+0x16>
 8002d80:	4630      	mov	r0, r6
 8002d82:	f7ff ffbd 	bl	8002d00 <__sinit>
 8002d86:	3648      	adds	r6, #72	; 0x48
 8002d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	d503      	bpl.n	8002d98 <__sfp+0x28>
 8002d90:	6833      	ldr	r3, [r6, #0]
 8002d92:	b30b      	cbz	r3, 8002dd8 <__sfp+0x68>
 8002d94:	6836      	ldr	r6, [r6, #0]
 8002d96:	e7f7      	b.n	8002d88 <__sfp+0x18>
 8002d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d9c:	b9d5      	cbnz	r5, 8002dd4 <__sfp+0x64>
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <__sfp+0x88>)
 8002da0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002da4:	60e3      	str	r3, [r4, #12]
 8002da6:	6665      	str	r5, [r4, #100]	; 0x64
 8002da8:	f000 f847 	bl	8002e3a <__retarget_lock_init_recursive>
 8002dac:	f7ff ff96 	bl	8002cdc <__sfp_lock_release>
 8002db0:	2208      	movs	r2, #8
 8002db2:	4629      	mov	r1, r5
 8002db4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002db8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002dbc:	6025      	str	r5, [r4, #0]
 8002dbe:	61a5      	str	r5, [r4, #24]
 8002dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002dc4:	f7ff ff24 	bl	8002c10 <memset>
 8002dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd4:	3468      	adds	r4, #104	; 0x68
 8002dd6:	e7d9      	b.n	8002d8c <__sfp+0x1c>
 8002dd8:	2104      	movs	r1, #4
 8002dda:	4638      	mov	r0, r7
 8002ddc:	f7ff ff62 	bl	8002ca4 <__sfmoreglue>
 8002de0:	4604      	mov	r4, r0
 8002de2:	6030      	str	r0, [r6, #0]
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d1d5      	bne.n	8002d94 <__sfp+0x24>
 8002de8:	f7ff ff78 	bl	8002cdc <__sfp_lock_release>
 8002dec:	230c      	movs	r3, #12
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	e7ee      	b.n	8002dd0 <__sfp+0x60>
 8002df2:	bf00      	nop
 8002df4:	08003b94 	.word	0x08003b94
 8002df8:	ffff0001 	.word	0xffff0001

08002dfc <_fwalk_reent>:
 8002dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e00:	4606      	mov	r6, r0
 8002e02:	4688      	mov	r8, r1
 8002e04:	2700      	movs	r7, #0
 8002e06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002e12:	d505      	bpl.n	8002e20 <_fwalk_reent+0x24>
 8002e14:	6824      	ldr	r4, [r4, #0]
 8002e16:	2c00      	cmp	r4, #0
 8002e18:	d1f7      	bne.n	8002e0a <_fwalk_reent+0xe>
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e20:	89ab      	ldrh	r3, [r5, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d907      	bls.n	8002e36 <_fwalk_reent+0x3a>
 8002e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	d003      	beq.n	8002e36 <_fwalk_reent+0x3a>
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4630      	mov	r0, r6
 8002e32:	47c0      	blx	r8
 8002e34:	4307      	orrs	r7, r0
 8002e36:	3568      	adds	r5, #104	; 0x68
 8002e38:	e7e9      	b.n	8002e0e <_fwalk_reent+0x12>

08002e3a <__retarget_lock_init_recursive>:
 8002e3a:	4770      	bx	lr

08002e3c <__retarget_lock_acquire_recursive>:
 8002e3c:	4770      	bx	lr

08002e3e <__retarget_lock_release_recursive>:
 8002e3e:	4770      	bx	lr

08002e40 <sbrk_aligned>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4e0e      	ldr	r6, [pc, #56]	; (8002e7c <sbrk_aligned+0x3c>)
 8002e44:	460c      	mov	r4, r1
 8002e46:	6831      	ldr	r1, [r6, #0]
 8002e48:	4605      	mov	r5, r0
 8002e4a:	b911      	cbnz	r1, 8002e52 <sbrk_aligned+0x12>
 8002e4c:	f000 fb7a 	bl	8003544 <_sbrk_r>
 8002e50:	6030      	str	r0, [r6, #0]
 8002e52:	4621      	mov	r1, r4
 8002e54:	4628      	mov	r0, r5
 8002e56:	f000 fb75 	bl	8003544 <_sbrk_r>
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	d00a      	beq.n	8002e74 <sbrk_aligned+0x34>
 8002e5e:	1cc4      	adds	r4, r0, #3
 8002e60:	f024 0403 	bic.w	r4, r4, #3
 8002e64:	42a0      	cmp	r0, r4
 8002e66:	d007      	beq.n	8002e78 <sbrk_aligned+0x38>
 8002e68:	1a21      	subs	r1, r4, r0
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f000 fb6a 	bl	8003544 <_sbrk_r>
 8002e70:	3001      	adds	r0, #1
 8002e72:	d101      	bne.n	8002e78 <sbrk_aligned+0x38>
 8002e74:	f04f 34ff 	mov.w	r4, #4294967295
 8002e78:	4620      	mov	r0, r4
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	20000134 	.word	0x20000134

08002e80 <_malloc_r>:
 8002e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e84:	1ccd      	adds	r5, r1, #3
 8002e86:	f025 0503 	bic.w	r5, r5, #3
 8002e8a:	3508      	adds	r5, #8
 8002e8c:	2d0c      	cmp	r5, #12
 8002e8e:	bf38      	it	cc
 8002e90:	250c      	movcc	r5, #12
 8002e92:	2d00      	cmp	r5, #0
 8002e94:	4607      	mov	r7, r0
 8002e96:	db01      	blt.n	8002e9c <_malloc_r+0x1c>
 8002e98:	42a9      	cmp	r1, r5
 8002e9a:	d905      	bls.n	8002ea8 <_malloc_r+0x28>
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ea8:	4e2e      	ldr	r6, [pc, #184]	; (8002f64 <_malloc_r+0xe4>)
 8002eaa:	f000 fdc5 	bl	8003a38 <__malloc_lock>
 8002eae:	6833      	ldr	r3, [r6, #0]
 8002eb0:	461c      	mov	r4, r3
 8002eb2:	bb34      	cbnz	r4, 8002f02 <_malloc_r+0x82>
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	f7ff ffc2 	bl	8002e40 <sbrk_aligned>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	d14d      	bne.n	8002f5e <_malloc_r+0xde>
 8002ec2:	6834      	ldr	r4, [r6, #0]
 8002ec4:	4626      	mov	r6, r4
 8002ec6:	2e00      	cmp	r6, #0
 8002ec8:	d140      	bne.n	8002f4c <_malloc_r+0xcc>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	4631      	mov	r1, r6
 8002ece:	4638      	mov	r0, r7
 8002ed0:	eb04 0803 	add.w	r8, r4, r3
 8002ed4:	f000 fb36 	bl	8003544 <_sbrk_r>
 8002ed8:	4580      	cmp	r8, r0
 8002eda:	d13a      	bne.n	8002f52 <_malloc_r+0xd2>
 8002edc:	6821      	ldr	r1, [r4, #0]
 8002ede:	3503      	adds	r5, #3
 8002ee0:	1a6d      	subs	r5, r5, r1
 8002ee2:	f025 0503 	bic.w	r5, r5, #3
 8002ee6:	3508      	adds	r5, #8
 8002ee8:	2d0c      	cmp	r5, #12
 8002eea:	bf38      	it	cc
 8002eec:	250c      	movcc	r5, #12
 8002eee:	4638      	mov	r0, r7
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7ff ffa5 	bl	8002e40 <sbrk_aligned>
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d02b      	beq.n	8002f52 <_malloc_r+0xd2>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	442b      	add	r3, r5
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	e00e      	b.n	8002f20 <_malloc_r+0xa0>
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	1b52      	subs	r2, r2, r5
 8002f06:	d41e      	bmi.n	8002f46 <_malloc_r+0xc6>
 8002f08:	2a0b      	cmp	r2, #11
 8002f0a:	d916      	bls.n	8002f3a <_malloc_r+0xba>
 8002f0c:	1961      	adds	r1, r4, r5
 8002f0e:	42a3      	cmp	r3, r4
 8002f10:	6025      	str	r5, [r4, #0]
 8002f12:	bf18      	it	ne
 8002f14:	6059      	strne	r1, [r3, #4]
 8002f16:	6863      	ldr	r3, [r4, #4]
 8002f18:	bf08      	it	eq
 8002f1a:	6031      	streq	r1, [r6, #0]
 8002f1c:	5162      	str	r2, [r4, r5]
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	4638      	mov	r0, r7
 8002f22:	f104 060b 	add.w	r6, r4, #11
 8002f26:	f000 fd8d 	bl	8003a44 <__malloc_unlock>
 8002f2a:	f026 0607 	bic.w	r6, r6, #7
 8002f2e:	1d23      	adds	r3, r4, #4
 8002f30:	1af2      	subs	r2, r6, r3
 8002f32:	d0b6      	beq.n	8002ea2 <_malloc_r+0x22>
 8002f34:	1b9b      	subs	r3, r3, r6
 8002f36:	50a3      	str	r3, [r4, r2]
 8002f38:	e7b3      	b.n	8002ea2 <_malloc_r+0x22>
 8002f3a:	6862      	ldr	r2, [r4, #4]
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	bf0c      	ite	eq
 8002f40:	6032      	streq	r2, [r6, #0]
 8002f42:	605a      	strne	r2, [r3, #4]
 8002f44:	e7ec      	b.n	8002f20 <_malloc_r+0xa0>
 8002f46:	4623      	mov	r3, r4
 8002f48:	6864      	ldr	r4, [r4, #4]
 8002f4a:	e7b2      	b.n	8002eb2 <_malloc_r+0x32>
 8002f4c:	4634      	mov	r4, r6
 8002f4e:	6876      	ldr	r6, [r6, #4]
 8002f50:	e7b9      	b.n	8002ec6 <_malloc_r+0x46>
 8002f52:	230c      	movs	r3, #12
 8002f54:	4638      	mov	r0, r7
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	f000 fd74 	bl	8003a44 <__malloc_unlock>
 8002f5c:	e7a1      	b.n	8002ea2 <_malloc_r+0x22>
 8002f5e:	6025      	str	r5, [r4, #0]
 8002f60:	e7de      	b.n	8002f20 <_malloc_r+0xa0>
 8002f62:	bf00      	nop
 8002f64:	20000130 	.word	0x20000130

08002f68 <__sfputc_r>:
 8002f68:	6893      	ldr	r3, [r2, #8]
 8002f6a:	b410      	push	{r4}
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	6093      	str	r3, [r2, #8]
 8002f72:	da07      	bge.n	8002f84 <__sfputc_r+0x1c>
 8002f74:	6994      	ldr	r4, [r2, #24]
 8002f76:	42a3      	cmp	r3, r4
 8002f78:	db01      	blt.n	8002f7e <__sfputc_r+0x16>
 8002f7a:	290a      	cmp	r1, #10
 8002f7c:	d102      	bne.n	8002f84 <__sfputc_r+0x1c>
 8002f7e:	bc10      	pop	{r4}
 8002f80:	f000 bb34 	b.w	80035ec <__swbuf_r>
 8002f84:	6813      	ldr	r3, [r2, #0]
 8002f86:	1c58      	adds	r0, r3, #1
 8002f88:	6010      	str	r0, [r2, #0]
 8002f8a:	7019      	strb	r1, [r3, #0]
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	bc10      	pop	{r4}
 8002f90:	4770      	bx	lr

08002f92 <__sfputs_r>:
 8002f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f94:	4606      	mov	r6, r0
 8002f96:	460f      	mov	r7, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	18d5      	adds	r5, r2, r3
 8002f9c:	42ac      	cmp	r4, r5
 8002f9e:	d101      	bne.n	8002fa4 <__sfputs_r+0x12>
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	e007      	b.n	8002fb4 <__sfputs_r+0x22>
 8002fa4:	463a      	mov	r2, r7
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fac:	f7ff ffdc 	bl	8002f68 <__sfputc_r>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d1f3      	bne.n	8002f9c <__sfputs_r+0xa>
 8002fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fb8 <_vfiprintf_r>:
 8002fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	4698      	mov	r8, r3
 8002fc2:	4606      	mov	r6, r0
 8002fc4:	b09d      	sub	sp, #116	; 0x74
 8002fc6:	b118      	cbz	r0, 8002fd0 <_vfiprintf_r+0x18>
 8002fc8:	6983      	ldr	r3, [r0, #24]
 8002fca:	b90b      	cbnz	r3, 8002fd0 <_vfiprintf_r+0x18>
 8002fcc:	f7ff fe98 	bl	8002d00 <__sinit>
 8002fd0:	4b89      	ldr	r3, [pc, #548]	; (80031f8 <_vfiprintf_r+0x240>)
 8002fd2:	429d      	cmp	r5, r3
 8002fd4:	d11b      	bne.n	800300e <_vfiprintf_r+0x56>
 8002fd6:	6875      	ldr	r5, [r6, #4]
 8002fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fda:	07d9      	lsls	r1, r3, #31
 8002fdc:	d405      	bmi.n	8002fea <_vfiprintf_r+0x32>
 8002fde:	89ab      	ldrh	r3, [r5, #12]
 8002fe0:	059a      	lsls	r2, r3, #22
 8002fe2:	d402      	bmi.n	8002fea <_vfiprintf_r+0x32>
 8002fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fe6:	f7ff ff29 	bl	8002e3c <__retarget_lock_acquire_recursive>
 8002fea:	89ab      	ldrh	r3, [r5, #12]
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	d501      	bpl.n	8002ff4 <_vfiprintf_r+0x3c>
 8002ff0:	692b      	ldr	r3, [r5, #16]
 8002ff2:	b9eb      	cbnz	r3, 8003030 <_vfiprintf_r+0x78>
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f000 fb5c 	bl	80036b4 <__swsetup_r>
 8002ffc:	b1c0      	cbz	r0, 8003030 <_vfiprintf_r+0x78>
 8002ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003000:	07dc      	lsls	r4, r3, #31
 8003002:	d50e      	bpl.n	8003022 <_vfiprintf_r+0x6a>
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	b01d      	add	sp, #116	; 0x74
 800300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800300e:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <_vfiprintf_r+0x244>)
 8003010:	429d      	cmp	r5, r3
 8003012:	d101      	bne.n	8003018 <_vfiprintf_r+0x60>
 8003014:	68b5      	ldr	r5, [r6, #8]
 8003016:	e7df      	b.n	8002fd8 <_vfiprintf_r+0x20>
 8003018:	4b79      	ldr	r3, [pc, #484]	; (8003200 <_vfiprintf_r+0x248>)
 800301a:	429d      	cmp	r5, r3
 800301c:	bf08      	it	eq
 800301e:	68f5      	ldreq	r5, [r6, #12]
 8003020:	e7da      	b.n	8002fd8 <_vfiprintf_r+0x20>
 8003022:	89ab      	ldrh	r3, [r5, #12]
 8003024:	0598      	lsls	r0, r3, #22
 8003026:	d4ed      	bmi.n	8003004 <_vfiprintf_r+0x4c>
 8003028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800302a:	f7ff ff08 	bl	8002e3e <__retarget_lock_release_recursive>
 800302e:	e7e9      	b.n	8003004 <_vfiprintf_r+0x4c>
 8003030:	2300      	movs	r3, #0
 8003032:	9309      	str	r3, [sp, #36]	; 0x24
 8003034:	2320      	movs	r3, #32
 8003036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800303a:	2330      	movs	r3, #48	; 0x30
 800303c:	f04f 0901 	mov.w	r9, #1
 8003040:	f8cd 800c 	str.w	r8, [sp, #12]
 8003044:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003204 <_vfiprintf_r+0x24c>
 8003048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800304c:	4623      	mov	r3, r4
 800304e:	469a      	mov	sl, r3
 8003050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003054:	b10a      	cbz	r2, 800305a <_vfiprintf_r+0xa2>
 8003056:	2a25      	cmp	r2, #37	; 0x25
 8003058:	d1f9      	bne.n	800304e <_vfiprintf_r+0x96>
 800305a:	ebba 0b04 	subs.w	fp, sl, r4
 800305e:	d00b      	beq.n	8003078 <_vfiprintf_r+0xc0>
 8003060:	465b      	mov	r3, fp
 8003062:	4622      	mov	r2, r4
 8003064:	4629      	mov	r1, r5
 8003066:	4630      	mov	r0, r6
 8003068:	f7ff ff93 	bl	8002f92 <__sfputs_r>
 800306c:	3001      	adds	r0, #1
 800306e:	f000 80aa 	beq.w	80031c6 <_vfiprintf_r+0x20e>
 8003072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003074:	445a      	add	r2, fp
 8003076:	9209      	str	r2, [sp, #36]	; 0x24
 8003078:	f89a 3000 	ldrb.w	r3, [sl]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a2 	beq.w	80031c6 <_vfiprintf_r+0x20e>
 8003082:	2300      	movs	r3, #0
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800308c:	f10a 0a01 	add.w	sl, sl, #1
 8003090:	9304      	str	r3, [sp, #16]
 8003092:	9307      	str	r3, [sp, #28]
 8003094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003098:	931a      	str	r3, [sp, #104]	; 0x68
 800309a:	4654      	mov	r4, sl
 800309c:	2205      	movs	r2, #5
 800309e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a2:	4858      	ldr	r0, [pc, #352]	; (8003204 <_vfiprintf_r+0x24c>)
 80030a4:	f000 fcba 	bl	8003a1c <memchr>
 80030a8:	9a04      	ldr	r2, [sp, #16]
 80030aa:	b9d8      	cbnz	r0, 80030e4 <_vfiprintf_r+0x12c>
 80030ac:	06d1      	lsls	r1, r2, #27
 80030ae:	bf44      	itt	mi
 80030b0:	2320      	movmi	r3, #32
 80030b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030b6:	0713      	lsls	r3, r2, #28
 80030b8:	bf44      	itt	mi
 80030ba:	232b      	movmi	r3, #43	; 0x2b
 80030bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030c0:	f89a 3000 	ldrb.w	r3, [sl]
 80030c4:	2b2a      	cmp	r3, #42	; 0x2a
 80030c6:	d015      	beq.n	80030f4 <_vfiprintf_r+0x13c>
 80030c8:	4654      	mov	r4, sl
 80030ca:	2000      	movs	r0, #0
 80030cc:	f04f 0c0a 	mov.w	ip, #10
 80030d0:	9a07      	ldr	r2, [sp, #28]
 80030d2:	4621      	mov	r1, r4
 80030d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030d8:	3b30      	subs	r3, #48	; 0x30
 80030da:	2b09      	cmp	r3, #9
 80030dc:	d94e      	bls.n	800317c <_vfiprintf_r+0x1c4>
 80030de:	b1b0      	cbz	r0, 800310e <_vfiprintf_r+0x156>
 80030e0:	9207      	str	r2, [sp, #28]
 80030e2:	e014      	b.n	800310e <_vfiprintf_r+0x156>
 80030e4:	eba0 0308 	sub.w	r3, r0, r8
 80030e8:	fa09 f303 	lsl.w	r3, r9, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	46a2      	mov	sl, r4
 80030f0:	9304      	str	r3, [sp, #16]
 80030f2:	e7d2      	b.n	800309a <_vfiprintf_r+0xe2>
 80030f4:	9b03      	ldr	r3, [sp, #12]
 80030f6:	1d19      	adds	r1, r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	9103      	str	r1, [sp, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bfbb      	ittet	lt
 8003100:	425b      	neglt	r3, r3
 8003102:	f042 0202 	orrlt.w	r2, r2, #2
 8003106:	9307      	strge	r3, [sp, #28]
 8003108:	9307      	strlt	r3, [sp, #28]
 800310a:	bfb8      	it	lt
 800310c:	9204      	strlt	r2, [sp, #16]
 800310e:	7823      	ldrb	r3, [r4, #0]
 8003110:	2b2e      	cmp	r3, #46	; 0x2e
 8003112:	d10c      	bne.n	800312e <_vfiprintf_r+0x176>
 8003114:	7863      	ldrb	r3, [r4, #1]
 8003116:	2b2a      	cmp	r3, #42	; 0x2a
 8003118:	d135      	bne.n	8003186 <_vfiprintf_r+0x1ce>
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	3402      	adds	r4, #2
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	9203      	str	r2, [sp, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	bfb8      	it	lt
 8003128:	f04f 33ff 	movlt.w	r3, #4294967295
 800312c:	9305      	str	r3, [sp, #20]
 800312e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003208 <_vfiprintf_r+0x250>
 8003132:	2203      	movs	r2, #3
 8003134:	4650      	mov	r0, sl
 8003136:	7821      	ldrb	r1, [r4, #0]
 8003138:	f000 fc70 	bl	8003a1c <memchr>
 800313c:	b140      	cbz	r0, 8003150 <_vfiprintf_r+0x198>
 800313e:	2340      	movs	r3, #64	; 0x40
 8003140:	eba0 000a 	sub.w	r0, r0, sl
 8003144:	fa03 f000 	lsl.w	r0, r3, r0
 8003148:	9b04      	ldr	r3, [sp, #16]
 800314a:	3401      	adds	r4, #1
 800314c:	4303      	orrs	r3, r0
 800314e:	9304      	str	r3, [sp, #16]
 8003150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003154:	2206      	movs	r2, #6
 8003156:	482d      	ldr	r0, [pc, #180]	; (800320c <_vfiprintf_r+0x254>)
 8003158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800315c:	f000 fc5e 	bl	8003a1c <memchr>
 8003160:	2800      	cmp	r0, #0
 8003162:	d03f      	beq.n	80031e4 <_vfiprintf_r+0x22c>
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <_vfiprintf_r+0x258>)
 8003166:	bb1b      	cbnz	r3, 80031b0 <_vfiprintf_r+0x1f8>
 8003168:	9b03      	ldr	r3, [sp, #12]
 800316a:	3307      	adds	r3, #7
 800316c:	f023 0307 	bic.w	r3, r3, #7
 8003170:	3308      	adds	r3, #8
 8003172:	9303      	str	r3, [sp, #12]
 8003174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003176:	443b      	add	r3, r7
 8003178:	9309      	str	r3, [sp, #36]	; 0x24
 800317a:	e767      	b.n	800304c <_vfiprintf_r+0x94>
 800317c:	460c      	mov	r4, r1
 800317e:	2001      	movs	r0, #1
 8003180:	fb0c 3202 	mla	r2, ip, r2, r3
 8003184:	e7a5      	b.n	80030d2 <_vfiprintf_r+0x11a>
 8003186:	2300      	movs	r3, #0
 8003188:	f04f 0c0a 	mov.w	ip, #10
 800318c:	4619      	mov	r1, r3
 800318e:	3401      	adds	r4, #1
 8003190:	9305      	str	r3, [sp, #20]
 8003192:	4620      	mov	r0, r4
 8003194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003198:	3a30      	subs	r2, #48	; 0x30
 800319a:	2a09      	cmp	r2, #9
 800319c:	d903      	bls.n	80031a6 <_vfiprintf_r+0x1ee>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0c5      	beq.n	800312e <_vfiprintf_r+0x176>
 80031a2:	9105      	str	r1, [sp, #20]
 80031a4:	e7c3      	b.n	800312e <_vfiprintf_r+0x176>
 80031a6:	4604      	mov	r4, r0
 80031a8:	2301      	movs	r3, #1
 80031aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80031ae:	e7f0      	b.n	8003192 <_vfiprintf_r+0x1da>
 80031b0:	ab03      	add	r3, sp, #12
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	462a      	mov	r2, r5
 80031b6:	4630      	mov	r0, r6
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <_vfiprintf_r+0x25c>)
 80031ba:	a904      	add	r1, sp, #16
 80031bc:	f3af 8000 	nop.w
 80031c0:	4607      	mov	r7, r0
 80031c2:	1c78      	adds	r0, r7, #1
 80031c4:	d1d6      	bne.n	8003174 <_vfiprintf_r+0x1bc>
 80031c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031c8:	07d9      	lsls	r1, r3, #31
 80031ca:	d405      	bmi.n	80031d8 <_vfiprintf_r+0x220>
 80031cc:	89ab      	ldrh	r3, [r5, #12]
 80031ce:	059a      	lsls	r2, r3, #22
 80031d0:	d402      	bmi.n	80031d8 <_vfiprintf_r+0x220>
 80031d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031d4:	f7ff fe33 	bl	8002e3e <__retarget_lock_release_recursive>
 80031d8:	89ab      	ldrh	r3, [r5, #12]
 80031da:	065b      	lsls	r3, r3, #25
 80031dc:	f53f af12 	bmi.w	8003004 <_vfiprintf_r+0x4c>
 80031e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031e2:	e711      	b.n	8003008 <_vfiprintf_r+0x50>
 80031e4:	ab03      	add	r3, sp, #12
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	462a      	mov	r2, r5
 80031ea:	4630      	mov	r0, r6
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <_vfiprintf_r+0x25c>)
 80031ee:	a904      	add	r1, sp, #16
 80031f0:	f000 f882 	bl	80032f8 <_printf_i>
 80031f4:	e7e4      	b.n	80031c0 <_vfiprintf_r+0x208>
 80031f6:	bf00      	nop
 80031f8:	08003bb8 	.word	0x08003bb8
 80031fc:	08003bd8 	.word	0x08003bd8
 8003200:	08003b98 	.word	0x08003b98
 8003204:	08003bf8 	.word	0x08003bf8
 8003208:	08003bfe 	.word	0x08003bfe
 800320c:	08003c02 	.word	0x08003c02
 8003210:	00000000 	.word	0x00000000
 8003214:	08002f93 	.word	0x08002f93

08003218 <_printf_common>:
 8003218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800321c:	4616      	mov	r6, r2
 800321e:	4699      	mov	r9, r3
 8003220:	688a      	ldr	r2, [r1, #8]
 8003222:	690b      	ldr	r3, [r1, #16]
 8003224:	4607      	mov	r7, r0
 8003226:	4293      	cmp	r3, r2
 8003228:	bfb8      	it	lt
 800322a:	4613      	movlt	r3, r2
 800322c:	6033      	str	r3, [r6, #0]
 800322e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003232:	460c      	mov	r4, r1
 8003234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003238:	b10a      	cbz	r2, 800323e <_printf_common+0x26>
 800323a:	3301      	adds	r3, #1
 800323c:	6033      	str	r3, [r6, #0]
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	0699      	lsls	r1, r3, #26
 8003242:	bf42      	ittt	mi
 8003244:	6833      	ldrmi	r3, [r6, #0]
 8003246:	3302      	addmi	r3, #2
 8003248:	6033      	strmi	r3, [r6, #0]
 800324a:	6825      	ldr	r5, [r4, #0]
 800324c:	f015 0506 	ands.w	r5, r5, #6
 8003250:	d106      	bne.n	8003260 <_printf_common+0x48>
 8003252:	f104 0a19 	add.w	sl, r4, #25
 8003256:	68e3      	ldr	r3, [r4, #12]
 8003258:	6832      	ldr	r2, [r6, #0]
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	42ab      	cmp	r3, r5
 800325e:	dc28      	bgt.n	80032b2 <_printf_common+0x9a>
 8003260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003264:	1e13      	subs	r3, r2, #0
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	bf18      	it	ne
 800326a:	2301      	movne	r3, #1
 800326c:	0692      	lsls	r2, r2, #26
 800326e:	d42d      	bmi.n	80032cc <_printf_common+0xb4>
 8003270:	4649      	mov	r1, r9
 8003272:	4638      	mov	r0, r7
 8003274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003278:	47c0      	blx	r8
 800327a:	3001      	adds	r0, #1
 800327c:	d020      	beq.n	80032c0 <_printf_common+0xa8>
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	68e5      	ldr	r5, [r4, #12]
 8003282:	f003 0306 	and.w	r3, r3, #6
 8003286:	2b04      	cmp	r3, #4
 8003288:	bf18      	it	ne
 800328a:	2500      	movne	r5, #0
 800328c:	6832      	ldr	r2, [r6, #0]
 800328e:	f04f 0600 	mov.w	r6, #0
 8003292:	68a3      	ldr	r3, [r4, #8]
 8003294:	bf08      	it	eq
 8003296:	1aad      	subeq	r5, r5, r2
 8003298:	6922      	ldr	r2, [r4, #16]
 800329a:	bf08      	it	eq
 800329c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bfc4      	itt	gt
 80032a4:	1a9b      	subgt	r3, r3, r2
 80032a6:	18ed      	addgt	r5, r5, r3
 80032a8:	341a      	adds	r4, #26
 80032aa:	42b5      	cmp	r5, r6
 80032ac:	d11a      	bne.n	80032e4 <_printf_common+0xcc>
 80032ae:	2000      	movs	r0, #0
 80032b0:	e008      	b.n	80032c4 <_printf_common+0xac>
 80032b2:	2301      	movs	r3, #1
 80032b4:	4652      	mov	r2, sl
 80032b6:	4649      	mov	r1, r9
 80032b8:	4638      	mov	r0, r7
 80032ba:	47c0      	blx	r8
 80032bc:	3001      	adds	r0, #1
 80032be:	d103      	bne.n	80032c8 <_printf_common+0xb0>
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c8:	3501      	adds	r5, #1
 80032ca:	e7c4      	b.n	8003256 <_printf_common+0x3e>
 80032cc:	2030      	movs	r0, #48	; 0x30
 80032ce:	18e1      	adds	r1, r4, r3
 80032d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032da:	4422      	add	r2, r4
 80032dc:	3302      	adds	r3, #2
 80032de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032e2:	e7c5      	b.n	8003270 <_printf_common+0x58>
 80032e4:	2301      	movs	r3, #1
 80032e6:	4622      	mov	r2, r4
 80032e8:	4649      	mov	r1, r9
 80032ea:	4638      	mov	r0, r7
 80032ec:	47c0      	blx	r8
 80032ee:	3001      	adds	r0, #1
 80032f0:	d0e6      	beq.n	80032c0 <_printf_common+0xa8>
 80032f2:	3601      	adds	r6, #1
 80032f4:	e7d9      	b.n	80032aa <_printf_common+0x92>
	...

080032f8 <_printf_i>:
 80032f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032fc:	7e0f      	ldrb	r7, [r1, #24]
 80032fe:	4691      	mov	r9, r2
 8003300:	2f78      	cmp	r7, #120	; 0x78
 8003302:	4680      	mov	r8, r0
 8003304:	460c      	mov	r4, r1
 8003306:	469a      	mov	sl, r3
 8003308:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800330a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800330e:	d807      	bhi.n	8003320 <_printf_i+0x28>
 8003310:	2f62      	cmp	r7, #98	; 0x62
 8003312:	d80a      	bhi.n	800332a <_printf_i+0x32>
 8003314:	2f00      	cmp	r7, #0
 8003316:	f000 80d9 	beq.w	80034cc <_printf_i+0x1d4>
 800331a:	2f58      	cmp	r7, #88	; 0x58
 800331c:	f000 80a4 	beq.w	8003468 <_printf_i+0x170>
 8003320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003328:	e03a      	b.n	80033a0 <_printf_i+0xa8>
 800332a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800332e:	2b15      	cmp	r3, #21
 8003330:	d8f6      	bhi.n	8003320 <_printf_i+0x28>
 8003332:	a101      	add	r1, pc, #4	; (adr r1, 8003338 <_printf_i+0x40>)
 8003334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003338:	08003391 	.word	0x08003391
 800333c:	080033a5 	.word	0x080033a5
 8003340:	08003321 	.word	0x08003321
 8003344:	08003321 	.word	0x08003321
 8003348:	08003321 	.word	0x08003321
 800334c:	08003321 	.word	0x08003321
 8003350:	080033a5 	.word	0x080033a5
 8003354:	08003321 	.word	0x08003321
 8003358:	08003321 	.word	0x08003321
 800335c:	08003321 	.word	0x08003321
 8003360:	08003321 	.word	0x08003321
 8003364:	080034b3 	.word	0x080034b3
 8003368:	080033d5 	.word	0x080033d5
 800336c:	08003495 	.word	0x08003495
 8003370:	08003321 	.word	0x08003321
 8003374:	08003321 	.word	0x08003321
 8003378:	080034d5 	.word	0x080034d5
 800337c:	08003321 	.word	0x08003321
 8003380:	080033d5 	.word	0x080033d5
 8003384:	08003321 	.word	0x08003321
 8003388:	08003321 	.word	0x08003321
 800338c:	0800349d 	.word	0x0800349d
 8003390:	682b      	ldr	r3, [r5, #0]
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	602a      	str	r2, [r5, #0]
 8003398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800339c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0a4      	b.n	80034ee <_printf_i+0x1f6>
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	6829      	ldr	r1, [r5, #0]
 80033a8:	0606      	lsls	r6, r0, #24
 80033aa:	f101 0304 	add.w	r3, r1, #4
 80033ae:	d50a      	bpl.n	80033c6 <_printf_i+0xce>
 80033b0:	680e      	ldr	r6, [r1, #0]
 80033b2:	602b      	str	r3, [r5, #0]
 80033b4:	2e00      	cmp	r6, #0
 80033b6:	da03      	bge.n	80033c0 <_printf_i+0xc8>
 80033b8:	232d      	movs	r3, #45	; 0x2d
 80033ba:	4276      	negs	r6, r6
 80033bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c0:	230a      	movs	r3, #10
 80033c2:	485e      	ldr	r0, [pc, #376]	; (800353c <_printf_i+0x244>)
 80033c4:	e019      	b.n	80033fa <_printf_i+0x102>
 80033c6:	680e      	ldr	r6, [r1, #0]
 80033c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	bf18      	it	ne
 80033d0:	b236      	sxthne	r6, r6
 80033d2:	e7ef      	b.n	80033b4 <_printf_i+0xbc>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	1d19      	adds	r1, r3, #4
 80033da:	6029      	str	r1, [r5, #0]
 80033dc:	0601      	lsls	r1, r0, #24
 80033de:	d501      	bpl.n	80033e4 <_printf_i+0xec>
 80033e0:	681e      	ldr	r6, [r3, #0]
 80033e2:	e002      	b.n	80033ea <_printf_i+0xf2>
 80033e4:	0646      	lsls	r6, r0, #25
 80033e6:	d5fb      	bpl.n	80033e0 <_printf_i+0xe8>
 80033e8:	881e      	ldrh	r6, [r3, #0]
 80033ea:	2f6f      	cmp	r7, #111	; 0x6f
 80033ec:	bf0c      	ite	eq
 80033ee:	2308      	moveq	r3, #8
 80033f0:	230a      	movne	r3, #10
 80033f2:	4852      	ldr	r0, [pc, #328]	; (800353c <_printf_i+0x244>)
 80033f4:	2100      	movs	r1, #0
 80033f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033fa:	6865      	ldr	r5, [r4, #4]
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	bfa8      	it	ge
 8003400:	6821      	ldrge	r1, [r4, #0]
 8003402:	60a5      	str	r5, [r4, #8]
 8003404:	bfa4      	itt	ge
 8003406:	f021 0104 	bicge.w	r1, r1, #4
 800340a:	6021      	strge	r1, [r4, #0]
 800340c:	b90e      	cbnz	r6, 8003412 <_printf_i+0x11a>
 800340e:	2d00      	cmp	r5, #0
 8003410:	d04d      	beq.n	80034ae <_printf_i+0x1b6>
 8003412:	4615      	mov	r5, r2
 8003414:	fbb6 f1f3 	udiv	r1, r6, r3
 8003418:	fb03 6711 	mls	r7, r3, r1, r6
 800341c:	5dc7      	ldrb	r7, [r0, r7]
 800341e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003422:	4637      	mov	r7, r6
 8003424:	42bb      	cmp	r3, r7
 8003426:	460e      	mov	r6, r1
 8003428:	d9f4      	bls.n	8003414 <_printf_i+0x11c>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d10b      	bne.n	8003446 <_printf_i+0x14e>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	07de      	lsls	r6, r3, #31
 8003432:	d508      	bpl.n	8003446 <_printf_i+0x14e>
 8003434:	6923      	ldr	r3, [r4, #16]
 8003436:	6861      	ldr	r1, [r4, #4]
 8003438:	4299      	cmp	r1, r3
 800343a:	bfde      	ittt	le
 800343c:	2330      	movle	r3, #48	; 0x30
 800343e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003442:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003446:	1b52      	subs	r2, r2, r5
 8003448:	6122      	str	r2, [r4, #16]
 800344a:	464b      	mov	r3, r9
 800344c:	4621      	mov	r1, r4
 800344e:	4640      	mov	r0, r8
 8003450:	f8cd a000 	str.w	sl, [sp]
 8003454:	aa03      	add	r2, sp, #12
 8003456:	f7ff fedf 	bl	8003218 <_printf_common>
 800345a:	3001      	adds	r0, #1
 800345c:	d14c      	bne.n	80034f8 <_printf_i+0x200>
 800345e:	f04f 30ff 	mov.w	r0, #4294967295
 8003462:	b004      	add	sp, #16
 8003464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003468:	4834      	ldr	r0, [pc, #208]	; (800353c <_printf_i+0x244>)
 800346a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800346e:	6829      	ldr	r1, [r5, #0]
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	f851 6b04 	ldr.w	r6, [r1], #4
 8003476:	6029      	str	r1, [r5, #0]
 8003478:	061d      	lsls	r5, r3, #24
 800347a:	d514      	bpl.n	80034a6 <_printf_i+0x1ae>
 800347c:	07df      	lsls	r7, r3, #31
 800347e:	bf44      	itt	mi
 8003480:	f043 0320 	orrmi.w	r3, r3, #32
 8003484:	6023      	strmi	r3, [r4, #0]
 8003486:	b91e      	cbnz	r6, 8003490 <_printf_i+0x198>
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	f023 0320 	bic.w	r3, r3, #32
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	2310      	movs	r3, #16
 8003492:	e7af      	b.n	80033f4 <_printf_i+0xfc>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	f043 0320 	orr.w	r3, r3, #32
 800349a:	6023      	str	r3, [r4, #0]
 800349c:	2378      	movs	r3, #120	; 0x78
 800349e:	4828      	ldr	r0, [pc, #160]	; (8003540 <_printf_i+0x248>)
 80034a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034a4:	e7e3      	b.n	800346e <_printf_i+0x176>
 80034a6:	0659      	lsls	r1, r3, #25
 80034a8:	bf48      	it	mi
 80034aa:	b2b6      	uxthmi	r6, r6
 80034ac:	e7e6      	b.n	800347c <_printf_i+0x184>
 80034ae:	4615      	mov	r5, r2
 80034b0:	e7bb      	b.n	800342a <_printf_i+0x132>
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	6826      	ldr	r6, [r4, #0]
 80034b6:	1d18      	adds	r0, r3, #4
 80034b8:	6961      	ldr	r1, [r4, #20]
 80034ba:	6028      	str	r0, [r5, #0]
 80034bc:	0635      	lsls	r5, r6, #24
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	d501      	bpl.n	80034c6 <_printf_i+0x1ce>
 80034c2:	6019      	str	r1, [r3, #0]
 80034c4:	e002      	b.n	80034cc <_printf_i+0x1d4>
 80034c6:	0670      	lsls	r0, r6, #25
 80034c8:	d5fb      	bpl.n	80034c2 <_printf_i+0x1ca>
 80034ca:	8019      	strh	r1, [r3, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	4615      	mov	r5, r2
 80034d0:	6123      	str	r3, [r4, #16]
 80034d2:	e7ba      	b.n	800344a <_printf_i+0x152>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	2100      	movs	r1, #0
 80034d8:	1d1a      	adds	r2, r3, #4
 80034da:	602a      	str	r2, [r5, #0]
 80034dc:	681d      	ldr	r5, [r3, #0]
 80034de:	6862      	ldr	r2, [r4, #4]
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 fa9b 	bl	8003a1c <memchr>
 80034e6:	b108      	cbz	r0, 80034ec <_printf_i+0x1f4>
 80034e8:	1b40      	subs	r0, r0, r5
 80034ea:	6060      	str	r0, [r4, #4]
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	6123      	str	r3, [r4, #16]
 80034f0:	2300      	movs	r3, #0
 80034f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f6:	e7a8      	b.n	800344a <_printf_i+0x152>
 80034f8:	462a      	mov	r2, r5
 80034fa:	4649      	mov	r1, r9
 80034fc:	4640      	mov	r0, r8
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	47d0      	blx	sl
 8003502:	3001      	adds	r0, #1
 8003504:	d0ab      	beq.n	800345e <_printf_i+0x166>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	079b      	lsls	r3, r3, #30
 800350a:	d413      	bmi.n	8003534 <_printf_i+0x23c>
 800350c:	68e0      	ldr	r0, [r4, #12]
 800350e:	9b03      	ldr	r3, [sp, #12]
 8003510:	4298      	cmp	r0, r3
 8003512:	bfb8      	it	lt
 8003514:	4618      	movlt	r0, r3
 8003516:	e7a4      	b.n	8003462 <_printf_i+0x16a>
 8003518:	2301      	movs	r3, #1
 800351a:	4632      	mov	r2, r6
 800351c:	4649      	mov	r1, r9
 800351e:	4640      	mov	r0, r8
 8003520:	47d0      	blx	sl
 8003522:	3001      	adds	r0, #1
 8003524:	d09b      	beq.n	800345e <_printf_i+0x166>
 8003526:	3501      	adds	r5, #1
 8003528:	68e3      	ldr	r3, [r4, #12]
 800352a:	9903      	ldr	r1, [sp, #12]
 800352c:	1a5b      	subs	r3, r3, r1
 800352e:	42ab      	cmp	r3, r5
 8003530:	dcf2      	bgt.n	8003518 <_printf_i+0x220>
 8003532:	e7eb      	b.n	800350c <_printf_i+0x214>
 8003534:	2500      	movs	r5, #0
 8003536:	f104 0619 	add.w	r6, r4, #25
 800353a:	e7f5      	b.n	8003528 <_printf_i+0x230>
 800353c:	08003c09 	.word	0x08003c09
 8003540:	08003c1a 	.word	0x08003c1a

08003544 <_sbrk_r>:
 8003544:	b538      	push	{r3, r4, r5, lr}
 8003546:	2300      	movs	r3, #0
 8003548:	4d05      	ldr	r5, [pc, #20]	; (8003560 <_sbrk_r+0x1c>)
 800354a:	4604      	mov	r4, r0
 800354c:	4608      	mov	r0, r1
 800354e:	602b      	str	r3, [r5, #0]
 8003550:	f7fd f974 	bl	800083c <_sbrk>
 8003554:	1c43      	adds	r3, r0, #1
 8003556:	d102      	bne.n	800355e <_sbrk_r+0x1a>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	b103      	cbz	r3, 800355e <_sbrk_r+0x1a>
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	20000138 	.word	0x20000138

08003564 <__sread>:
 8003564:	b510      	push	{r4, lr}
 8003566:	460c      	mov	r4, r1
 8003568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356c:	f000 fab8 	bl	8003ae0 <_read_r>
 8003570:	2800      	cmp	r0, #0
 8003572:	bfab      	itete	ge
 8003574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003576:	89a3      	ldrhlt	r3, [r4, #12]
 8003578:	181b      	addge	r3, r3, r0
 800357a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800357e:	bfac      	ite	ge
 8003580:	6563      	strge	r3, [r4, #84]	; 0x54
 8003582:	81a3      	strhlt	r3, [r4, #12]
 8003584:	bd10      	pop	{r4, pc}

08003586 <__swrite>:
 8003586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800358a:	461f      	mov	r7, r3
 800358c:	898b      	ldrh	r3, [r1, #12]
 800358e:	4605      	mov	r5, r0
 8003590:	05db      	lsls	r3, r3, #23
 8003592:	460c      	mov	r4, r1
 8003594:	4616      	mov	r6, r2
 8003596:	d505      	bpl.n	80035a4 <__swrite+0x1e>
 8003598:	2302      	movs	r3, #2
 800359a:	2200      	movs	r2, #0
 800359c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a0:	f000 f9c4 	bl	800392c <_lseek_r>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	4632      	mov	r2, r6
 80035a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ac:	81a3      	strh	r3, [r4, #12]
 80035ae:	4628      	mov	r0, r5
 80035b0:	463b      	mov	r3, r7
 80035b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ba:	f000 b869 	b.w	8003690 <_write_r>

080035be <__sseek>:
 80035be:	b510      	push	{r4, lr}
 80035c0:	460c      	mov	r4, r1
 80035c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c6:	f000 f9b1 	bl	800392c <_lseek_r>
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	bf15      	itete	ne
 80035d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80035d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035da:	81a3      	strheq	r3, [r4, #12]
 80035dc:	bf18      	it	ne
 80035de:	81a3      	strhne	r3, [r4, #12]
 80035e0:	bd10      	pop	{r4, pc}

080035e2 <__sclose>:
 80035e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e6:	f000 b8d3 	b.w	8003790 <_close_r>
	...

080035ec <__swbuf_r>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	460e      	mov	r6, r1
 80035f0:	4614      	mov	r4, r2
 80035f2:	4605      	mov	r5, r0
 80035f4:	b118      	cbz	r0, 80035fe <__swbuf_r+0x12>
 80035f6:	6983      	ldr	r3, [r0, #24]
 80035f8:	b90b      	cbnz	r3, 80035fe <__swbuf_r+0x12>
 80035fa:	f7ff fb81 	bl	8002d00 <__sinit>
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <__swbuf_r+0x98>)
 8003600:	429c      	cmp	r4, r3
 8003602:	d12b      	bne.n	800365c <__swbuf_r+0x70>
 8003604:	686c      	ldr	r4, [r5, #4]
 8003606:	69a3      	ldr	r3, [r4, #24]
 8003608:	60a3      	str	r3, [r4, #8]
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	071a      	lsls	r2, r3, #28
 800360e:	d52f      	bpl.n	8003670 <__swbuf_r+0x84>
 8003610:	6923      	ldr	r3, [r4, #16]
 8003612:	b36b      	cbz	r3, 8003670 <__swbuf_r+0x84>
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	b2f6      	uxtb	r6, r6
 800361a:	1ac0      	subs	r0, r0, r3
 800361c:	6963      	ldr	r3, [r4, #20]
 800361e:	4637      	mov	r7, r6
 8003620:	4283      	cmp	r3, r0
 8003622:	dc04      	bgt.n	800362e <__swbuf_r+0x42>
 8003624:	4621      	mov	r1, r4
 8003626:	4628      	mov	r0, r5
 8003628:	f000 f944 	bl	80038b4 <_fflush_r>
 800362c:	bb30      	cbnz	r0, 800367c <__swbuf_r+0x90>
 800362e:	68a3      	ldr	r3, [r4, #8]
 8003630:	3001      	adds	r0, #1
 8003632:	3b01      	subs	r3, #1
 8003634:	60a3      	str	r3, [r4, #8]
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	6022      	str	r2, [r4, #0]
 800363c:	701e      	strb	r6, [r3, #0]
 800363e:	6963      	ldr	r3, [r4, #20]
 8003640:	4283      	cmp	r3, r0
 8003642:	d004      	beq.n	800364e <__swbuf_r+0x62>
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	07db      	lsls	r3, r3, #31
 8003648:	d506      	bpl.n	8003658 <__swbuf_r+0x6c>
 800364a:	2e0a      	cmp	r6, #10
 800364c:	d104      	bne.n	8003658 <__swbuf_r+0x6c>
 800364e:	4621      	mov	r1, r4
 8003650:	4628      	mov	r0, r5
 8003652:	f000 f92f 	bl	80038b4 <_fflush_r>
 8003656:	b988      	cbnz	r0, 800367c <__swbuf_r+0x90>
 8003658:	4638      	mov	r0, r7
 800365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <__swbuf_r+0x9c>)
 800365e:	429c      	cmp	r4, r3
 8003660:	d101      	bne.n	8003666 <__swbuf_r+0x7a>
 8003662:	68ac      	ldr	r4, [r5, #8]
 8003664:	e7cf      	b.n	8003606 <__swbuf_r+0x1a>
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <__swbuf_r+0xa0>)
 8003668:	429c      	cmp	r4, r3
 800366a:	bf08      	it	eq
 800366c:	68ec      	ldreq	r4, [r5, #12]
 800366e:	e7ca      	b.n	8003606 <__swbuf_r+0x1a>
 8003670:	4621      	mov	r1, r4
 8003672:	4628      	mov	r0, r5
 8003674:	f000 f81e 	bl	80036b4 <__swsetup_r>
 8003678:	2800      	cmp	r0, #0
 800367a:	d0cb      	beq.n	8003614 <__swbuf_r+0x28>
 800367c:	f04f 37ff 	mov.w	r7, #4294967295
 8003680:	e7ea      	b.n	8003658 <__swbuf_r+0x6c>
 8003682:	bf00      	nop
 8003684:	08003bb8 	.word	0x08003bb8
 8003688:	08003bd8 	.word	0x08003bd8
 800368c:	08003b98 	.word	0x08003b98

08003690 <_write_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	2200      	movs	r2, #0
 800369a:	4d05      	ldr	r5, [pc, #20]	; (80036b0 <_write_r+0x20>)
 800369c:	602a      	str	r2, [r5, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	f7fd f87f 	bl	80007a2 <_write>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_write_r+0x1e>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_write_r+0x1e>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	20000138 	.word	0x20000138

080036b4 <__swsetup_r>:
 80036b4:	4b32      	ldr	r3, [pc, #200]	; (8003780 <__swsetup_r+0xcc>)
 80036b6:	b570      	push	{r4, r5, r6, lr}
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	4606      	mov	r6, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	b125      	cbz	r5, 80036ca <__swsetup_r+0x16>
 80036c0:	69ab      	ldr	r3, [r5, #24]
 80036c2:	b913      	cbnz	r3, 80036ca <__swsetup_r+0x16>
 80036c4:	4628      	mov	r0, r5
 80036c6:	f7ff fb1b 	bl	8002d00 <__sinit>
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <__swsetup_r+0xd0>)
 80036cc:	429c      	cmp	r4, r3
 80036ce:	d10f      	bne.n	80036f0 <__swsetup_r+0x3c>
 80036d0:	686c      	ldr	r4, [r5, #4]
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d8:	0719      	lsls	r1, r3, #28
 80036da:	d42c      	bmi.n	8003736 <__swsetup_r+0x82>
 80036dc:	06dd      	lsls	r5, r3, #27
 80036de:	d411      	bmi.n	8003704 <__swsetup_r+0x50>
 80036e0:	2309      	movs	r3, #9
 80036e2:	6033      	str	r3, [r6, #0]
 80036e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	e03e      	b.n	800376e <__swsetup_r+0xba>
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <__swsetup_r+0xd4>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d101      	bne.n	80036fa <__swsetup_r+0x46>
 80036f6:	68ac      	ldr	r4, [r5, #8]
 80036f8:	e7eb      	b.n	80036d2 <__swsetup_r+0x1e>
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <__swsetup_r+0xd8>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	bf08      	it	eq
 8003700:	68ec      	ldreq	r4, [r5, #12]
 8003702:	e7e6      	b.n	80036d2 <__swsetup_r+0x1e>
 8003704:	0758      	lsls	r0, r3, #29
 8003706:	d512      	bpl.n	800372e <__swsetup_r+0x7a>
 8003708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800370a:	b141      	cbz	r1, 800371e <__swsetup_r+0x6a>
 800370c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003710:	4299      	cmp	r1, r3
 8003712:	d002      	beq.n	800371a <__swsetup_r+0x66>
 8003714:	4630      	mov	r0, r6
 8003716:	f000 f99b 	bl	8003a50 <_free_r>
 800371a:	2300      	movs	r3, #0
 800371c:	6363      	str	r3, [r4, #52]	; 0x34
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	2300      	movs	r3, #0
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	89a3      	ldrh	r3, [r4, #12]
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	b94b      	cbnz	r3, 800374e <__swsetup_r+0x9a>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d003      	beq.n	800374e <__swsetup_r+0x9a>
 8003746:	4621      	mov	r1, r4
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f927 	bl	800399c <__smakebuf_r>
 800374e:	89a0      	ldrh	r0, [r4, #12]
 8003750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003754:	f010 0301 	ands.w	r3, r0, #1
 8003758:	d00a      	beq.n	8003770 <__swsetup_r+0xbc>
 800375a:	2300      	movs	r3, #0
 800375c:	60a3      	str	r3, [r4, #8]
 800375e:	6963      	ldr	r3, [r4, #20]
 8003760:	425b      	negs	r3, r3
 8003762:	61a3      	str	r3, [r4, #24]
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	b943      	cbnz	r3, 800377a <__swsetup_r+0xc6>
 8003768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800376c:	d1ba      	bne.n	80036e4 <__swsetup_r+0x30>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	0781      	lsls	r1, r0, #30
 8003772:	bf58      	it	pl
 8003774:	6963      	ldrpl	r3, [r4, #20]
 8003776:	60a3      	str	r3, [r4, #8]
 8003778:	e7f4      	b.n	8003764 <__swsetup_r+0xb0>
 800377a:	2000      	movs	r0, #0
 800377c:	e7f7      	b.n	800376e <__swsetup_r+0xba>
 800377e:	bf00      	nop
 8003780:	2000000c 	.word	0x2000000c
 8003784:	08003bb8 	.word	0x08003bb8
 8003788:	08003bd8 	.word	0x08003bd8
 800378c:	08003b98 	.word	0x08003b98

08003790 <_close_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	2300      	movs	r3, #0
 8003794:	4d05      	ldr	r5, [pc, #20]	; (80037ac <_close_r+0x1c>)
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd f81d 	bl	80007da <_close>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_close_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_close_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	20000138 	.word	0x20000138

080037b0 <__sflush_r>:
 80037b0:	898a      	ldrh	r2, [r1, #12]
 80037b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b4:	4605      	mov	r5, r0
 80037b6:	0710      	lsls	r0, r2, #28
 80037b8:	460c      	mov	r4, r1
 80037ba:	d457      	bmi.n	800386c <__sflush_r+0xbc>
 80037bc:	684b      	ldr	r3, [r1, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	dc04      	bgt.n	80037cc <__sflush_r+0x1c>
 80037c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dc01      	bgt.n	80037cc <__sflush_r+0x1c>
 80037c8:	2000      	movs	r0, #0
 80037ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	d0fa      	beq.n	80037c8 <__sflush_r+0x18>
 80037d2:	2300      	movs	r3, #0
 80037d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037d8:	682f      	ldr	r7, [r5, #0]
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	d032      	beq.n	8003844 <__sflush_r+0x94>
 80037de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	075a      	lsls	r2, r3, #29
 80037e4:	d505      	bpl.n	80037f2 <__sflush_r+0x42>
 80037e6:	6863      	ldr	r3, [r4, #4]
 80037e8:	1ac0      	subs	r0, r0, r3
 80037ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037ec:	b10b      	cbz	r3, 80037f2 <__sflush_r+0x42>
 80037ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037f0:	1ac0      	subs	r0, r0, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	4602      	mov	r2, r0
 80037f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037f8:	4628      	mov	r0, r5
 80037fa:	6a21      	ldr	r1, [r4, #32]
 80037fc:	47b0      	blx	r6
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	d106      	bne.n	8003812 <__sflush_r+0x62>
 8003804:	6829      	ldr	r1, [r5, #0]
 8003806:	291d      	cmp	r1, #29
 8003808:	d82c      	bhi.n	8003864 <__sflush_r+0xb4>
 800380a:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <__sflush_r+0x100>)
 800380c:	40ca      	lsrs	r2, r1
 800380e:	07d6      	lsls	r6, r2, #31
 8003810:	d528      	bpl.n	8003864 <__sflush_r+0xb4>
 8003812:	2200      	movs	r2, #0
 8003814:	6062      	str	r2, [r4, #4]
 8003816:	6922      	ldr	r2, [r4, #16]
 8003818:	04d9      	lsls	r1, r3, #19
 800381a:	6022      	str	r2, [r4, #0]
 800381c:	d504      	bpl.n	8003828 <__sflush_r+0x78>
 800381e:	1c42      	adds	r2, r0, #1
 8003820:	d101      	bne.n	8003826 <__sflush_r+0x76>
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	b903      	cbnz	r3, 8003828 <__sflush_r+0x78>
 8003826:	6560      	str	r0, [r4, #84]	; 0x54
 8003828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800382a:	602f      	str	r7, [r5, #0]
 800382c:	2900      	cmp	r1, #0
 800382e:	d0cb      	beq.n	80037c8 <__sflush_r+0x18>
 8003830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003834:	4299      	cmp	r1, r3
 8003836:	d002      	beq.n	800383e <__sflush_r+0x8e>
 8003838:	4628      	mov	r0, r5
 800383a:	f000 f909 	bl	8003a50 <_free_r>
 800383e:	2000      	movs	r0, #0
 8003840:	6360      	str	r0, [r4, #52]	; 0x34
 8003842:	e7c2      	b.n	80037ca <__sflush_r+0x1a>
 8003844:	6a21      	ldr	r1, [r4, #32]
 8003846:	2301      	movs	r3, #1
 8003848:	4628      	mov	r0, r5
 800384a:	47b0      	blx	r6
 800384c:	1c41      	adds	r1, r0, #1
 800384e:	d1c7      	bne.n	80037e0 <__sflush_r+0x30>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0c4      	beq.n	80037e0 <__sflush_r+0x30>
 8003856:	2b1d      	cmp	r3, #29
 8003858:	d001      	beq.n	800385e <__sflush_r+0xae>
 800385a:	2b16      	cmp	r3, #22
 800385c:	d101      	bne.n	8003862 <__sflush_r+0xb2>
 800385e:	602f      	str	r7, [r5, #0]
 8003860:	e7b2      	b.n	80037c8 <__sflush_r+0x18>
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003868:	81a3      	strh	r3, [r4, #12]
 800386a:	e7ae      	b.n	80037ca <__sflush_r+0x1a>
 800386c:	690f      	ldr	r7, [r1, #16]
 800386e:	2f00      	cmp	r7, #0
 8003870:	d0aa      	beq.n	80037c8 <__sflush_r+0x18>
 8003872:	0793      	lsls	r3, r2, #30
 8003874:	bf18      	it	ne
 8003876:	2300      	movne	r3, #0
 8003878:	680e      	ldr	r6, [r1, #0]
 800387a:	bf08      	it	eq
 800387c:	694b      	ldreq	r3, [r1, #20]
 800387e:	1bf6      	subs	r6, r6, r7
 8003880:	600f      	str	r7, [r1, #0]
 8003882:	608b      	str	r3, [r1, #8]
 8003884:	2e00      	cmp	r6, #0
 8003886:	dd9f      	ble.n	80037c8 <__sflush_r+0x18>
 8003888:	4633      	mov	r3, r6
 800388a:	463a      	mov	r2, r7
 800388c:	4628      	mov	r0, r5
 800388e:	6a21      	ldr	r1, [r4, #32]
 8003890:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003894:	47e0      	blx	ip
 8003896:	2800      	cmp	r0, #0
 8003898:	dc06      	bgt.n	80038a8 <__sflush_r+0xf8>
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a4:	81a3      	strh	r3, [r4, #12]
 80038a6:	e790      	b.n	80037ca <__sflush_r+0x1a>
 80038a8:	4407      	add	r7, r0
 80038aa:	1a36      	subs	r6, r6, r0
 80038ac:	e7ea      	b.n	8003884 <__sflush_r+0xd4>
 80038ae:	bf00      	nop
 80038b0:	20400001 	.word	0x20400001

080038b4 <_fflush_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	690b      	ldr	r3, [r1, #16]
 80038b8:	4605      	mov	r5, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	b913      	cbnz	r3, 80038c4 <_fflush_r+0x10>
 80038be:	2500      	movs	r5, #0
 80038c0:	4628      	mov	r0, r5
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	b118      	cbz	r0, 80038ce <_fflush_r+0x1a>
 80038c6:	6983      	ldr	r3, [r0, #24]
 80038c8:	b90b      	cbnz	r3, 80038ce <_fflush_r+0x1a>
 80038ca:	f7ff fa19 	bl	8002d00 <__sinit>
 80038ce:	4b14      	ldr	r3, [pc, #80]	; (8003920 <_fflush_r+0x6c>)
 80038d0:	429c      	cmp	r4, r3
 80038d2:	d11b      	bne.n	800390c <_fflush_r+0x58>
 80038d4:	686c      	ldr	r4, [r5, #4]
 80038d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0ef      	beq.n	80038be <_fflush_r+0xa>
 80038de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038e0:	07d0      	lsls	r0, r2, #31
 80038e2:	d404      	bmi.n	80038ee <_fflush_r+0x3a>
 80038e4:	0599      	lsls	r1, r3, #22
 80038e6:	d402      	bmi.n	80038ee <_fflush_r+0x3a>
 80038e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ea:	f7ff faa7 	bl	8002e3c <__retarget_lock_acquire_recursive>
 80038ee:	4628      	mov	r0, r5
 80038f0:	4621      	mov	r1, r4
 80038f2:	f7ff ff5d 	bl	80037b0 <__sflush_r>
 80038f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038f8:	4605      	mov	r5, r0
 80038fa:	07da      	lsls	r2, r3, #31
 80038fc:	d4e0      	bmi.n	80038c0 <_fflush_r+0xc>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	059b      	lsls	r3, r3, #22
 8003902:	d4dd      	bmi.n	80038c0 <_fflush_r+0xc>
 8003904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003906:	f7ff fa9a 	bl	8002e3e <__retarget_lock_release_recursive>
 800390a:	e7d9      	b.n	80038c0 <_fflush_r+0xc>
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <_fflush_r+0x70>)
 800390e:	429c      	cmp	r4, r3
 8003910:	d101      	bne.n	8003916 <_fflush_r+0x62>
 8003912:	68ac      	ldr	r4, [r5, #8]
 8003914:	e7df      	b.n	80038d6 <_fflush_r+0x22>
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <_fflush_r+0x74>)
 8003918:	429c      	cmp	r4, r3
 800391a:	bf08      	it	eq
 800391c:	68ec      	ldreq	r4, [r5, #12]
 800391e:	e7da      	b.n	80038d6 <_fflush_r+0x22>
 8003920:	08003bb8 	.word	0x08003bb8
 8003924:	08003bd8 	.word	0x08003bd8
 8003928:	08003b98 	.word	0x08003b98

0800392c <_lseek_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	2200      	movs	r2, #0
 8003936:	4d05      	ldr	r5, [pc, #20]	; (800394c <_lseek_r+0x20>)
 8003938:	602a      	str	r2, [r5, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f7fc ff71 	bl	8000822 <_lseek>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_lseek_r+0x1e>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	b103      	cbz	r3, 800394a <_lseek_r+0x1e>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	20000138 	.word	0x20000138

08003950 <__swhatbuf_r>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	460e      	mov	r6, r1
 8003954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003958:	4614      	mov	r4, r2
 800395a:	2900      	cmp	r1, #0
 800395c:	461d      	mov	r5, r3
 800395e:	b096      	sub	sp, #88	; 0x58
 8003960:	da08      	bge.n	8003974 <__swhatbuf_r+0x24>
 8003962:	2200      	movs	r2, #0
 8003964:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003968:	602a      	str	r2, [r5, #0]
 800396a:	061a      	lsls	r2, r3, #24
 800396c:	d410      	bmi.n	8003990 <__swhatbuf_r+0x40>
 800396e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003972:	e00e      	b.n	8003992 <__swhatbuf_r+0x42>
 8003974:	466a      	mov	r2, sp
 8003976:	f000 f8c5 	bl	8003b04 <_fstat_r>
 800397a:	2800      	cmp	r0, #0
 800397c:	dbf1      	blt.n	8003962 <__swhatbuf_r+0x12>
 800397e:	9a01      	ldr	r2, [sp, #4]
 8003980:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003984:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003988:	425a      	negs	r2, r3
 800398a:	415a      	adcs	r2, r3
 800398c:	602a      	str	r2, [r5, #0]
 800398e:	e7ee      	b.n	800396e <__swhatbuf_r+0x1e>
 8003990:	2340      	movs	r3, #64	; 0x40
 8003992:	2000      	movs	r0, #0
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	b016      	add	sp, #88	; 0x58
 8003998:	bd70      	pop	{r4, r5, r6, pc}
	...

0800399c <__smakebuf_r>:
 800399c:	898b      	ldrh	r3, [r1, #12]
 800399e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039a0:	079d      	lsls	r5, r3, #30
 80039a2:	4606      	mov	r6, r0
 80039a4:	460c      	mov	r4, r1
 80039a6:	d507      	bpl.n	80039b8 <__smakebuf_r+0x1c>
 80039a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	6123      	str	r3, [r4, #16]
 80039b0:	2301      	movs	r3, #1
 80039b2:	6163      	str	r3, [r4, #20]
 80039b4:	b002      	add	sp, #8
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	466a      	mov	r2, sp
 80039ba:	ab01      	add	r3, sp, #4
 80039bc:	f7ff ffc8 	bl	8003950 <__swhatbuf_r>
 80039c0:	9900      	ldr	r1, [sp, #0]
 80039c2:	4605      	mov	r5, r0
 80039c4:	4630      	mov	r0, r6
 80039c6:	f7ff fa5b 	bl	8002e80 <_malloc_r>
 80039ca:	b948      	cbnz	r0, 80039e0 <__smakebuf_r+0x44>
 80039cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d0:	059a      	lsls	r2, r3, #22
 80039d2:	d4ef      	bmi.n	80039b4 <__smakebuf_r+0x18>
 80039d4:	f023 0303 	bic.w	r3, r3, #3
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	81a3      	strh	r3, [r4, #12]
 80039de:	e7e3      	b.n	80039a8 <__smakebuf_r+0xc>
 80039e0:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <__smakebuf_r+0x7c>)
 80039e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	6020      	str	r0, [r4, #0]
 80039e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ec:	81a3      	strh	r3, [r4, #12]
 80039ee:	9b00      	ldr	r3, [sp, #0]
 80039f0:	6120      	str	r0, [r4, #16]
 80039f2:	6163      	str	r3, [r4, #20]
 80039f4:	9b01      	ldr	r3, [sp, #4]
 80039f6:	b15b      	cbz	r3, 8003a10 <__smakebuf_r+0x74>
 80039f8:	4630      	mov	r0, r6
 80039fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039fe:	f000 f893 	bl	8003b28 <_isatty_r>
 8003a02:	b128      	cbz	r0, 8003a10 <__smakebuf_r+0x74>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	89a0      	ldrh	r0, [r4, #12]
 8003a12:	4305      	orrs	r5, r0
 8003a14:	81a5      	strh	r5, [r4, #12]
 8003a16:	e7cd      	b.n	80039b4 <__smakebuf_r+0x18>
 8003a18:	08002c99 	.word	0x08002c99

08003a1c <memchr>:
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	b2c9      	uxtb	r1, r1
 8003a22:	4402      	add	r2, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	d101      	bne.n	8003a2e <memchr+0x12>
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	e003      	b.n	8003a36 <memchr+0x1a>
 8003a2e:	7804      	ldrb	r4, [r0, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	428c      	cmp	r4, r1
 8003a34:	d1f6      	bne.n	8003a24 <memchr+0x8>
 8003a36:	bd10      	pop	{r4, pc}

08003a38 <__malloc_lock>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__malloc_lock+0x8>)
 8003a3a:	f7ff b9ff 	b.w	8002e3c <__retarget_lock_acquire_recursive>
 8003a3e:	bf00      	nop
 8003a40:	2000012c 	.word	0x2000012c

08003a44 <__malloc_unlock>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__malloc_unlock+0x8>)
 8003a46:	f7ff b9fa 	b.w	8002e3e <__retarget_lock_release_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	2000012c 	.word	0x2000012c

08003a50 <_free_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4605      	mov	r5, r0
 8003a54:	2900      	cmp	r1, #0
 8003a56:	d040      	beq.n	8003ada <_free_r+0x8a>
 8003a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5c:	1f0c      	subs	r4, r1, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bfb8      	it	lt
 8003a62:	18e4      	addlt	r4, r4, r3
 8003a64:	f7ff ffe8 	bl	8003a38 <__malloc_lock>
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <_free_r+0x8c>)
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	b933      	cbnz	r3, 8003a7c <_free_r+0x2c>
 8003a6e:	6063      	str	r3, [r4, #4]
 8003a70:	6014      	str	r4, [r2, #0]
 8003a72:	4628      	mov	r0, r5
 8003a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a78:	f7ff bfe4 	b.w	8003a44 <__malloc_unlock>
 8003a7c:	42a3      	cmp	r3, r4
 8003a7e:	d908      	bls.n	8003a92 <_free_r+0x42>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	1821      	adds	r1, r4, r0
 8003a84:	428b      	cmp	r3, r1
 8003a86:	bf01      	itttt	eq
 8003a88:	6819      	ldreq	r1, [r3, #0]
 8003a8a:	685b      	ldreq	r3, [r3, #4]
 8003a8c:	1809      	addeq	r1, r1, r0
 8003a8e:	6021      	streq	r1, [r4, #0]
 8003a90:	e7ed      	b.n	8003a6e <_free_r+0x1e>
 8003a92:	461a      	mov	r2, r3
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	b10b      	cbz	r3, 8003a9c <_free_r+0x4c>
 8003a98:	42a3      	cmp	r3, r4
 8003a9a:	d9fa      	bls.n	8003a92 <_free_r+0x42>
 8003a9c:	6811      	ldr	r1, [r2, #0]
 8003a9e:	1850      	adds	r0, r2, r1
 8003aa0:	42a0      	cmp	r0, r4
 8003aa2:	d10b      	bne.n	8003abc <_free_r+0x6c>
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	1850      	adds	r0, r2, r1
 8003aaa:	4283      	cmp	r3, r0
 8003aac:	6011      	str	r1, [r2, #0]
 8003aae:	d1e0      	bne.n	8003a72 <_free_r+0x22>
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4401      	add	r1, r0
 8003ab6:	6011      	str	r1, [r2, #0]
 8003ab8:	6053      	str	r3, [r2, #4]
 8003aba:	e7da      	b.n	8003a72 <_free_r+0x22>
 8003abc:	d902      	bls.n	8003ac4 <_free_r+0x74>
 8003abe:	230c      	movs	r3, #12
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	e7d6      	b.n	8003a72 <_free_r+0x22>
 8003ac4:	6820      	ldr	r0, [r4, #0]
 8003ac6:	1821      	adds	r1, r4, r0
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	bf01      	itttt	eq
 8003acc:	6819      	ldreq	r1, [r3, #0]
 8003ace:	685b      	ldreq	r3, [r3, #4]
 8003ad0:	1809      	addeq	r1, r1, r0
 8003ad2:	6021      	streq	r1, [r4, #0]
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	6054      	str	r4, [r2, #4]
 8003ad8:	e7cb      	b.n	8003a72 <_free_r+0x22>
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000130 	.word	0x20000130

08003ae0 <_read_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4d05      	ldr	r5, [pc, #20]	; (8003b00 <_read_r+0x20>)
 8003aec:	602a      	str	r2, [r5, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f7fc fe3a 	bl	8000768 <_read>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_read_r+0x1e>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_read_r+0x1e>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20000138 	.word	0x20000138

08003b04 <_fstat_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	2300      	movs	r3, #0
 8003b08:	4d06      	ldr	r5, [pc, #24]	; (8003b24 <_fstat_r+0x20>)
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	f7fc fe6d 	bl	80007f0 <_fstat>
 8003b16:	1c43      	adds	r3, r0, #1
 8003b18:	d102      	bne.n	8003b20 <_fstat_r+0x1c>
 8003b1a:	682b      	ldr	r3, [r5, #0]
 8003b1c:	b103      	cbz	r3, 8003b20 <_fstat_r+0x1c>
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	bd38      	pop	{r3, r4, r5, pc}
 8003b22:	bf00      	nop
 8003b24:	20000138 	.word	0x20000138

08003b28 <_isatty_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4d05      	ldr	r5, [pc, #20]	; (8003b44 <_isatty_r+0x1c>)
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	f7fc fe6b 	bl	800080e <_isatty>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_isatty_r+0x1a>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_isatty_r+0x1a>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	20000138 	.word	0x20000138

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
