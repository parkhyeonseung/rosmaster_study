
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd8  08002bd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd8  08002bd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd8  08002bd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002bec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002bec  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086fc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9b  00000000  00000000  00028731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a378  00000000  00000000  0002b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd43  00000000  00000000  000459b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096318  00000000  00000000  000526f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8a0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000e8a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ba0 	.word	0x08002ba0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002ba0 	.word	0x08002ba0

08000224 <Bsp_Led_Show_State_Handle>:
#include "bsp.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f001 f92b 	bl	80014a2 <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000028 	.word	0x20000028
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 f8a9 	bl	80003b4 <Beep_On_Time>
	Motor_Init();
 8000262:	f000 f963 	bl	800052c <Motor_Init>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 8000272:	2001      	movs	r0, #1
 8000274:	f000 f910 	bl	8000498 <Key1_State>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d057      	beq.n	800032e <Bsp_Loop+0xc2>
	{
		Beep_On_Time(50);
 800027e:	2032      	movs	r0, #50	; 0x32
 8000280:	f000 f898 	bl	80003b4 <Beep_On_Time>
		static int state = 0;
		state++;
 8000284:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <Bsp_Loop+0xd8>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <Bsp_Loop+0xd8>)
 800028c:	6013      	str	r3, [r2, #0]
		int speed = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
		if (state == 1)
 8000292:	4b2c      	ldr	r3, [pc, #176]	; (8000344 <Bsp_Loop+0xd8>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d11a      	bne.n	80002d0 <Bsp_Loop+0x64>
		{
			speed = 2000;
 800029a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800029e:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	b21b      	sxth	r3, r3
 80002a4:	4619      	mov	r1, r3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f9b4 	bl	8000614 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	4619      	mov	r1, r3
 80002b2:	2001      	movs	r0, #1
 80002b4:	f000 f9ae 	bl	8000614 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	b21b      	sxth	r3, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	2002      	movs	r0, #2
 80002c0:	f000 f9a8 	bl	8000614 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	b21b      	sxth	r3, r3
 80002c8:	4619      	mov	r1, r3
 80002ca:	2003      	movs	r0, #3
 80002cc:	f000 f9a2 	bl	8000614 <Motor_Set_Pwm>
		}
		if (state == 2)
 80002d0:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <Bsp_Loop+0xd8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d102      	bne.n	80002de <Bsp_Loop+0x72>
		{
			Motor_Stop(0);
 80002d8:	2000      	movs	r0, #0
 80002da:	f000 f94f 	bl	800057c <Motor_Stop>
		}
		if (state == 3)
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <Bsp_Loop+0xd8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	d119      	bne.n	800031a <Bsp_Loop+0xae>
		{
			speed = -2000;
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <Bsp_Loop+0xdc>)
 80002e8:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	b21b      	sxth	r3, r3
 80002ee:	4619      	mov	r1, r3
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 f98f 	bl	8000614 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	b21b      	sxth	r3, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 f989 	bl	8000614 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	b21b      	sxth	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	2002      	movs	r0, #2
 800030a:	f000 f983 	bl	8000614 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	b21b      	sxth	r3, r3
 8000312:	4619      	mov	r1, r3
 8000314:	2003      	movs	r0, #3
 8000316:	f000 f97d 	bl	8000614 <Motor_Set_Pwm>
		}
		if (state == 4)
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <Bsp_Loop+0xd8>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b04      	cmp	r3, #4
 8000320:	d105      	bne.n	800032e <Bsp_Loop+0xc2>
		{
			state = 0;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <Bsp_Loop+0xd8>)
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
			Motor_Stop(1);
 8000328:	2001      	movs	r0, #1
 800032a:	f000 f927 	bl	800057c <Motor_Stop>
		}

	}

	Bsp_Led_Show_State_Handle();
 800032e:	f7ff ff79 	bl	8000224 <Bsp_Led_Show_State_Handle>
	Beep_Timeout_Close_Handle();
 8000332:	f000 f87f 	bl	8000434 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 8000336:	200a      	movs	r0, #10
 8000338:	f000 fde8 	bl	8000f0c <HAL_Delay>
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	2000002c 	.word	0x2000002c
 8000348:	fffff830 	.word	0xfffff830

0800034c <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <Beep_Set_Time+0x1c>)
 8000358:	88fb      	ldrh	r3, [r7, #6]
 800035a:	8013      	strh	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000030 	.word	0x20000030

0800036c <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000370:	4b02      	ldr	r3, [pc, #8]	; (800037c <Beep_Get_Time+0x10>)
 8000372:	881b      	ldrh	r3, [r3, #0]
}
 8000374:	4618      	mov	r0, r3
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	20000030 	.word	0x20000030

08000380 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <Beep_Set_State+0x1c>)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	7013      	strb	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000032 	.word	0x20000032

080003a0 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	return beep_state;
 80003a4:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <Beep_Get_State+0x10>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	20000032 	.word	0x20000032

080003b4 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d10b      	bne.n	80003dc <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff ffdb 	bl	8000380 <Beep_Set_State>
		Beep_Set_Time(0);
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ffbe 	bl	800034c <Beep_Set_Time>
		BEEP_ON();
 80003d0:	2201      	movs	r2, #1
 80003d2:	2120      	movs	r1, #32
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <Beep_On_Time+0x78>)
 80003d6:	f001 f84c 	bl	8001472 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 80003da:	e022      	b.n	8000422 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 80003dc:	88fb      	ldrh	r3, [r7, #6]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d10b      	bne.n	80003fa <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff ffcc 	bl	8000380 <Beep_Set_State>
		Beep_Set_Time(0);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ffaf 	bl	800034c <Beep_Set_Time>
		BEEP_OFF();
 80003ee:	2200      	movs	r2, #0
 80003f0:	2120      	movs	r1, #32
 80003f2:	480e      	ldr	r0, [pc, #56]	; (800042c <Beep_On_Time+0x78>)
 80003f4:	f001 f83d 	bl	8001472 <HAL_GPIO_WritePin>
}
 80003f8:	e013      	b.n	8000422 <Beep_On_Time+0x6e>
		if (time >= 10)
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	2b09      	cmp	r3, #9
 80003fe:	d910      	bls.n	8000422 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8000400:	2002      	movs	r0, #2
 8000402:	f7ff ffbd 	bl	8000380 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	4a09      	ldr	r2, [pc, #36]	; (8000430 <Beep_On_Time+0x7c>)
 800040a:	fba2 2303 	umull	r2, r3, r2, r3
 800040e:	08db      	lsrs	r3, r3, #3
 8000410:	b29b      	uxth	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff9a 	bl	800034c <Beep_Set_Time>
			BEEP_ON();
 8000418:	2201      	movs	r2, #1
 800041a:	2120      	movs	r1, #32
 800041c:	4803      	ldr	r0, [pc, #12]	; (800042c <Beep_On_Time+0x78>)
 800041e:	f001 f828 	bl	8001472 <HAL_GPIO_WritePin>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40011000 	.word	0x40011000
 8000430:	cccccccd 	.word	0xcccccccd

08000434 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 8000438:	f7ff ffb2 	bl	80003a0 <Beep_Get_State>
 800043c:	4603      	mov	r3, r0
 800043e:	2b02      	cmp	r3, #2
 8000440:	d113      	bne.n	800046a <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8000442:	f7ff ff93 	bl	800036c <Beep_Get_Time>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d006      	beq.n	800045a <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <Beep_Timeout_Close_Handle+0x3c>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <Beep_Timeout_Close_Handle+0x3c>)
 8000456:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 8000458:	e007      	b.n	800046a <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800045a:	2200      	movs	r2, #0
 800045c:	2120      	movs	r1, #32
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <Beep_Timeout_Close_Handle+0x40>)
 8000460:	f001 f807 	bl	8001472 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000464:	2000      	movs	r0, #0
 8000466:	f7ff ff8b 	bl	8000380 <Beep_Set_State>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000030 	.word	0x20000030
 8000474:	40011000 	.word	0x40011000

08000478 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 800047c:	2104      	movs	r1, #4
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <Key1_is_Press+0x1c>)
 8000480:	f000 ffe0 	bl	8001444 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d101      	bne.n	800048e <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 800048a:	2301      	movs	r3, #1
 800048c:	e000      	b.n	8000490 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 800048e:	2300      	movs	r3, #0
}
 8000490:	4618      	mov	r0, r3
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40011400 	.word	0x40011400

08000498 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 80004a2:	f7ff ffe9 	bl	8000478 <Key1_is_Press>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d10e      	bne.n	80004ca <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <Key1_State+0x50>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	3301      	adds	r3, #1
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	429a      	cmp	r2, r3
 80004ba:	da09      	bge.n	80004d0 <Key1_State+0x38>
		{
			key1_state++;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <Key1_State+0x50>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <Key1_State+0x50>)
 80004c6:	801a      	strh	r2, [r3, #0]
 80004c8:	e002      	b.n	80004d0 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <Key1_State+0x50>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <Key1_State+0x50>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d101      	bne.n	80004dc <Key1_State+0x44>
	{
		return KEY_PRESS;
 80004d8:	2301      	movs	r3, #1
 80004da:	e000      	b.n	80004de <Key1_State+0x46>
	}
	return KEY_RELEASE;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000034 	.word	0x20000034

080004ec <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 80004f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	dd05      	ble.n	800050a <Motor_Ignore_Dead_Zone+0x1e>
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8000504:	b29b      	uxth	r3, r3
 8000506:	b21b      	sxth	r3, r3
 8000508:	e00a      	b.n	8000520 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 800050a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050e:	2b00      	cmp	r3, #0
 8000510:	da05      	bge.n	800051e <Motor_Ignore_Dead_Zone+0x32>
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8000518:	b29b      	uxth	r3, r3
 800051a:	b21b      	sxth	r3, r3
 800051c:	e000      	b.n	8000520 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
	...

0800052c <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	4810      	ldr	r0, [pc, #64]	; (8000574 <Motor_Init+0x48>)
 8000534:	f001 fc5e 	bl	8001df4 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000538:	2104      	movs	r1, #4
 800053a:	480e      	ldr	r0, [pc, #56]	; (8000574 <Motor_Init+0x48>)
 800053c:	f002 f976 	bl	800282c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000540:	2108      	movs	r1, #8
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <Motor_Init+0x48>)
 8000544:	f002 f972 	bl	800282c <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000548:	210c      	movs	r1, #12
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <Motor_Init+0x48>)
 800054c:	f001 fc52 	bl	8001df4 <HAL_TIM_PWM_Start>
    
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000550:	2100      	movs	r1, #0
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <Motor_Init+0x4c>)
 8000554:	f001 fc4e 	bl	8001df4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000558:	2104      	movs	r1, #4
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <Motor_Init+0x4c>)
 800055c:	f001 fc4a 	bl	8001df4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000560:	2108      	movs	r1, #8
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <Motor_Init+0x4c>)
 8000564:	f001 fc46 	bl	8001df4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000568:	210c      	movs	r1, #12
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <Motor_Init+0x4c>)
 800056c:	f001 fc42 	bl	8001df4 <HAL_TIM_PWM_Start>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000038 	.word	0x20000038
 8000578:	20000080 	.word	0x20000080

0800057c <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <Motor_Stop+0x14>
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000596:	fb03 f202 	mul.w	r2, r3, r2
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <Motor_Stop+0x90>)
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005a4:	fb03 f202 	mul.w	r2, r3, r2
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <Motor_Stop+0x90>)
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005b2:	fb03 f202 	mul.w	r2, r3, r2
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <Motor_Stop+0x90>)
 80005b8:	63da      	str	r2, [r3, #60]	; 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005c0:	fb03 f202 	mul.w	r2, r3, r2
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <Motor_Stop+0x90>)
 80005c6:	641a      	str	r2, [r3, #64]	; 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005ce:	fb03 f202 	mul.w	r2, r3, r2
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <Motor_Stop+0x94>)
 80005d4:	641a      	str	r2, [r3, #64]	; 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005dc:	fb03 f202 	mul.w	r2, r3, r2
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <Motor_Stop+0x94>)
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005ea:	fb03 f202 	mul.w	r2, r3, r2
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <Motor_Stop+0x94>)
 80005f0:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80005f8:	fb03 f202 	mul.w	r2, r3, r2
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <Motor_Stop+0x94>)
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40013400 	.word	0x40013400
 8000610:	40012c00 	.word	0x40012c00

08000614 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8000624:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff5f 	bl	80004ec <Motor_Ignore_Dead_Zone>
 800062e:	4603      	mov	r3, r0
 8000630:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 8000632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000636:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800063a:	db02      	blt.n	8000642 <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 800063c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000640:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 8000642:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000646:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 800064a:	dc02      	bgt.n	8000652 <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 800064c:	f24f 13f0 	movw	r3, #61936	; 0xf1f0
 8000650:	81fb      	strh	r3, [r7, #14]

    switch (id)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d867      	bhi.n	8000728 <Motor_Set_Pwm+0x114>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <Motor_Set_Pwm+0x4c>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000671 	.word	0x08000671
 8000664:	080006a3 	.word	0x080006a3
 8000668:	080006d5 	.word	0x080006d5
 800066c:	080006ff 	.word	0x080006ff
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8000670:	89fb      	ldrh	r3, [r7, #14]
 8000672:	425b      	negs	r3, r3
 8000674:	b29b      	uxth	r3, r3
 8000676:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8000678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db07      	blt.n	8000690 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8000680:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <Motor_Set_Pwm+0x120>)
 8000682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000686:	6353      	str	r3, [r2, #52]	; 0x34
            PWM_M1_B = 0;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <Motor_Set_Pwm+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 800068e:	e04c      	b.n	800072a <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <Motor_Set_Pwm+0x120>)
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
            PWM_M1_B = -pulse;
 8000696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800069a:	425a      	negs	r2, r3
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <Motor_Set_Pwm+0x120>)
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80006a0:	e043      	b.n	800072a <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	425b      	negs	r3, r3
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80006aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db07      	blt.n	80006c2 <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80006b2:	4a20      	ldr	r2, [pc, #128]	; (8000734 <Motor_Set_Pwm+0x120>)
 80006b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006b8:	63d3      	str	r3, [r2, #60]	; 0x3c
            PWM_M2_B = 0;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <Motor_Set_Pwm+0x120>)
 80006bc:	2200      	movs	r2, #0
 80006be:	641a      	str	r2, [r3, #64]	; 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80006c0:	e033      	b.n	800072a <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <Motor_Set_Pwm+0x120>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
            PWM_M2_B = -pulse;
 80006c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006cc:	425a      	negs	r2, r3
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <Motor_Set_Pwm+0x120>)
 80006d0:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80006d2:	e02a      	b.n	800072a <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 80006d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db07      	blt.n	80006ec <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <Motor_Set_Pwm+0x124>)
 80006de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
            PWM_M3_B = 0;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <Motor_Set_Pwm+0x124>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 80006ea:	e01e      	b.n	800072a <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <Motor_Set_Pwm+0x124>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40
            PWM_M3_B = -pulse;
 80006f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f6:	425a      	negs	r2, r3
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <Motor_Set_Pwm+0x124>)
 80006fa:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80006fc:	e015      	b.n	800072a <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 80006fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db07      	blt.n	8000716 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8000706:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <Motor_Set_Pwm+0x124>)
 8000708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800070c:	6393      	str	r3, [r2, #56]	; 0x38
            PWM_M4_B = 0;
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <Motor_Set_Pwm+0x124>)
 8000710:	2200      	movs	r2, #0
 8000712:	63da      	str	r2, [r3, #60]	; 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8000714:	e009      	b.n	800072a <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <Motor_Set_Pwm+0x124>)
 8000718:	2200      	movs	r2, #0
 800071a:	639a      	str	r2, [r3, #56]	; 0x38
            PWM_M4_B = -pulse;
 800071c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000720:	425a      	negs	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <Motor_Set_Pwm+0x124>)
 8000724:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8000726:	e000      	b.n	800072a <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8000728:	bf00      	nop
    }
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40013400 	.word	0x40013400
 8000738:	40012c00 	.word	0x40012c00

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a29      	ldr	r2, [pc, #164]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_GPIO_Init+0xc0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_GPIO_Init+0xc0>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <MX_GPIO_Init+0xc0>)
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_GPIO_Init+0xc0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0xc0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0xc0>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f242 0120 	movw	r1, #8224	; 0x2020
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <MX_GPIO_Init+0xc4>)
 80007b8:	f000 fe5b 	bl	8001472 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 80007bc:	f242 0320 	movw	r3, #8224	; 0x2020
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <MX_GPIO_Init+0xc4>)
 80007d6:	f000 fca1 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80007da:	2304      	movs	r3, #4
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_GPIO_Init+0xc8>)
 80007ee:	f000 fc95 	bl	800111c <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40011000 	.word	0x40011000
 8000804:	40011400 	.word	0x40011400

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fb1c 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f80b 	bl	800082a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff92 	bl	800073c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000818:	f000 f8b2 	bl	8000980 <MX_TIM1_Init>
  MX_TIM8_Init();
 800081c:	f000 f974 	bl	8000b08 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8000820:	f7ff fd1a 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8000824:	f7ff fd22 	bl	800026c <Bsp_Loop>
 8000828:	e7fc      	b.n	8000824 <main+0x1c>

0800082a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b090      	sub	sp, #64	; 0x40
 800082e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	2228      	movs	r2, #40	; 0x28
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f002 f9a9 	bl	8002b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085a:	2301      	movs	r3, #1
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000868:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fe2e 	bl	80014d4 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800087e:	f000 f819 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2102      	movs	r1, #2
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f89b 	bl	80019d8 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008a8:	f000 f804 	bl	80008b4 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3740      	adds	r7, #64	; 0x40
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_MspInit+0x5c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_MspInit+0x5c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x5c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x5c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x5c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x5c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x60>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_MspInit+0x60>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000
 8000920:	40010000 	.word	0x40010000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096a:	f000 fab3 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b096      	sub	sp, #88	; 0x58
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2220      	movs	r2, #32
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 f8e9 	bl	8002b90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009be:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009c0:	4a50      	ldr	r2, [pc, #320]	; (8000b04 <MX_TIM1_Init+0x184>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c4:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 80009d0:	4b4b      	ldr	r3, [pc, #300]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009d2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80009d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009de:	4b48      	ldr	r3, [pc, #288]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e4:	4b46      	ldr	r3, [pc, #280]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ea:	4845      	ldr	r0, [pc, #276]	; (8000b00 <MX_TIM1_Init+0x180>)
 80009ec:	f001 f95a 	bl	8001ca4 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009f6:	f7ff ff5d 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a04:	4619      	mov	r1, r3
 8000a06:	483e      	ldr	r0, [pc, #248]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000a08:	f001 fb6c 	bl	80020e4 <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a12:	f7ff ff4f 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a16:	483a      	ldr	r0, [pc, #232]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000a18:	f001 f993 	bl	8001d42 <HAL_TIM_PWM_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a22:	f7ff ff47 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a32:	4619      	mov	r1, r3
 8000a34:	4832      	ldr	r0, [pc, #200]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000a36:	f001 ffa5 	bl	8002984 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a40:	f7ff ff38 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2360      	movs	r3, #96	; 0x60
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4825      	ldr	r0, [pc, #148]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000a6a:	f001 fa7d 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a74:	f7ff ff1e 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481f      	ldr	r0, [pc, #124]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000a82:	f001 fa71 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a8c:	f7ff ff12 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	2208      	movs	r2, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	4819      	ldr	r0, [pc, #100]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000a9a:	f001 fa65 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000aa4:	f7ff ff06 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	220c      	movs	r2, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000ab2:	f001 fa59 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000abc:	f7ff fefa 	bl	80008b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000ae4:	f001 ffba 	bl	8002a5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000aee:	f7ff fee1 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM1_Init+0x180>)
 8000af4:	f000 f8fe 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 8000af8:	bf00      	nop
 8000afa:	3758      	adds	r7, #88	; 0x58
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000038 	.word	0x20000038
 8000b04:	40012c00 	.word	0x40012c00

08000b08 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b096      	sub	sp, #88	; 0x58
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 f825 	bl	8002b90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b46:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b48:	4a50      	ldr	r2, [pc, #320]	; (8000c8c <MX_TIM8_Init+0x184>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8000b58:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b5a:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000b5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b66:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6c:	4b46      	ldr	r3, [pc, #280]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b72:	4845      	ldr	r0, [pc, #276]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b74:	f001 f896 	bl	8001ca4 <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000b7e:	f7ff fe99 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	483e      	ldr	r0, [pc, #248]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000b90:	f001 faa8 	bl	80020e4 <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000b9a:	f7ff fe8b 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b9e:	483a      	ldr	r0, [pc, #232]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000ba0:	f001 f8cf 	bl	8001d42 <HAL_TIM_PWM_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000baa:	f7ff fe83 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4832      	ldr	r0, [pc, #200]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000bbe:	f001 fee1 	bl	8002984 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bc8:	f7ff fe74 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000bf2:	f001 f9b9 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000bfc:	f7ff fe5a 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	2204      	movs	r2, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000c0a:	f001 f9ad 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000c14:	f7ff fe4e 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4819      	ldr	r0, [pc, #100]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000c22:	f001 f9a1 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000c2c:	f7ff fe42 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	220c      	movs	r2, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000c3a:	f001 f995 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000c44:	f7ff fe36 	bl	80008b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000c6c:	f001 fef6 	bl	8002a5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000c76:	f7ff fe1d 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM8_Init+0x180>)
 8000c7c:	f000 f83a 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 8000c80:	bf00      	nop
 8000c82:	3758      	adds	r7, #88	; 0x58
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	40013400 	.word	0x40013400

08000c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_TIM_Base_MspInit+0x58>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10c      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000cba:	e010      	b.n	8000cde <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_TIM_Base_MspInit+0x60>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10b      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40013400 	.word	0x40013400

08000cf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a34      	ldr	r2, [pc, #208]	; (8000de0 <HAL_TIM_MspPostInit+0xec>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d143      	bne.n	8000d9c <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a32      	ldr	r2, [pc, #200]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a2c      	ldr	r2, [pc, #176]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d44:	2303      	movs	r3, #3
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4824      	ldr	r0, [pc, #144]	; (8000de8 <HAL_TIM_MspPostInit+0xf4>)
 8000d58:	f000 f9e0 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000d5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481e      	ldr	r0, [pc, #120]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000d72:	f000 f9d3 	bl	800111c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_TIM_MspPostInit+0xfc>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
 8000d94:	4a16      	ldr	r2, [pc, #88]	; (8000df0 <HAL_TIM_MspPostInit+0xfc>)
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000d9a:	e01d      	b.n	8000dd8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_TIM_MspPostInit+0x100>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d118      	bne.n	8000dd8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_TIM_MspPostInit+0xf0>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000dbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <HAL_TIM_MspPostInit+0x104>)
 8000dd4:	f000 f9a2 	bl	800111c <HAL_GPIO_Init>
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010000 	.word	0x40010000
 8000df4:	40013400 	.word	0x40013400
 8000df8:	40011000 	.word	0x40011000

08000dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e22:	f7ff fda6 	bl	8000972 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f001 fe8f 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2a:	f7ff fced 	bl	8000808 <main>
  bx lr
 8000e2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e38:	08002be0 	.word	0x08002be0
  ldr r2, =_sbss
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e40:	200000cc 	.word	0x200000cc

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x28>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f92b 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fd2c 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f935 	bl	8001102 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f90b 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	200000c8 	.word	0x200000c8

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200000c8 	.word	0x200000c8

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffe0 	bl	8000ef8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff90 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff49 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff5e 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff90 	bl	800100c <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5f 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb0 	bl	8001070 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b08b      	sub	sp, #44	; 0x2c
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e179      	b.n	8001424 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001130:	2201      	movs	r2, #1
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 8168 	bne.w	800141e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4a96      	ldr	r2, [pc, #600]	; (80013ac <HAL_GPIO_Init+0x290>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d05e      	beq.n	8001216 <HAL_GPIO_Init+0xfa>
 8001158:	4a94      	ldr	r2, [pc, #592]	; (80013ac <HAL_GPIO_Init+0x290>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d875      	bhi.n	800124a <HAL_GPIO_Init+0x12e>
 800115e:	4a94      	ldr	r2, [pc, #592]	; (80013b0 <HAL_GPIO_Init+0x294>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d058      	beq.n	8001216 <HAL_GPIO_Init+0xfa>
 8001164:	4a92      	ldr	r2, [pc, #584]	; (80013b0 <HAL_GPIO_Init+0x294>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d86f      	bhi.n	800124a <HAL_GPIO_Init+0x12e>
 800116a:	4a92      	ldr	r2, [pc, #584]	; (80013b4 <HAL_GPIO_Init+0x298>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d052      	beq.n	8001216 <HAL_GPIO_Init+0xfa>
 8001170:	4a90      	ldr	r2, [pc, #576]	; (80013b4 <HAL_GPIO_Init+0x298>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d869      	bhi.n	800124a <HAL_GPIO_Init+0x12e>
 8001176:	4a90      	ldr	r2, [pc, #576]	; (80013b8 <HAL_GPIO_Init+0x29c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d04c      	beq.n	8001216 <HAL_GPIO_Init+0xfa>
 800117c:	4a8e      	ldr	r2, [pc, #568]	; (80013b8 <HAL_GPIO_Init+0x29c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d863      	bhi.n	800124a <HAL_GPIO_Init+0x12e>
 8001182:	4a8e      	ldr	r2, [pc, #568]	; (80013bc <HAL_GPIO_Init+0x2a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d046      	beq.n	8001216 <HAL_GPIO_Init+0xfa>
 8001188:	4a8c      	ldr	r2, [pc, #560]	; (80013bc <HAL_GPIO_Init+0x2a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d85d      	bhi.n	800124a <HAL_GPIO_Init+0x12e>
 800118e:	2b12      	cmp	r3, #18
 8001190:	d82a      	bhi.n	80011e8 <HAL_GPIO_Init+0xcc>
 8001192:	2b12      	cmp	r3, #18
 8001194:	d859      	bhi.n	800124a <HAL_GPIO_Init+0x12e>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <HAL_GPIO_Init+0x80>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	08001217 	.word	0x08001217
 80011a0:	080011f1 	.word	0x080011f1
 80011a4:	08001203 	.word	0x08001203
 80011a8:	08001245 	.word	0x08001245
 80011ac:	0800124b 	.word	0x0800124b
 80011b0:	0800124b 	.word	0x0800124b
 80011b4:	0800124b 	.word	0x0800124b
 80011b8:	0800124b 	.word	0x0800124b
 80011bc:	0800124b 	.word	0x0800124b
 80011c0:	0800124b 	.word	0x0800124b
 80011c4:	0800124b 	.word	0x0800124b
 80011c8:	0800124b 	.word	0x0800124b
 80011cc:	0800124b 	.word	0x0800124b
 80011d0:	0800124b 	.word	0x0800124b
 80011d4:	0800124b 	.word	0x0800124b
 80011d8:	0800124b 	.word	0x0800124b
 80011dc:	0800124b 	.word	0x0800124b
 80011e0:	080011f9 	.word	0x080011f9
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	4a75      	ldr	r2, [pc, #468]	; (80013c0 <HAL_GPIO_Init+0x2a4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ee:	e02c      	b.n	800124a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	623b      	str	r3, [r7, #32]
          break;
 80011f6:	e029      	b.n	800124c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	3304      	adds	r3, #4
 80011fe:	623b      	str	r3, [r7, #32]
          break;
 8001200:	e024      	b.n	800124c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	3308      	adds	r3, #8
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e01f      	b.n	800124c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	330c      	adds	r3, #12
 8001212:	623b      	str	r3, [r7, #32]
          break;
 8001214:	e01a      	b.n	800124c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800121e:	2304      	movs	r3, #4
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e013      	b.n	800124c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800122c:	2308      	movs	r3, #8
 800122e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	611a      	str	r2, [r3, #16]
          break;
 8001236:	e009      	b.n	800124c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001238:	2308      	movs	r3, #8
 800123a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	615a      	str	r2, [r3, #20]
          break;
 8001242:	e003      	b.n	800124c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
          break;
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x130>
          break;
 800124a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2bff      	cmp	r3, #255	; 0xff
 8001250:	d801      	bhi.n	8001256 <HAL_GPIO_Init+0x13a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	e001      	b.n	800125a <HAL_GPIO_Init+0x13e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3304      	adds	r3, #4
 800125a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2bff      	cmp	r3, #255	; 0xff
 8001260:	d802      	bhi.n	8001268 <HAL_GPIO_Init+0x14c>
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	e002      	b.n	800126e <HAL_GPIO_Init+0x152>
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	3b08      	subs	r3, #8
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	210f      	movs	r1, #15
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	401a      	ands	r2, r3
 8001280:	6a39      	ldr	r1, [r7, #32]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80c1 	beq.w	800141e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <HAL_GPIO_Init+0x2a8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <HAL_GPIO_Init+0x2a8>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_GPIO_Init+0x2a8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012b4:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <HAL_GPIO_Init+0x2ac>)
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3c      	ldr	r2, [pc, #240]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d01f      	beq.n	8001320 <HAL_GPIO_Init+0x204>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <HAL_GPIO_Init+0x2b4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x200>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <HAL_GPIO_Init+0x2b8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1fc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a39      	ldr	r2, [pc, #228]	; (80013d8 <HAL_GPIO_Init+0x2bc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a38      	ldr	r2, [pc, #224]	; (80013dc <HAL_GPIO_Init+0x2c0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1f4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <HAL_GPIO_Init+0x2c4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1f0>
 8001308:	2305      	movs	r3, #5
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x206>
 800130c:	2306      	movs	r3, #6
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x206>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x206>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x206>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x206>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x206>
 8001320:	2300      	movs	r3, #0
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001332:	4925      	ldr	r1, [pc, #148]	; (80013c8 <HAL_GPIO_Init+0x2ac>)
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4924      	ldr	r1, [pc, #144]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4920      	ldr	r1, [pc, #128]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 8001364:	4013      	ands	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	491a      	ldr	r1, [pc, #104]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	4916      	ldr	r1, [pc, #88]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 800138c:	4013      	ands	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d025      	beq.n	80013e8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	4910      	ldr	r1, [pc, #64]	; (80013e4 <HAL_GPIO_Init+0x2c8>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
 80013a8:	e025      	b.n	80013f6 <HAL_GPIO_Init+0x2da>
 80013aa:	bf00      	nop
 80013ac:	10320000 	.word	0x10320000
 80013b0:	10310000 	.word	0x10310000
 80013b4:	10220000 	.word	0x10220000
 80013b8:	10210000 	.word	0x10210000
 80013bc:	10120000 	.word	0x10120000
 80013c0:	10110000 	.word	0x10110000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40011800 	.word	0x40011800
 80013e0:	40011c00 	.word	0x40011c00
 80013e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_GPIO_Init+0x324>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	4913      	ldr	r1, [pc, #76]	; (8001440 <HAL_GPIO_Init+0x324>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_GPIO_Init+0x324>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_GPIO_Init+0x324>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	60cb      	str	r3, [r1, #12]
 800140e:	e006      	b.n	800141e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_GPIO_Init+0x324>)
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	43db      	mvns	r3, r3
 8001418:	4909      	ldr	r1, [pc, #36]	; (8001440 <HAL_GPIO_Init+0x324>)
 800141a:	4013      	ands	r3, r2
 800141c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	3301      	adds	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f47f ae7e 	bne.w	8001130 <HAL_GPIO_Init+0x14>
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	372c      	adds	r7, #44	; 0x2c
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]
 800147e:	4613      	mov	r3, r2
 8001480:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001482:	787b      	ldrb	r3, [r7, #1]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800148e:	e003      	b.n	8001498 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	611a      	str	r2, [r3, #16]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43d9      	mvns	r1, r3
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	400b      	ands	r3, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e272      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8087 	beq.w	8001602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d00c      	beq.n	800151a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001500:	4b8f      	ldr	r3, [pc, #572]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d112      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
 800150c:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d10b      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151a:	4b89      	ldr	r3, [pc, #548]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d06c      	beq.n	8001600 <HAL_RCC_OscConfig+0x12c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d168      	bne.n	8001600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e24c      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x76>
 800153c:	4b80      	ldr	r3, [pc, #512]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a7f      	ldr	r2, [pc, #508]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e02e      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x98>
 8001552:	4b7b      	ldr	r3, [pc, #492]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7a      	ldr	r2, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b78      	ldr	r3, [pc, #480]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a77      	ldr	r2, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0xbc>
 8001576:	4b72      	ldr	r3, [pc, #456]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a71      	ldr	r2, [pc, #452]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6e      	ldr	r2, [pc, #440]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 8001590:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a6a      	ldr	r2, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fca2 	bl	8000ef8 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fc9e 	bl	8000ef8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e200      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe4>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc8e 	bl	8000ef8 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fc8a 	bl	8000ef8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1ec      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x10c>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160e:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
 8001626:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1c0      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4939      	ldr	r1, [pc, #228]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fc43 	bl	8000ef8 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fc3f 	bl	8000ef8 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1a1      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4927      	ldr	r1, [pc, #156]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc22 	bl	8000ef8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc1e 	bl	8000ef8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e180      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03a      	beq.n	8001758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_RCC_OscConfig+0x274>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fc02 	bl	8000ef8 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fbfe 	bl	8000ef8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e160      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f000 faa6 	bl	8001c68 <RCC_Delay>
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_RCC_OscConfig+0x274>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fbe8 	bl	8000ef8 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	e00f      	b.n	800174c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fbe4 	bl	8000ef8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d908      	bls.n	800174c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e146      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	42420000 	.word	0x42420000
 8001748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b92      	ldr	r3, [pc, #584]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e9      	bne.n	800172c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a6 	beq.w	80018b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b8b      	ldr	r3, [pc, #556]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10d      	bne.n	8001792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b88      	ldr	r3, [pc, #544]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a87      	ldr	r2, [pc, #540]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b85      	ldr	r3, [pc, #532]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b82      	ldr	r3, [pc, #520]	; (800199c <HAL_RCC_OscConfig+0x4c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4b7f      	ldr	r3, [pc, #508]	; (800199c <HAL_RCC_OscConfig+0x4c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7e      	ldr	r2, [pc, #504]	; (800199c <HAL_RCC_OscConfig+0x4c8>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fba5 	bl	8000ef8 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff fba1 	bl	8000ef8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e103      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	4b75      	ldr	r3, [pc, #468]	; (800199c <HAL_RCC_OscConfig+0x4c8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x312>
 80017d8:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a6e      	ldr	r2, [pc, #440]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x334>
 80017ee:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a69      	ldr	r2, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	4b67      	ldr	r3, [pc, #412]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	e01c      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x356>
 8001810:	4b61      	ldr	r3, [pc, #388]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a60      	ldr	r2, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 800182a:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a5a      	ldr	r2, [pc, #360]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d015      	beq.n	8001876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb55 	bl	8000ef8 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fb51 	bl	8000ef8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0b1      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ee      	beq.n	8001852 <HAL_RCC_OscConfig+0x37e>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff fb3f 	bl	8000ef8 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fb3b 	bl	8000ef8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e09b      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8087 	beq.w	80019ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d061      	beq.n	800198c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d146      	bne.n	800195e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_RCC_OscConfig+0x4cc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb0f 	bl	8000ef8 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fb0b 	bl	8000ef8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e06d      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d108      	bne.n	8001918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4921      	ldr	r1, [pc, #132]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a19      	ldr	r1, [r3, #32]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	430b      	orrs	r3, r1
 800192a:	491b      	ldr	r1, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fadf 	bl	8000ef8 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff fadb 	bl	8000ef8 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e03d      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x46a>
 800195c:	e035      	b.n	80019ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x4cc>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fac8 	bl	8000ef8 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fac4 	bl	8000ef8 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e026      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x498>
 800198a:	e01e      	b.n	80019ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e019      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000
 80019a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_OscConfig+0x500>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d0      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d910      	bls.n	8001a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4965      	ldr	r1, [pc, #404]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0b8      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a58      	ldr	r2, [pc, #352]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	494d      	ldr	r1, [pc, #308]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d040      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e07f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e073      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06b      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f023 0203 	bic.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4936      	ldr	r1, [pc, #216]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac8:	f7ff fa16 	bl	8000ef8 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7ff fa12 	bl	8000ef8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e053      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 020c 	and.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1eb      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d210      	bcs.n	8001b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 0207 	bic.w	r2, r3, #7
 8001b0e:	4922      	ldr	r1, [pc, #136]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e032      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4916      	ldr	r1, [pc, #88]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	490e      	ldr	r1, [pc, #56]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b66:	f000 f821 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	490a      	ldr	r1, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	5ccb      	ldrb	r3, [r1, r3]
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f974 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08002bc8 	.word	0x08002bc8
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b490      	push	{r4, r7}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xac>)
 8001bb4:	1d3c      	adds	r4, r7, #4
 8001bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bbc:	f240 2301 	movw	r3, #513	; 0x201
 8001bc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d002      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x40>
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x46>
 8001bea:	e02b      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bee:	623b      	str	r3, [r7, #32]
      break;
 8001bf0:	e02b      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	0c9b      	lsrs	r3, r3, #18
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3328      	adds	r3, #40	; 0x28
 8001bfc:	443b      	add	r3, r7
 8001bfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	0c5b      	lsrs	r3, r3, #17
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	3328      	adds	r3, #40	; 0x28
 8001c1a:	443b      	add	r3, r7
 8001c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c26:	fb03 f202 	mul.w	r2, r3, r2
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	e004      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c38:	fb02 f303 	mul.w	r3, r2, r3
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	623b      	str	r3, [r7, #32]
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c46:	623b      	str	r3, [r7, #32]
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc90      	pop	{r4, r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	08002bb8 	.word	0x08002bb8
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	007a1200 	.word	0x007a1200
 8001c64:	003d0900 	.word	0x003d0900

08001c68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <RCC_Delay+0x34>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <RCC_Delay+0x38>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0a5b      	lsrs	r3, r3, #9
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c84:	bf00      	nop
  }
  while (Delay --);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	60fa      	str	r2, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f9      	bne.n	8001c84 <RCC_Delay+0x1c>
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	10624dd3 	.word	0x10624dd3

08001ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e041      	b.n	8001d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe ffe0 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f000 fac2 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e041      	b.n	8001dd8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d106      	bne.n	8001d6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f839 	bl	8001de0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f000 fa73 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_TIM_PWM_Start+0x24>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e022      	b.n	8001e5e <HAL_TIM_PWM_Start+0x6a>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d109      	bne.n	8001e32 <HAL_TIM_PWM_Start+0x3e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	bf14      	ite	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	e015      	b.n	8001e5e <HAL_TIM_PWM_Start+0x6a>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d109      	bne.n	8001e4c <HAL_TIM_PWM_Start+0x58>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	e008      	b.n	8001e5e <HAL_TIM_PWM_Start+0x6a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e072      	b.n	8001f4c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <HAL_TIM_PWM_Start+0x82>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e74:	e013      	b.n	8001e9e <HAL_TIM_PWM_Start+0xaa>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d104      	bne.n	8001e86 <HAL_TIM_PWM_Start+0x92>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e84:	e00b      	b.n	8001e9e <HAL_TIM_PWM_Start+0xaa>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d104      	bne.n	8001e96 <HAL_TIM_PWM_Start+0xa2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e94:	e003      	b.n	8001e9e <HAL_TIM_PWM_Start+0xaa>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	6839      	ldr	r1, [r7, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fc9c 	bl	80027e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_TIM_PWM_Start+0x160>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_TIM_PWM_Start+0xcc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_TIM_PWM_Start+0x164>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_TIM_PWM_Start+0xd0>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_TIM_PWM_Start+0xd2>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_TIM_PWM_Start+0x160>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d018      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x122>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_TIM_PWM_Start+0x164>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x122>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef6:	d00e      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x122>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_TIM_PWM_Start+0x168>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x122>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_TIM_PWM_Start+0x16c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x122>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <HAL_TIM_PWM_Start+0x170>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d111      	bne.n	8001f3a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d010      	beq.n	8001f4a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f38:	e007      	b.n	8001f4a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40013400 	.word	0x40013400
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40000c00 	.word	0x40000c00

08001f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e0ac      	b.n	80020dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	f200 809f 	bhi.w	80020d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001f92:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fcd 	.word	0x08001fcd
 8001f9c:	080020d1 	.word	0x080020d1
 8001fa0:	080020d1 	.word	0x080020d1
 8001fa4:	080020d1 	.word	0x080020d1
 8001fa8:	0800200d 	.word	0x0800200d
 8001fac:	080020d1 	.word	0x080020d1
 8001fb0:	080020d1 	.word	0x080020d1
 8001fb4:	080020d1 	.word	0x080020d1
 8001fb8:	0800204f 	.word	0x0800204f
 8001fbc:	080020d1 	.word	0x080020d1
 8001fc0:	080020d1 	.word	0x080020d1
 8001fc4:	080020d1 	.word	0x080020d1
 8001fc8:	0800208f 	.word	0x0800208f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f9c4 	bl	8002360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0204 	bic.w	r2, r2, #4
 8001ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	619a      	str	r2, [r3, #24]
      break;
 800200a:	e062      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fa14 	bl	8002440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6999      	ldr	r1, [r3, #24]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	021a      	lsls	r2, r3, #8
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	619a      	str	r2, [r3, #24]
      break;
 800204c:	e041      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fa67 	bl	8002528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0208 	orr.w	r2, r2, #8
 8002068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0204 	bic.w	r2, r2, #4
 8002078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69d9      	ldr	r1, [r3, #28]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	61da      	str	r2, [r3, #28]
      break;
 800208c:	e021      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fabb 	bl	8002610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69d9      	ldr	r1, [r3, #28]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	021a      	lsls	r2, r3, #8
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	61da      	str	r2, [r3, #28]
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80020d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_TIM_ConfigClockSource+0x18>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0b3      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x180>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800211a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002122:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002134:	d03e      	beq.n	80021b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213a:	f200 8087 	bhi.w	800224c <HAL_TIM_ConfigClockSource+0x168>
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002142:	f000 8085 	beq.w	8002250 <HAL_TIM_ConfigClockSource+0x16c>
 8002146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214a:	d87f      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800214c:	2b70      	cmp	r3, #112	; 0x70
 800214e:	d01a      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xa2>
 8002150:	2b70      	cmp	r3, #112	; 0x70
 8002152:	d87b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 8002154:	2b60      	cmp	r3, #96	; 0x60
 8002156:	d050      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0x116>
 8002158:	2b60      	cmp	r3, #96	; 0x60
 800215a:	d877      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800215c:	2b50      	cmp	r3, #80	; 0x50
 800215e:	d03c      	beq.n	80021da <HAL_TIM_ConfigClockSource+0xf6>
 8002160:	2b50      	cmp	r3, #80	; 0x50
 8002162:	d873      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d058      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x136>
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d86f      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800216c:	2b30      	cmp	r3, #48	; 0x30
 800216e:	d064      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
 8002170:	2b30      	cmp	r3, #48	; 0x30
 8002172:	d86b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 8002174:	2b20      	cmp	r3, #32
 8002176:	d060      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
 8002178:	2b20      	cmp	r3, #32
 800217a:	d867      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05c      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
 8002180:	2b10      	cmp	r3, #16
 8002182:	d05a      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002184:	e062      	b.n	800224c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f000 fb06 	bl	80027a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
      break;
 80021b2:	e04e      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f000 faef 	bl	80027a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021d6:	609a      	str	r2, [r3, #8]
      break;
 80021d8:	e03b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f000 fa66 	bl	80026b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2150      	movs	r1, #80	; 0x50
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fabd 	bl	8002772 <TIM_ITRx_SetConfig>
      break;
 80021f8:	e02b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	461a      	mov	r2, r3
 8002208:	f000 fa84 	bl	8002714 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2160      	movs	r1, #96	; 0x60
 8002212:	4618      	mov	r0, r3
 8002214:	f000 faad 	bl	8002772 <TIM_ITRx_SetConfig>
      break;
 8002218:	e01b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 fa46 	bl	80026b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2140      	movs	r1, #64	; 0x40
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fa9d 	bl	8002772 <TIM_ITRx_SetConfig>
      break;
 8002238:	e00b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f000 fa94 	bl	8002772 <TIM_ITRx_SetConfig>
        break;
 800224a:	e002      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a33      	ldr	r2, [pc, #204]	; (800234c <TIM_Base_SetConfig+0xe0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a32      	ldr	r2, [pc, #200]	; (8002350 <TIM_Base_SetConfig+0xe4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00f      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002292:	d00b      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <TIM_Base_SetConfig+0xe8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <TIM_Base_SetConfig+0xec>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a2d      	ldr	r2, [pc, #180]	; (800235c <TIM_Base_SetConfig+0xf0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <TIM_Base_SetConfig+0xe0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <TIM_Base_SetConfig+0xe4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00f      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d00b      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <TIM_Base_SetConfig+0xe8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <TIM_Base_SetConfig+0xec>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_Base_SetConfig+0x82>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <TIM_Base_SetConfig+0xf0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <TIM_Base_SetConfig+0xe0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0xc8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <TIM_Base_SetConfig+0xe4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d103      	bne.n	800233c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40013400 	.word	0x40013400
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00

08002360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f023 0201 	bic.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f023 0302 	bic.w	r3, r3, #2
 80023a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <TIM_OC1_SetConfig+0xd8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_OC1_SetConfig+0x64>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <TIM_OC1_SetConfig+0xdc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d10c      	bne.n	80023de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0308 	bic.w	r3, r3, #8
 80023ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <TIM_OC1_SetConfig+0xd8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_OC1_SetConfig+0x8e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <TIM_OC1_SetConfig+0xdc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d111      	bne.n	8002412 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40013400 	.word	0x40013400

08002440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f023 0210 	bic.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0320 	bic.w	r3, r3, #32
 800248a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a21      	ldr	r2, [pc, #132]	; (8002520 <TIM_OC2_SetConfig+0xe0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_OC2_SetConfig+0x68>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <TIM_OC2_SetConfig+0xe4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10d      	bne.n	80024c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <TIM_OC2_SetConfig+0xe0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_OC2_SetConfig+0x94>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <TIM_OC2_SetConfig+0xe4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d113      	bne.n	80024fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40013400 	.word	0x40013400

08002528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a21      	ldr	r2, [pc, #132]	; (8002608 <TIM_OC3_SetConfig+0xe0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <TIM_OC3_SetConfig+0x66>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <TIM_OC3_SetConfig+0xe4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10d      	bne.n	80025aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <TIM_OC3_SetConfig+0xe0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <TIM_OC3_SetConfig+0x92>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a15      	ldr	r2, [pc, #84]	; (800260c <TIM_OC3_SetConfig+0xe4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d113      	bne.n	80025e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	621a      	str	r2, [r3, #32]
}
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40013400 	.word	0x40013400

08002610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <TIM_OC4_SetConfig+0xa0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_OC4_SetConfig+0x68>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <TIM_OC4_SetConfig+0xa4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d109      	bne.n	800268c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	621a      	str	r2, [r3, #32]
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40013400 	.word	0x40013400

080026b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f023 030a 	bic.w	r3, r3, #10
 80026f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f023 0210 	bic.w	r2, r3, #16
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800273e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	031b      	lsls	r3, r3, #12
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002750:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	621a      	str	r2, [r3, #32]
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	f043 0307 	orr.w	r3, r3, #7
 8002794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	609a      	str	r2, [r3, #8]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2201      	movs	r2, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	43db      	mvns	r3, r3
 8002806:	401a      	ands	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_TIMEx_PWMN_Start+0x24>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e022      	b.n	8002896 <HAL_TIMEx_PWMN_Start+0x6a>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d109      	bne.n	800286a <HAL_TIMEx_PWMN_Start+0x3e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e015      	b.n	8002896 <HAL_TIMEx_PWMN_Start+0x6a>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d109      	bne.n	8002884 <HAL_TIMEx_PWMN_Start+0x58>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e008      	b.n	8002896 <HAL_TIMEx_PWMN_Start+0x6a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e063      	b.n	8002966 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <HAL_TIMEx_PWMN_Start+0x82>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ac:	e013      	b.n	80028d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d104      	bne.n	80028be <HAL_TIMEx_PWMN_Start+0x92>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028bc:	e00b      	b.n	80028d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d104      	bne.n	80028ce <HAL_TIMEx_PWMN_Start+0xa2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	e003      	b.n	80028d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2204      	movs	r2, #4
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f90d 	bl	8002afe <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_TIMEx_PWMN_Start+0x144>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d018      	beq.n	8002930 <HAL_TIMEx_PWMN_Start+0x104>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_TIMEx_PWMN_Start+0x148>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_TIMEx_PWMN_Start+0x104>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d00e      	beq.n	8002930 <HAL_TIMEx_PWMN_Start+0x104>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_TIMEx_PWMN_Start+0x14c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_TIMEx_PWMN_Start+0x104>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <HAL_TIMEx_PWMN_Start+0x150>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_TIMEx_PWMN_Start+0x104>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_TIMEx_PWMN_Start+0x154>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d111      	bne.n	8002954 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b06      	cmp	r3, #6
 8002940:	d010      	beq.n	8002964 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002952:	e007      	b.n	8002964 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40013400 	.word	0x40013400
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	40000c00 	.word	0x40000c00

08002984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002998:	2302      	movs	r3, #2
 800299a:	e050      	b.n	8002a3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d018      	beq.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d00e      	beq.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d009      	beq.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10c      	bne.n	8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40013400 	.word	0x40013400
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00

08002a5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e03d      	b.n	8002af4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2204      	movs	r2, #4
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	401a      	ands	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1a      	ldr	r2, [r3, #32]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	621a      	str	r2, [r3, #32]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
	...

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	2600      	movs	r6, #0
 8002b4c:	4d0c      	ldr	r5, [pc, #48]	; (8002b80 <__libc_init_array+0x38>)
 8002b4e:	4c0d      	ldr	r4, [pc, #52]	; (8002b84 <__libc_init_array+0x3c>)
 8002b50:	1b64      	subs	r4, r4, r5
 8002b52:	10a4      	asrs	r4, r4, #2
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	f000 f822 	bl	8002ba0 <_init>
 8002b5c:	2600      	movs	r6, #0
 8002b5e:	4d0a      	ldr	r5, [pc, #40]	; (8002b88 <__libc_init_array+0x40>)
 8002b60:	4c0a      	ldr	r4, [pc, #40]	; (8002b8c <__libc_init_array+0x44>)
 8002b62:	1b64      	subs	r4, r4, r5
 8002b64:	10a4      	asrs	r4, r4, #2
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	08002bd8 	.word	0x08002bd8
 8002b84:	08002bd8 	.word	0x08002bd8
 8002b88:	08002bd8 	.word	0x08002bd8
 8002b8c:	08002bdc 	.word	0x08002bdc

08002b90 <memset>:
 8002b90:	4603      	mov	r3, r0
 8002b92:	4402      	add	r2, r0
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d100      	bne.n	8002b9a <memset+0xa>
 8002b98:	4770      	bx	lr
 8002b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b9e:	e7f9      	b.n	8002b94 <memset+0x4>

08002ba0 <_init>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr

08002bac <_fini>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr
