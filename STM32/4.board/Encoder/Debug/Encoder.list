
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000582c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005ae8  08005ae8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ae8  08005ae8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  08005b60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005b60  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1c8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a06  00000000  00000000  0002d261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00030af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c28f  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d86  00000000  00000000  0004dabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a314  00000000  00000000  00060845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fab59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000fabac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080059f8 	.word	0x080059f8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080059f8 	.word	0x080059f8

08000224 <Bsp_Led_Show_State_Handle>:
#include "bsp.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f002 fa25 	bl	8002696 <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200000a0 	.word	0x200000a0
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 f8cf 	bl	8000400 <Beep_On_Time>
	Motor_Init();
 8000262:	f000 fa3f 	bl	80006e4 <Motor_Init>
	Encoder_Init();
 8000266:	f000 f9c7 	bl	80005f8 <Encoder_Init>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <Bsp_Loop>:
int show_encoder = 0;

// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 8000276:	2001      	movs	r0, #1
 8000278:	f000 f9ea 	bl	8000650 <Key1_State>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d057      	beq.n	8000332 <Bsp_Loop+0xc2>
	{
		Beep_On_Time(50);
 8000282:	2032      	movs	r0, #50	; 0x32
 8000284:	f000 f8bc 	bl	8000400 <Beep_On_Time>
		static int state = 0;
		state++;
 8000288:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <Bsp_Loop+0x114>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	4a3d      	ldr	r2, [pc, #244]	; (8000384 <Bsp_Loop+0x114>)
 8000290:	6013      	str	r3, [r2, #0]
		int speed = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
		if (state == 1)
 8000296:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <Bsp_Loop+0x114>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d11a      	bne.n	80002d4 <Bsp_Loop+0x64>
		{
			speed = 2000;
 800029e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002a2:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	b21b      	sxth	r3, r3
 80002a8:	4619      	mov	r1, r3
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 fa8e 	bl	80007cc <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	b21b      	sxth	r3, r3
 80002b4:	4619      	mov	r1, r3
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fa88 	bl	80007cc <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	b21b      	sxth	r3, r3
 80002c0:	4619      	mov	r1, r3
 80002c2:	2002      	movs	r0, #2
 80002c4:	f000 fa82 	bl	80007cc <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	b21b      	sxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	2003      	movs	r0, #3
 80002d0:	f000 fa7c 	bl	80007cc <Motor_Set_Pwm>
		}
		if (state == 2)
 80002d4:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <Bsp_Loop+0x114>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d102      	bne.n	80002e2 <Bsp_Loop+0x72>
		{
			Motor_Stop(0);
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 fa29 	bl	8000734 <Motor_Stop>
		}
		if (state == 3)
 80002e2:	4b28      	ldr	r3, [pc, #160]	; (8000384 <Bsp_Loop+0x114>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	d119      	bne.n	800031e <Bsp_Loop+0xae>
		{
			speed = -2000;
 80002ea:	4b27      	ldr	r3, [pc, #156]	; (8000388 <Bsp_Loop+0x118>)
 80002ec:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	b21b      	sxth	r3, r3
 80002f2:	4619      	mov	r1, r3
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 fa69 	bl	80007cc <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	b21b      	sxth	r3, r3
 80002fe:	4619      	mov	r1, r3
 8000300:	2001      	movs	r0, #1
 8000302:	f000 fa63 	bl	80007cc <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	b21b      	sxth	r3, r3
 800030a:	4619      	mov	r1, r3
 800030c:	2002      	movs	r0, #2
 800030e:	f000 fa5d 	bl	80007cc <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	b21b      	sxth	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	2003      	movs	r0, #3
 800031a:	f000 fa57 	bl	80007cc <Motor_Set_Pwm>
		}
		if (state == 4)
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <Bsp_Loop+0x114>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b04      	cmp	r3, #4
 8000324:	d105      	bne.n	8000332 <Bsp_Loop+0xc2>
		{
			state = 0;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <Bsp_Loop+0x114>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
			Motor_Stop(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f000 fa01 	bl	8000734 <Motor_Stop>
		}
	}

	show_encoder++;
 8000332:	4b16      	ldr	r3, [pc, #88]	; (800038c <Bsp_Loop+0x11c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	4a14      	ldr	r2, [pc, #80]	; (800038c <Bsp_Loop+0x11c>)
 800033a:	6013      	str	r3, [r2, #0]
	if (show_encoder > 10)
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <Bsp_Loop+0x11c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b0a      	cmp	r3, #10
 8000342:	dd12      	ble.n	800036a <Bsp_Loop+0xfa>
	{
		show_encoder = 0;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <Bsp_Loop+0x11c>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
		Encoder_Get_ALL(encoder);
 800034a:	4811      	ldr	r0, [pc, #68]	; (8000390 <Bsp_Loop+0x120>)
 800034c:	f000 f8fc 	bl	8000548 <Encoder_Get_ALL>
		printf("Encoder:%d, %d, %d, %d\n", encoder[0], encoder[1], encoder[2], encoder[3]);
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <Bsp_Loop+0x120>)
 8000352:	6819      	ldr	r1, [r3, #0]
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <Bsp_Loop+0x120>)
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <Bsp_Loop+0x120>)
 800035a:	6898      	ldr	r0, [r3, #8]
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <Bsp_Loop+0x120>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	4603      	mov	r3, r0
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <Bsp_Loop+0x124>)
 8000366:	f004 fbb3 	bl	8004ad0 <iprintf>
	}

	Encoder_Update_Count();
 800036a:	f000 f911 	bl	8000590 <Encoder_Update_Count>
	Bsp_Led_Show_State_Handle();
 800036e:	f7ff ff59 	bl	8000224 <Bsp_Led_Show_State_Handle>
	Beep_Timeout_Close_Handle();
 8000372:	f000 f885 	bl	8000480 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f001 faa4 	bl	80018c4 <HAL_Delay>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200000a4 	.word	0x200000a4
 8000388:	fffff830 	.word	0xfffff830
 800038c:	2000009c 	.word	0x2000009c
 8000390:	2000008c 	.word	0x2000008c
 8000394:	08005a10 	.word	0x08005a10

08000398 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 80003a2:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <Beep_Set_Time+0x1c>)
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	8013      	strh	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	200000a8 	.word	0x200000a8

080003b8 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	return beep_on_time;
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <Beep_Get_Time+0x10>)
 80003be:	881b      	ldrh	r3, [r3, #0]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	200000a8 	.word	0x200000a8

080003cc <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 80003d6:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <Beep_Set_State+0x1c>)
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	7013      	strb	r3, [r2, #0]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	200000aa 	.word	0x200000aa

080003ec <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	return beep_state;
 80003f0:	4b02      	ldr	r3, [pc, #8]	; (80003fc <Beep_Get_State+0x10>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	200000aa 	.word	0x200000aa

08000400 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d10b      	bne.n	8000428 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000410:	2001      	movs	r0, #1
 8000412:	f7ff ffdb 	bl	80003cc <Beep_Set_State>
		Beep_Set_Time(0);
 8000416:	2000      	movs	r0, #0
 8000418:	f7ff ffbe 	bl	8000398 <Beep_Set_Time>
		BEEP_ON();
 800041c:	2201      	movs	r2, #1
 800041e:	2120      	movs	r1, #32
 8000420:	4815      	ldr	r0, [pc, #84]	; (8000478 <Beep_On_Time+0x78>)
 8000422:	f002 f920 	bl	8002666 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8000426:	e022      	b.n	800046e <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000428:	88fb      	ldrh	r3, [r7, #6]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d10b      	bne.n	8000446 <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff ffcc 	bl	80003cc <Beep_Set_State>
		Beep_Set_Time(0);
 8000434:	2000      	movs	r0, #0
 8000436:	f7ff ffaf 	bl	8000398 <Beep_Set_Time>
		BEEP_OFF();
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	480e      	ldr	r0, [pc, #56]	; (8000478 <Beep_On_Time+0x78>)
 8000440:	f002 f911 	bl	8002666 <HAL_GPIO_WritePin>
}
 8000444:	e013      	b.n	800046e <Beep_On_Time+0x6e>
		if (time >= 10)
 8000446:	88fb      	ldrh	r3, [r7, #6]
 8000448:	2b09      	cmp	r3, #9
 800044a:	d910      	bls.n	800046e <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 800044c:	2002      	movs	r0, #2
 800044e:	f7ff ffbd 	bl	80003cc <Beep_Set_State>
			Beep_Set_Time(time / 10);
 8000452:	88fb      	ldrh	r3, [r7, #6]
 8000454:	4a09      	ldr	r2, [pc, #36]	; (800047c <Beep_On_Time+0x7c>)
 8000456:	fba2 2303 	umull	r2, r3, r2, r3
 800045a:	08db      	lsrs	r3, r3, #3
 800045c:	b29b      	uxth	r3, r3
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff9a 	bl	8000398 <Beep_Set_Time>
			BEEP_ON();
 8000464:	2201      	movs	r2, #1
 8000466:	2120      	movs	r1, #32
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <Beep_On_Time+0x78>)
 800046a:	f002 f8fc 	bl	8002666 <HAL_GPIO_WritePin>
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40011000 	.word	0x40011000
 800047c:	cccccccd 	.word	0xcccccccd

08000480 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 8000484:	f7ff ffb2 	bl	80003ec <Beep_Get_State>
 8000488:	4603      	mov	r3, r0
 800048a:	2b02      	cmp	r3, #2
 800048c:	d113      	bne.n	80004b6 <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 800048e:	f7ff ff93 	bl	80003b8 <Beep_Get_Time>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d006      	beq.n	80004a6 <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <Beep_Timeout_Close_Handle+0x3c>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	3b01      	subs	r3, #1
 800049e:	b29a      	uxth	r2, r3
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <Beep_Timeout_Close_Handle+0x3c>)
 80004a2:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 80004a4:	e007      	b.n	80004b6 <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <Beep_Timeout_Close_Handle+0x40>)
 80004ac:	f002 f8db 	bl	8002666 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff8b 	bl	80003cc <Beep_Set_State>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000a8 	.word	0x200000a8
 80004c0:	40011000 	.word	0x40011000

080004c4 <Encoder_Read_CNT>:
 * @Note: 
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1, MOTOR_ID_M2, MOTOR_ID_M3, MOTOR_ID_M4
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	81fb      	strh	r3, [r7, #14]
	switch(Motor_id)
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d829      	bhi.n	800052c <Encoder_Read_CNT+0x68>
 80004d8:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <Encoder_Read_CNT+0x1c>)
 80004da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004de:	bf00      	nop
 80004e0:	080004f1 	.word	0x080004f1
 80004e4:	08000503 	.word	0x08000503
 80004e8:	08000511 	.word	0x08000511
 80004ec:	0800051f 	.word	0x0800051f
	{
	case MOTOR_ID_M1:  Encoder_TIM = (short)TIM2 -> CNT; TIM2 -> CNT = 0; break;
 80004f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f6:	81fb      	strh	r3, [r7, #14]
 80004f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fc:	2200      	movs	r2, #0
 80004fe:	625a      	str	r2, [r3, #36]	; 0x24
 8000500:	e015      	b.n	800052e <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M2:  Encoder_TIM = (short)TIM4 -> CNT; TIM4 -> CNT = 0; break;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <Encoder_Read_CNT+0x78>)
 8000504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000506:	81fb      	strh	r3, [r7, #14]
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <Encoder_Read_CNT+0x78>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
 800050e:	e00e      	b.n	800052e <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M3:  Encoder_TIM = (short)TIM5 -> CNT; TIM5 -> CNT = 0; break;
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <Encoder_Read_CNT+0x7c>)
 8000512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000514:	81fb      	strh	r3, [r7, #14]
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <Encoder_Read_CNT+0x7c>)
 8000518:	2200      	movs	r2, #0
 800051a:	625a      	str	r2, [r3, #36]	; 0x24
 800051c:	e007      	b.n	800052e <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M4:  Encoder_TIM = (short)TIM3 -> CNT; TIM3 -> CNT = 0; break;
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <Encoder_Read_CNT+0x80>)
 8000520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000522:	81fb      	strh	r3, [r7, #14]
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <Encoder_Read_CNT+0x80>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
 800052a:	e000      	b.n	800052e <Encoder_Read_CNT+0x6a>
	default:  break;
 800052c:	bf00      	nop
	}
	return Encoder_TIM;
 800052e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40000800 	.word	0x40000800
 8000540:	40000c00 	.word	0x40000c00
 8000544:	40000400 	.word	0x40000400

08000548 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int* Encoder_all)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <Encoder_Get_ALL+0x38>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <Encoder_Get_ALL+0x3c>)
 800055e:	6812      	ldr	r2, [r2, #0]
 8000560:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3308      	adds	r3, #8
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <Encoder_Get_ALL+0x40>)
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	330c      	adds	r3, #12
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <Encoder_Get_ALL+0x44>)
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	601a      	str	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	200000ac 	.word	0x200000ac
 8000584:	200000b0 	.word	0x200000b0
 8000588:	200000b4 	.word	0x200000b4
 800058c:	200000b8 	.word	0x200000b8

08000590 <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	// g_Encoder_M1_Now += Encoder_Read_CNT(MOTOR_ID_M1);
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff95 	bl	80004c4 <Encoder_Read_CNT>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <Encoder_Update_Count+0x58>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <Encoder_Update_Count+0x58>)
 80005a6:	6013      	str	r3, [r2, #0]

	g_Encoder_M2_Now += Encoder_Read_CNT(MOTOR_ID_M2);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f7ff ff8b 	bl	80004c4 <Encoder_Read_CNT>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <Encoder_Update_Count+0x5c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <Encoder_Update_Count+0x5c>)
 80005ba:	6013      	str	r3, [r2, #0]
	// g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);

	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 80005bc:	2002      	movs	r0, #2
 80005be:	f7ff ff81 	bl	80004c4 <Encoder_Read_CNT>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <Encoder_Update_Count+0x60>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <Encoder_Update_Count+0x60>)
 80005ce:	6013      	str	r3, [r2, #0]
	// g_Encoder_M3_Now -= Encoder_Read_CNT(MOTOR_ID_M3);

	// g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
	g_Encoder_M4_Now -= Encoder_Read_CNT(MOTOR_ID_M4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f7ff ff77 	bl	80004c4 <Encoder_Read_CNT>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <Encoder_Update_Count+0x64>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <Encoder_Update_Count+0x64>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	200000b0 	.word	0x200000b0
 80005f0:	200000b4 	.word	0x200000b4
 80005f4:	200000b8 	.word	0x200000b8

080005f8 <Encoder_Init>:

// Initializing timer  初始化定时器
void Encoder_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80005fc:	2104      	movs	r1, #4
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <Encoder_Init+0x28>)
 8000600:	f002 fe80 	bl	8003304 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000604:	2104      	movs	r1, #4
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <Encoder_Init+0x2c>)
 8000608:	f002 fe7c 	bl	8003304 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800060c:	2104      	movs	r1, #4
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <Encoder_Init+0x30>)
 8000610:	f002 fe78 	bl	8003304 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000614:	2104      	movs	r1, #4
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <Encoder_Init+0x34>)
 8000618:	f002 fe74 	bl	8003304 <HAL_TIM_Encoder_Start>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000010c 	.word	0x2000010c
 8000624:	20000154 	.word	0x20000154
 8000628:	2000019c 	.word	0x2000019c
 800062c:	200001e4 	.word	0x200001e4

08000630 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000634:	2104      	movs	r1, #4
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <Key1_is_Press+0x1c>)
 8000638:	f001 fffe 	bl	8002638 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40011400 	.word	0x40011400

08000650 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800065a:	f7ff ffe9 	bl	8000630 <Key1_is_Press>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d10e      	bne.n	8000682 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <Key1_State+0x50>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3301      	adds	r3, #1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	429a      	cmp	r2, r3
 8000672:	da09      	bge.n	8000688 <Key1_State+0x38>
		{
			key1_state++;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <Key1_State+0x50>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <Key1_State+0x50>)
 800067e:	801a      	strh	r2, [r3, #0]
 8000680:	e002      	b.n	8000688 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <Key1_State+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <Key1_State+0x50>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d101      	bne.n	8000694 <Key1_State+0x44>
	{
		return KEY_PRESS;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000bc 	.word	0x200000bc

080006a4 <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 80006ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd05      	ble.n	80006c2 <Motor_Ignore_Dead_Zone+0x1e>
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b21b      	sxth	r3, r3
 80006c0:	e00a      	b.n	80006d8 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 80006c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da05      	bge.n	80006d6 <Motor_Ignore_Dead_Zone+0x32>
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	e000      	b.n	80006d8 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
	...

080006e4 <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4810      	ldr	r0, [pc, #64]	; (800072c <Motor_Init+0x48>)
 80006ec:	f002 fcae 	bl	800304c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006f0:	2104      	movs	r1, #4
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <Motor_Init+0x48>)
 80006f4:	f003 faf6 	bl	8003ce4 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006f8:	2108      	movs	r1, #8
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <Motor_Init+0x48>)
 80006fc:	f003 faf2 	bl	8003ce4 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000700:	210c      	movs	r1, #12
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <Motor_Init+0x48>)
 8000704:	f002 fca2 	bl	800304c <HAL_TIM_PWM_Start>
    
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <Motor_Init+0x4c>)
 800070c:	f002 fc9e 	bl	800304c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000710:	2104      	movs	r1, #4
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <Motor_Init+0x4c>)
 8000714:	f002 fc9a 	bl	800304c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000718:	2108      	movs	r1, #8
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <Motor_Init+0x4c>)
 800071c:	f002 fc96 	bl	800304c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000720:	210c      	movs	r1, #12
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <Motor_Init+0x4c>)
 8000724:	f002 fc92 	bl	800304c <HAL_TIM_PWM_Start>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000c4 	.word	0x200000c4
 8000730:	2000022c 	.word	0x2000022c

08000734 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <Motor_Stop+0x14>
 8000744:	2301      	movs	r3, #1
 8000746:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800074e:	fb03 f202 	mul.w	r2, r3, r2
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <Motor_Stop+0x90>)
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800075c:	fb03 f202 	mul.w	r2, r3, r2
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <Motor_Stop+0x90>)
 8000762:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800076a:	fb03 f202 	mul.w	r2, r3, r2
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <Motor_Stop+0x90>)
 8000770:	63da      	str	r2, [r3, #60]	; 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000778:	fb03 f202 	mul.w	r2, r3, r2
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <Motor_Stop+0x90>)
 800077e:	641a      	str	r2, [r3, #64]	; 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000786:	fb03 f202 	mul.w	r2, r3, r2
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <Motor_Stop+0x94>)
 800078c:	641a      	str	r2, [r3, #64]	; 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000794:	fb03 f202 	mul.w	r2, r3, r2
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <Motor_Stop+0x94>)
 800079a:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80007a2:	fb03 f202 	mul.w	r2, r3, r2
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <Motor_Stop+0x94>)
 80007a8:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80007b0:	fb03 f202 	mul.w	r2, r3, r2
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <Motor_Stop+0x94>)
 80007b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40013400 	.word	0x40013400
 80007c8:	40012c00 	.word	0x40012c00

080007cc <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	460a      	mov	r2, r1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 80007dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5f 	bl	80006a4 <Motor_Ignore_Dead_Zone>
 80007e6:	4603      	mov	r3, r0
 80007e8:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 80007ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ee:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80007f2:	db02      	blt.n	80007fa <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 80007f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80007f8:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 80007fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007fe:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 8000802:	dc02      	bgt.n	800080a <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8000804:	f24f 13f0 	movw	r3, #61936	; 0xf1f0
 8000808:	81fb      	strh	r3, [r7, #14]

    switch (id)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d867      	bhi.n	80008e0 <Motor_Set_Pwm+0x114>
 8000810:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <Motor_Set_Pwm+0x4c>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000829 	.word	0x08000829
 800081c:	0800085b 	.word	0x0800085b
 8000820:	0800088d 	.word	0x0800088d
 8000824:	080008b7 	.word	0x080008b7
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	425b      	negs	r3, r3
 800082c:	b29b      	uxth	r3, r3
 800082e:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8000830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db07      	blt.n	8000848 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8000838:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <Motor_Set_Pwm+0x120>)
 800083a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083e:	6353      	str	r3, [r2, #52]	; 0x34
            PWM_M1_B = 0;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <Motor_Set_Pwm+0x120>)
 8000842:	2200      	movs	r2, #0
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 8000846:	e04c      	b.n	80008e2 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <Motor_Set_Pwm+0x120>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
            PWM_M1_B = -pulse;
 800084e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000852:	425a      	negs	r2, r3
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <Motor_Set_Pwm+0x120>)
 8000856:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000858:	e043      	b.n	80008e2 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	425b      	negs	r3, r3
 800085e:	b29b      	uxth	r3, r3
 8000860:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8000862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000866:	2b00      	cmp	r3, #0
 8000868:	db07      	blt.n	800087a <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 800086a:	4a20      	ldr	r2, [pc, #128]	; (80008ec <Motor_Set_Pwm+0x120>)
 800086c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000870:	63d3      	str	r3, [r2, #60]	; 0x3c
            PWM_M2_B = 0;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <Motor_Set_Pwm+0x120>)
 8000874:	2200      	movs	r2, #0
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 8000878:	e033      	b.n	80008e2 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <Motor_Set_Pwm+0x120>)
 800087c:	2200      	movs	r2, #0
 800087e:	63da      	str	r2, [r3, #60]	; 0x3c
            PWM_M2_B = -pulse;
 8000880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000884:	425a      	negs	r2, r3
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <Motor_Set_Pwm+0x120>)
 8000888:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800088a:	e02a      	b.n	80008e2 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 800088c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db07      	blt.n	80008a4 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8000894:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <Motor_Set_Pwm+0x124>)
 8000896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
            PWM_M3_B = 0;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <Motor_Set_Pwm+0x124>)
 800089e:	2200      	movs	r2, #0
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 80008a2:	e01e      	b.n	80008e2 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <Motor_Set_Pwm+0x124>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
            PWM_M3_B = -pulse;
 80008aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ae:	425a      	negs	r2, r3
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <Motor_Set_Pwm+0x124>)
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80008b4:	e015      	b.n	80008e2 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 80008b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db07      	blt.n	80008ce <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 80008be:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <Motor_Set_Pwm+0x124>)
 80008c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008c4:	6393      	str	r3, [r2, #56]	; 0x38
            PWM_M4_B = 0;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <Motor_Set_Pwm+0x124>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	63da      	str	r2, [r3, #60]	; 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 80008cc:	e009      	b.n	80008e2 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <Motor_Set_Pwm+0x124>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	639a      	str	r2, [r3, #56]	; 0x38
            PWM_M4_B = -pulse;
 80008d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d8:	425a      	negs	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <Motor_Set_Pwm+0x124>)
 80008dc:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 80008de:	e000      	b.n	80008e2 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 80008e0:	bf00      	nop
    }
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40013400 	.word	0x40013400
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <USART1_Send_U8>:
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
}

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80008fe:	1df9      	adds	r1, r7, #7
 8000900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000904:	2201      	movs	r2, #1
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <USART1_Send_U8+0x20>)
 8000908:	f003 fbc6 	bl	8004098 <HAL_UART_Transmit>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000274 	.word	0x20000274

08000918 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_UART_RxCpltCallback+0x24>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffe5 	bl	80008f4 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	4903      	ldr	r1, [pc, #12]	; (800093c <HAL_UART_RxCpltCallback+0x24>)
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <HAL_UART_RxCpltCallback+0x28>)
 8000930:	f003 fc44 	bl	80041bc <HAL_UART_Receive_IT>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000be 	.word	0x200000be
 8000940:	20000274 	.word	0x20000274

08000944 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800094c:	1d39      	adds	r1, r7, #4
 800094e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000952:	2201      	movs	r2, #1
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <__io_putchar+0x20>)
 8000956:	f003 fb9f 	bl	8004098 <HAL_UART_Transmit>
    return ch;
 800095a:	687b      	ldr	r3, [r7, #4]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000274 	.word	0x20000274

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_DMA_Init+0x38>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <MX_DMA_Init+0x38>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_DMA_Init+0x38>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200e      	movs	r0, #14
 800098c:	f001 f895 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000990:	200e      	movs	r0, #14
 8000992:	f001 f8ae 	bl	8001af2 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009d6:	f043 0320 	orr.w	r3, r3, #32
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f242 0120 	movw	r1, #8224	; 0x2020
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <MX_GPIO_Init+0xc4>)
 8000a20:	f001 fe21 	bl	8002666 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8000a24:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480a      	ldr	r0, [pc, #40]	; (8000a68 <MX_GPIO_Init+0xc4>)
 8000a3e:	f001 fc67 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000a42:	2304      	movs	r3, #4
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0xc8>)
 8000a56:	f001 fc5b 	bl	8002310 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40011400 	.word	0x40011400

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a74:	f000 fec4 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f817 	bl	8000aaa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f7ff ff92 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a80:	f000 f972 	bl	8000d68 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000a84:	f000 fb84 	bl	8001190 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000a88:	f000 fa32 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a8c:	f000 fa84 	bl	8000f98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a90:	f000 fad6 	bl	8001040 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000a94:	f000 fde6 	bl	8001664 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000a98:	f7ff ff66 	bl	8000968 <MX_DMA_Init>
  MX_TIM5_Init();
 8000a9c:	f000 fb24 	bl	80010e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8000aa0:	f7ff fbda 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8000aa4:	f7ff fbe4 	bl	8000270 <Bsp_Loop>
 8000aa8:	e7fc      	b.n	8000aa4 <main+0x34>

08000aaa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b090      	sub	sp, #64	; 0x40
 8000aae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	2228      	movs	r2, #40	; 0x28
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 f801 	bl	8004ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ae8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fde8 	bl	80026c8 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000afe:	f000 f819 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2302      	movs	r3, #2
 8000b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 f855 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b28:	f000 f804 	bl	8000b34 <Error_Handler>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3740      	adds	r7, #64	; 0x40
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_MspInit+0x60>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_MspInit+0x60>)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 fe4f 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DMA1_Channel4_IRQHandler+0x10>)
 8000bfa:	f001 f94d 	bl	8001e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200002b8 	.word	0x200002b8

08000c08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <USART1_IRQHandler+0x10>)
 8000c0e:	f003 fb05 	bl	800421c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000274 	.word	0x20000274

08000c1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e00a      	b.n	8000c44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2e:	f3af 8000 	nop.w
 8000c32:	4601      	mov	r1, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	b2ca      	uxtb	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dbf0      	blt.n	8000c2e <_read+0x12>
	}

return len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e009      	b.n	8000c7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fe67 	bl	8000944 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf1      	blt.n	8000c68 <_write+0x12>
	}
	return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_close>:

int _close(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb4:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b085      	sub	sp, #20
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
	...

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f003 fea4 	bl	8004a6c <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000c000 	.word	0x2000c000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	200000c0 	.word	0x200000c0
 8000d58:	20000310 	.word	0x20000310

08000d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b096      	sub	sp, #88	; 0x58
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fe8d 	bl	8004ac0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da6:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000da8:	4a50      	ldr	r2, [pc, #320]	; (8000eec <MX_TIM1_Init+0x184>)
 8000daa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dac:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8000db8:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000dba:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000dbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc6:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dcc:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd2:	4845      	ldr	r0, [pc, #276]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000dd4:	f002 f892 	bl	8002efc <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dde:	f7ff fea9 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000de8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dec:	4619      	mov	r1, r3
 8000dee:	483e      	ldr	r0, [pc, #248]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000df0:	f002 fbd4 	bl	800359c <HAL_TIM_ConfigClockSource>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dfa:	f7ff fe9b 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dfe:	483a      	ldr	r0, [pc, #232]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000e00:	f002 f8cb 	bl	8002f9a <HAL_TIM_PWM_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e0a:	f7ff fe93 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000e1e:	f003 f80d 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e28:	f7ff fe84 	bl	8000b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2c:	2360      	movs	r3, #96	; 0x60
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000e52:	f002 fae5 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e5c:	f7ff fe6a 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	2204      	movs	r2, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	481f      	ldr	r0, [pc, #124]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000e6a:	f002 fad9 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e74:	f7ff fe5e 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000e82:	f002 facd 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e8c:	f7ff fe52 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	220c      	movs	r2, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000e9a:	f002 fac1 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000ea4:	f7ff fe46 	bl	8000b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000ecc:	f003 f822 	bl	8003f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000ed6:	f7ff fe2d 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM1_Init+0x180>)
 8000edc:	f000 fb3e 	bl	800155c <HAL_TIM_MspPostInit>

}
 8000ee0:	bf00      	nop
 8000ee2:	3758      	adds	r7, #88	; 0x58
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200000c4 	.word	0x200000c4
 8000eec:	40012c00 	.word	0x40012c00

08000ef0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2224      	movs	r2, #36	; 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fdde 	bl	8004ac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f34:	2303      	movs	r3, #3
 8000f36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f60:	f002 f92e 	bl	80031c0 <HAL_TIM_Encoder_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f6a:	f7ff fde3 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f7c:	f002 ff5e 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f86:	f7ff fdd5 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000010c 	.word	0x2000010c

08000f98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2224      	movs	r2, #36	; 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fd8a 	bl	8004ac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_TIM3_Init+0xa0>)
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <MX_TIM3_Init+0xa4>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_TIM3_Init+0xa0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM3_Init+0xa0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_TIM3_Init+0xa0>)
 8000fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM3_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_TIM3_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM3_Init+0xa0>)
 8001006:	f002 f8db 	bl	80031c0 <HAL_TIM_Encoder_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001010:	f7ff fd90 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_TIM3_Init+0xa0>)
 8001022:	f002 ff0b 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800102c:	f7ff fd82 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3730      	adds	r7, #48	; 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000154 	.word	0x20000154
 800103c:	40000400 	.word	0x40000400

08001040 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fd36 	bl	8004ac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_TIM4_Init+0xa0>)
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <MX_TIM4_Init+0xa4>)
 8001060:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_TIM4_Init+0xa0>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_TIM4_Init+0xa0>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_TIM4_Init+0xa0>)
 8001070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001074:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM4_Init+0xa0>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_TIM4_Init+0xa0>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001082:	2303      	movs	r3, #3
 8001084:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800109a:	2301      	movs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_TIM4_Init+0xa0>)
 80010ae:	f002 f887 	bl	80031c0 <HAL_TIM_Encoder_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f7ff fd3c 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM4_Init+0xa0>)
 80010ca:	f002 feb7 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80010d4:	f7ff fd2e 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	; 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000019c 	.word	0x2000019c
 80010e4:	40000800 	.word	0x40000800

080010e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fce2 	bl	8004ac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <MX_TIM5_Init+0xa0>)
 8001106:	4a21      	ldr	r2, [pc, #132]	; (800118c <MX_TIM5_Init+0xa4>)
 8001108:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800110a:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_TIM5_Init+0xa0>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_TIM5_Init+0xa0>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_TIM5_Init+0xa0>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_TIM5_Init+0xa0>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_TIM5_Init+0xa0>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800112a:	2303      	movs	r3, #3
 800112c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001142:	2301      	movs	r3, #1
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4619      	mov	r1, r3
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <MX_TIM5_Init+0xa0>)
 8001156:	f002 f833 	bl	80031c0 <HAL_TIM_Encoder_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001160:	f7ff fce8 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_TIM5_Init+0xa0>)
 8001172:	f002 fe63 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800117c:	f7ff fcda 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200001e4 	.word	0x200001e4
 800118c:	40000c00 	.word	0x40000c00

08001190 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b096      	sub	sp, #88	; 0x58
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2220      	movs	r2, #32
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fc79 	bl	8004ac0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <MX_TIM8_Init+0x180>)
 80011d0:	4a50      	ldr	r2, [pc, #320]	; (8001314 <MX_TIM8_Init+0x184>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <MX_TIM8_Init+0x180>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <MX_TIM8_Init+0x180>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <MX_TIM8_Init+0x180>)
 80011e2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80011e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b49      	ldr	r3, [pc, #292]	; (8001310 <MX_TIM8_Init+0x180>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <MX_TIM8_Init+0x180>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <MX_TIM8_Init+0x180>)
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011fa:	4845      	ldr	r0, [pc, #276]	; (8001310 <MX_TIM8_Init+0x180>)
 80011fc:	f001 fe7e 	bl	8002efc <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001206:	f7ff fc95 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001210:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001214:	4619      	mov	r1, r3
 8001216:	483e      	ldr	r0, [pc, #248]	; (8001310 <MX_TIM8_Init+0x180>)
 8001218:	f002 f9c0 	bl	800359c <HAL_TIM_ConfigClockSource>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001222:	f7ff fc87 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001226:	483a      	ldr	r0, [pc, #232]	; (8001310 <MX_TIM8_Init+0x180>)
 8001228:	f001 feb7 	bl	8002f9a <HAL_TIM_PWM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001232:	f7ff fc7f 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800123e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001242:	4619      	mov	r1, r3
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <MX_TIM8_Init+0x180>)
 8001246:	f002 fdf9 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001250:	f7ff fc70 	bl	8000b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001254:	2360      	movs	r3, #96	; 0x60
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	4619      	mov	r1, r3
 8001278:	4825      	ldr	r0, [pc, #148]	; (8001310 <MX_TIM8_Init+0x180>)
 800127a:	f002 f8d1 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001284:	f7ff fc56 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2204      	movs	r2, #4
 800128e:	4619      	mov	r1, r3
 8001290:	481f      	ldr	r0, [pc, #124]	; (8001310 <MX_TIM8_Init+0x180>)
 8001292:	f002 f8c5 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800129c:	f7ff fc4a 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2208      	movs	r2, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <MX_TIM8_Init+0x180>)
 80012aa:	f002 f8b9 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80012b4:	f7ff fc3e 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	220c      	movs	r2, #12
 80012be:	4619      	mov	r1, r3
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <MX_TIM8_Init+0x180>)
 80012c2:	f002 f8ad 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80012cc:	f7ff fc32 	bl	8000b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <MX_TIM8_Init+0x180>)
 80012f4:	f002 fe0e 	bl	8003f14 <HAL_TIMEx_ConfigBreakDeadTime>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80012fe:	f7ff fc19 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <MX_TIM8_Init+0x180>)
 8001304:	f000 f92a 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001308:	bf00      	nop
 800130a:	3758      	adds	r7, #88	; 0x58
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000022c 	.word	0x2000022c
 8001314:	40013400 	.word	0x40013400

08001318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_TIM_Base_MspInit+0x58>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10c      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_TIM_Base_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <HAL_TIM_Base_MspInit+0x5c>)
 8001330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_TIM_Base_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001342:	e010      	b.n	8001366 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_TIM_Base_MspInit+0x60>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10b      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_TIM_Base_MspInit+0x5c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_TIM_Base_MspInit+0x5c>)
 8001354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_TIM_Base_MspInit+0x5c>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40012c00 	.word	0x40012c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40013400 	.word	0x40013400

0800137c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	; 0x40
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139a:	d14f      	bne.n	800143c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139c:	4b68      	ldr	r3, [pc, #416]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a67      	ldr	r2, [pc, #412]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b65      	ldr	r3, [pc, #404]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b62      	ldr	r3, [pc, #392]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a61      	ldr	r2, [pc, #388]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f6:	4619      	mov	r1, r3
 80013f8:	4852      	ldr	r0, [pc, #328]	; (8001544 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80013fa:	f000 ff89 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013fe:	2308      	movs	r3, #8
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140e:	4619      	mov	r1, r3
 8001410:	484d      	ldr	r0, [pc, #308]	; (8001548 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001412:	f000 ff7d 	bl	8002310 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001416:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800141e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001426:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800142c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001434:	4a45      	ldr	r2, [pc, #276]	; (800154c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800143a:	e07c      	b.n	8001536 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a43      	ldr	r2, [pc, #268]	; (8001550 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d124      	bne.n	8001490 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001446:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a3d      	ldr	r2, [pc, #244]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a37      	ldr	r2, [pc, #220]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001476:	23c0      	movs	r3, #192	; 0xc0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001486:	4619      	mov	r1, r3
 8001488:	482e      	ldr	r0, [pc, #184]	; (8001544 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800148a:	f000 ff41 	bl	8002310 <HAL_GPIO_Init>
}
 800148e:	e052      	b.n	8001536 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d124      	bne.n	80014e4 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a28      	ldr	r2, [pc, #160]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4a22      	ldr	r2, [pc, #136]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014da:	4619      	mov	r1, r3
 80014dc:	481a      	ldr	r0, [pc, #104]	; (8001548 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80014de:	f000 ff17 	bl	8002310 <HAL_GPIO_Init>
}
 80014e2:	e028      	b.n	8001536 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM5)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d123      	bne.n	8001536 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800151e:	2303      	movs	r3, #3
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152e:	4619      	mov	r1, r3
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001532:	f000 feed 	bl	8002310 <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3740      	adds	r7, #64	; 0x40
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40010800 	.word	0x40010800
 8001548:	40010c00 	.word	0x40010c00
 800154c:	40010000 	.word	0x40010000
 8001550:	40000400 	.word	0x40000400
 8001554:	40000800 	.word	0x40000800
 8001558:	40000c00 	.word	0x40000c00

0800155c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a34      	ldr	r2, [pc, #208]	; (8001648 <HAL_TIM_MspPostInit+0xec>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d143      	bne.n	8001604 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a32      	ldr	r2, [pc, #200]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a2c      	ldr	r2, [pc, #176]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ac:	2303      	movs	r3, #3
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4824      	ldr	r0, [pc, #144]	; (8001650 <HAL_TIM_MspPostInit+0xf4>)
 80015c0:	f000 fea6 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80015c4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	481e      	ldr	r0, [pc, #120]	; (8001654 <HAL_TIM_MspPostInit+0xf8>)
 80015da:	f000 fe99 	bl	8002310 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_TIM_MspPostInit+0xfc>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	4a16      	ldr	r2, [pc, #88]	; (8001658 <HAL_TIM_MspPostInit+0xfc>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001602:	e01d      	b.n	8001640 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_TIM_MspPostInit+0x100>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d118      	bne.n	8001640 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_TIM_MspPostInit+0xf0>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001626:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_TIM_MspPostInit+0x104>)
 800163c:	f000 fe68 	bl	8002310 <HAL_GPIO_Init>
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40012c00 	.word	0x40012c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40010800 	.word	0x40010800
 8001658:	40010000 	.word	0x40010000
 800165c:	40013400 	.word	0x40013400
 8001660:	40011000 	.word	0x40011000

08001664 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_USART1_UART_Init+0x50>)
 800166c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800169c:	f002 fcaf 	bl	8003ffe <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a6:	f7ff fa45 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000274 	.word	0x20000274
 80016b4:	40013800 	.word	0x40013800

080016b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_UART_MspInit+0xe8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d15f      	bne.n	8001798 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_UART_MspInit+0xec>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a31      	ldr	r2, [pc, #196]	; (80017a4 <HAL_UART_MspInit+0xec>)
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_UART_MspInit+0xec>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <HAL_UART_MspInit+0xec>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <HAL_UART_MspInit+0xec>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_UART_MspInit+0xec>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4822      	ldr	r0, [pc, #136]	; (80017a8 <HAL_UART_MspInit+0xf0>)
 800171e:	f000 fdf7 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	481c      	ldr	r0, [pc, #112]	; (80017a8 <HAL_UART_MspInit+0xf0>)
 8001738:	f000 fdea 	bl	8002310 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_UART_MspInit+0xf4>)
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_UART_MspInit+0xf8>)
 8001740:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_UART_MspInit+0xf4>)
 8001744:	2210      	movs	r2, #16
 8001746:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_UART_MspInit+0xf4>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_UART_MspInit+0xf4>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_UART_MspInit+0xf4>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_UART_MspInit+0xf4>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_UART_MspInit+0xf4>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_UART_MspInit+0xf4>)
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <HAL_UART_MspInit+0xf4>)
 800176e:	f000 f9db 	bl	8001b28 <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001778:	f7ff f9dc 	bl	8000b34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_UART_MspInit+0xf4>)
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_UART_MspInit+0xf4>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2025      	movs	r0, #37	; 0x25
 800178e:	f000 f994 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001792:	2025      	movs	r0, #37	; 0x25
 8001794:	f000 f9ad 	bl	8001af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	200002b8 	.word	0x200002b8
 80017b0:	40020044 	.word	0x40020044

080017b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017da:	f7ff fabf 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017de:	f003 f94b 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e2:	f7ff f945 	bl	8000a70 <main>
  bx lr
 80017e6:	4770      	bx	lr
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017f0:	08005af0 	.word	0x08005af0
  ldr r2, =_sbss
 80017f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017f8:	20000310 	.word	0x20000310

080017fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_2_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_Init+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_Init+0x28>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 f947 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	200f      	movs	r0, #15
 8001818:	f000 f808 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff f990 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f95f 	bl	8001b0e <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 f927 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	20000008 	.word	0x20000008
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x1c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x20>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_IncTick+0x20>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000008 	.word	0x20000008
 80018ac:	200002fc 	.word	0x200002fc

080018b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_GetTick+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	200002fc 	.word	0x200002fc

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff fff0 	bl	80018b0 <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffe0 	bl	80018b0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4906      	ldr	r1, [pc, #24]	; (80019a4 <__NVIC_EnableIRQ+0x34>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	; (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff90 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff2d 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff42 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff90 	bl	80019fc <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5f 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff35 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa2 	bl	8001a60 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e059      	b.n	8001bf2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_DMA_Init+0xd4>)
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d80f      	bhi.n	8001b6a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_DMA_Init+0xd8>)
 8001b52:	4413      	add	r3, r2
 8001b54:	4a2b      	ldr	r2, [pc, #172]	; (8001c04 <HAL_DMA_Init+0xdc>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	009a      	lsls	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_DMA_Init+0xe0>)
 8001b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b68:	e00e      	b.n	8001b88 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_DMA_Init+0xe4>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_DMA_Init+0xdc>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	009a      	lsls	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_DMA_Init+0xe8>)
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40020407 	.word	0x40020407
 8001c00:	bffdfff8 	.word	0xbffdfff8
 8001c04:	cccccccd 	.word	0xcccccccd
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	bffdfbf8 	.word	0xbffdfbf8
 8001c10:	40020400 	.word	0x40020400

08001c14 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d008      	beq.n	8001c3c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e020      	b.n	8001c7e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 020e 	bic.w	r2, r2, #14
 8001c4a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	2101      	movs	r1, #1
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d005      	beq.n	8001caa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e0d6      	b.n	8001e58 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 020e 	bic.w	r2, r2, #14
 8001cb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b64      	ldr	r3, [pc, #400]	; (8001e64 <HAL_DMA_Abort_IT+0x1dc>)
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d958      	bls.n	8001d88 <HAL_DMA_Abort_IT+0x100>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a63      	ldr	r2, [pc, #396]	; (8001e68 <HAL_DMA_Abort_IT+0x1e0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d04f      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xf8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a61      	ldr	r2, [pc, #388]	; (8001e6c <HAL_DMA_Abort_IT+0x1e4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d048      	beq.n	8001d7c <HAL_DMA_Abort_IT+0xf4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a60      	ldr	r2, [pc, #384]	; (8001e70 <HAL_DMA_Abort_IT+0x1e8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d040      	beq.n	8001d76 <HAL_DMA_Abort_IT+0xee>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_DMA_Abort_IT+0x1ec>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d038      	beq.n	8001d70 <HAL_DMA_Abort_IT+0xe8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5d      	ldr	r2, [pc, #372]	; (8001e78 <HAL_DMA_Abort_IT+0x1f0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d030      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xe2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <HAL_DMA_Abort_IT+0x1f4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d028      	beq.n	8001d64 <HAL_DMA_Abort_IT+0xdc>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a53      	ldr	r2, [pc, #332]	; (8001e64 <HAL_DMA_Abort_IT+0x1dc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d020      	beq.n	8001d5e <HAL_DMA_Abort_IT+0xd6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_DMA_Abort_IT+0x1f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d019      	beq.n	8001d5a <HAL_DMA_Abort_IT+0xd2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a56      	ldr	r2, [pc, #344]	; (8001e84 <HAL_DMA_Abort_IT+0x1fc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d012      	beq.n	8001d56 <HAL_DMA_Abort_IT+0xce>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a54      	ldr	r2, [pc, #336]	; (8001e88 <HAL_DMA_Abort_IT+0x200>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00a      	beq.n	8001d50 <HAL_DMA_Abort_IT+0xc8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a53      	ldr	r2, [pc, #332]	; (8001e8c <HAL_DMA_Abort_IT+0x204>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d102      	bne.n	8001d4a <HAL_DMA_Abort_IT+0xc2>
 8001d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d48:	e01b      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4e:	e018      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	e015      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d56:	2310      	movs	r3, #16
 8001d58:	e013      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e011      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d62:	e00e      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d68:	e00b      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6e:	e008      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	e005      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7a:	e002      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	e000      	b.n	8001d82 <HAL_DMA_Abort_IT+0xfa>
 8001d80:	2301      	movs	r3, #1
 8001d82:	4a43      	ldr	r2, [pc, #268]	; (8001e90 <HAL_DMA_Abort_IT+0x208>)
 8001d84:	6053      	str	r3, [r2, #4]
 8001d86:	e057      	b.n	8001e38 <HAL_DMA_Abort_IT+0x1b0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a36      	ldr	r2, [pc, #216]	; (8001e68 <HAL_DMA_Abort_IT+0x1e0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d04f      	beq.n	8001e32 <HAL_DMA_Abort_IT+0x1aa>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a35      	ldr	r2, [pc, #212]	; (8001e6c <HAL_DMA_Abort_IT+0x1e4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d048      	beq.n	8001e2e <HAL_DMA_Abort_IT+0x1a6>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a33      	ldr	r2, [pc, #204]	; (8001e70 <HAL_DMA_Abort_IT+0x1e8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d040      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x1a0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <HAL_DMA_Abort_IT+0x1ec>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d038      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x19a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a30      	ldr	r2, [pc, #192]	; (8001e78 <HAL_DMA_Abort_IT+0x1f0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d030      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x194>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a2f      	ldr	r2, [pc, #188]	; (8001e7c <HAL_DMA_Abort_IT+0x1f4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d028      	beq.n	8001e16 <HAL_DMA_Abort_IT+0x18e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_DMA_Abort_IT+0x1dc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d020      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x188>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_DMA_Abort_IT+0x1f8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d019      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x184>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_DMA_Abort_IT+0x1fc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d012      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x180>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_DMA_Abort_IT+0x200>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00a      	beq.n	8001e02 <HAL_DMA_Abort_IT+0x17a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_DMA_Abort_IT+0x204>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d102      	bne.n	8001dfc <HAL_DMA_Abort_IT+0x174>
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	e01b      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e00:	e018      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e06:	e015      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e08:	2310      	movs	r3, #16
 8001e0a:	e013      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e011      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e14:	e00e      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e1a:	e00b      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e20:	e008      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	e005      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2c:	e002      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e2e:	2310      	movs	r3, #16
 8001e30:	e000      	b.n	8001e34 <HAL_DMA_Abort_IT+0x1ac>
 8001e32:	2301      	movs	r3, #1
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_DMA_Abort_IT+0x20c>)
 8001e36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
    } 
  }
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40020080 	.word	0x40020080
 8001e68:	40020008 	.word	0x40020008
 8001e6c:	4002001c 	.word	0x4002001c
 8001e70:	40020030 	.word	0x40020030
 8001e74:	40020044 	.word	0x40020044
 8001e78:	40020058 	.word	0x40020058
 8001e7c:	4002006c 	.word	0x4002006c
 8001e80:	40020408 	.word	0x40020408
 8001e84:	4002041c 	.word	0x4002041c
 8001e88:	40020430 	.word	0x40020430
 8001e8c:	40020444 	.word	0x40020444
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80f1 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x20c>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80eb 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0204 	bic.w	r2, r2, #4
 8001eea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_DMA_IRQHandler+0x1d8>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d958      	bls.n	8001faa <HAL_DMA_IRQHandler+0x112>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5d      	ldr	r2, [pc, #372]	; (8002074 <HAL_DMA_IRQHandler+0x1dc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04f      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x10a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_DMA_IRQHandler+0x1e0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d048      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x106>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_DMA_IRQHandler+0x1e4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x100>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a59      	ldr	r2, [pc, #356]	; (8002080 <HAL_DMA_IRQHandler+0x1e8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d038      	beq.n	8001f92 <HAL_DMA_IRQHandler+0xfa>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a57      	ldr	r2, [pc, #348]	; (8002084 <HAL_DMA_IRQHandler+0x1ec>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d030      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xf4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a56      	ldr	r2, [pc, #344]	; (8002088 <HAL_DMA_IRQHandler+0x1f0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d028      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xee>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <HAL_DMA_IRQHandler+0x1d8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d020      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xe8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_DMA_IRQHandler+0x1f4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d019      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xe4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_DMA_IRQHandler+0x1f8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d012      	beq.n	8001f78 <HAL_DMA_IRQHandler+0xe0>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a4f      	ldr	r2, [pc, #316]	; (8002094 <HAL_DMA_IRQHandler+0x1fc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00a      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xda>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a4d      	ldr	r2, [pc, #308]	; (8002098 <HAL_DMA_IRQHandler+0x200>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d102      	bne.n	8001f6c <HAL_DMA_IRQHandler+0xd4>
 8001f66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f6a:	e01b      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f70:	e018      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f76:	e015      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	e013      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	e011      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f84:	e00e      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f8a:	e00b      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f90:	e008      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f96:	e005      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f9c:	e002      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001f9e:	2340      	movs	r3, #64	; 0x40
 8001fa0:	e000      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x10c>
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_DMA_IRQHandler+0x204>)
 8001fa6:	6053      	str	r3, [r2, #4]
 8001fa8:	e057      	b.n	800205a <HAL_DMA_IRQHandler+0x1c2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_DMA_IRQHandler+0x1dc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d04f      	beq.n	8002054 <HAL_DMA_IRQHandler+0x1bc>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <HAL_DMA_IRQHandler+0x1e0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d048      	beq.n	8002050 <HAL_DMA_IRQHandler+0x1b8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_DMA_IRQHandler+0x1e4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d040      	beq.n	800204a <HAL_DMA_IRQHandler+0x1b2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <HAL_DMA_IRQHandler+0x1e8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d038      	beq.n	8002044 <HAL_DMA_IRQHandler+0x1ac>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_DMA_IRQHandler+0x1ec>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d030      	beq.n	800203e <HAL_DMA_IRQHandler+0x1a6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_DMA_IRQHandler+0x1f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d028      	beq.n	8002038 <HAL_DMA_IRQHandler+0x1a0>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_DMA_IRQHandler+0x1d8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d020      	beq.n	8002032 <HAL_DMA_IRQHandler+0x19a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_DMA_IRQHandler+0x1f4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_DMA_IRQHandler+0x196>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a24      	ldr	r2, [pc, #144]	; (8002090 <HAL_DMA_IRQHandler+0x1f8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d012      	beq.n	800202a <HAL_DMA_IRQHandler+0x192>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_DMA_IRQHandler+0x1fc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00a      	beq.n	8002024 <HAL_DMA_IRQHandler+0x18c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_DMA_IRQHandler+0x200>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d102      	bne.n	800201e <HAL_DMA_IRQHandler+0x186>
 8002018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800201c:	e01b      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 800201e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002022:	e018      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 8002024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002028:	e015      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	e013      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 800202e:	2304      	movs	r3, #4
 8002030:	e011      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 8002032:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002036:	e00e      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 8002038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800203c:	e00b      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 800203e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002042:	e008      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 8002044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002048:	e005      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	e002      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 8002050:	2340      	movs	r3, #64	; 0x40
 8002052:	e000      	b.n	8002056 <HAL_DMA_IRQHandler+0x1be>
 8002054:	2304      	movs	r3, #4
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_DMA_IRQHandler+0x208>)
 8002058:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8136 	beq.w	80022d0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800206c:	e130      	b.n	80022d0 <HAL_DMA_IRQHandler+0x438>
 800206e:	bf00      	nop
 8002070:	40020080 	.word	0x40020080
 8002074:	40020008 	.word	0x40020008
 8002078:	4002001c 	.word	0x4002001c
 800207c:	40020030 	.word	0x40020030
 8002080:	40020044 	.word	0x40020044
 8002084:	40020058 	.word	0x40020058
 8002088:	4002006c 	.word	0x4002006c
 800208c:	40020408 	.word	0x40020408
 8002090:	4002041c 	.word	0x4002041c
 8002094:	40020430 	.word	0x40020430
 8002098:	40020444 	.word	0x40020444
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2202      	movs	r2, #2
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80dd 	beq.w	8002270 <HAL_DMA_IRQHandler+0x3d8>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80d7 	beq.w	8002270 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10b      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 020a 	bic.w	r2, r2, #10
 80020de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b7b      	ldr	r3, [pc, #492]	; (80022dc <HAL_DMA_IRQHandler+0x444>)
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d958      	bls.n	80021a6 <HAL_DMA_IRQHandler+0x30e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a79      	ldr	r2, [pc, #484]	; (80022e0 <HAL_DMA_IRQHandler+0x448>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04f      	beq.n	800219e <HAL_DMA_IRQHandler+0x306>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a78      	ldr	r2, [pc, #480]	; (80022e4 <HAL_DMA_IRQHandler+0x44c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d048      	beq.n	800219a <HAL_DMA_IRQHandler+0x302>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a76      	ldr	r2, [pc, #472]	; (80022e8 <HAL_DMA_IRQHandler+0x450>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d040      	beq.n	8002194 <HAL_DMA_IRQHandler+0x2fc>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a75      	ldr	r2, [pc, #468]	; (80022ec <HAL_DMA_IRQHandler+0x454>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d038      	beq.n	800218e <HAL_DMA_IRQHandler+0x2f6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a73      	ldr	r2, [pc, #460]	; (80022f0 <HAL_DMA_IRQHandler+0x458>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d030      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2f0>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_DMA_IRQHandler+0x45c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d028      	beq.n	8002182 <HAL_DMA_IRQHandler+0x2ea>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a69      	ldr	r2, [pc, #420]	; (80022dc <HAL_DMA_IRQHandler+0x444>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d020      	beq.n	800217c <HAL_DMA_IRQHandler+0x2e4>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_DMA_IRQHandler+0x460>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d019      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6c      	ldr	r2, [pc, #432]	; (80022fc <HAL_DMA_IRQHandler+0x464>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d012      	beq.n	8002174 <HAL_DMA_IRQHandler+0x2dc>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6b      	ldr	r2, [pc, #428]	; (8002300 <HAL_DMA_IRQHandler+0x468>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00a      	beq.n	800216e <HAL_DMA_IRQHandler+0x2d6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a69      	ldr	r2, [pc, #420]	; (8002304 <HAL_DMA_IRQHandler+0x46c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d102      	bne.n	8002168 <HAL_DMA_IRQHandler+0x2d0>
 8002162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002166:	e01b      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 8002168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216c:	e018      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 800216e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002172:	e015      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 8002174:	2320      	movs	r3, #32
 8002176:	e013      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 8002178:	2302      	movs	r3, #2
 800217a:	e011      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 800217c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002180:	e00e      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 8002182:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002186:	e00b      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 8002188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218c:	e008      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 800218e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002192:	e005      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 8002194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002198:	e002      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 800219a:	2320      	movs	r3, #32
 800219c:	e000      	b.n	80021a0 <HAL_DMA_IRQHandler+0x308>
 800219e:	2302      	movs	r3, #2
 80021a0:	4a59      	ldr	r2, [pc, #356]	; (8002308 <HAL_DMA_IRQHandler+0x470>)
 80021a2:	6053      	str	r3, [r2, #4]
 80021a4:	e057      	b.n	8002256 <HAL_DMA_IRQHandler+0x3be>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_DMA_IRQHandler+0x448>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04f      	beq.n	8002250 <HAL_DMA_IRQHandler+0x3b8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_DMA_IRQHandler+0x44c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d048      	beq.n	800224c <HAL_DMA_IRQHandler+0x3b4>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a4a      	ldr	r2, [pc, #296]	; (80022e8 <HAL_DMA_IRQHandler+0x450>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3ae>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <HAL_DMA_IRQHandler+0x454>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d038      	beq.n	8002240 <HAL_DMA_IRQHandler+0x3a8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_DMA_IRQHandler+0x458>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d030      	beq.n	800223a <HAL_DMA_IRQHandler+0x3a2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <HAL_DMA_IRQHandler+0x45c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d028      	beq.n	8002234 <HAL_DMA_IRQHandler+0x39c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a3d      	ldr	r2, [pc, #244]	; (80022dc <HAL_DMA_IRQHandler+0x444>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d020      	beq.n	800222e <HAL_DMA_IRQHandler+0x396>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a41      	ldr	r2, [pc, #260]	; (80022f8 <HAL_DMA_IRQHandler+0x460>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_DMA_IRQHandler+0x392>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a40      	ldr	r2, [pc, #256]	; (80022fc <HAL_DMA_IRQHandler+0x464>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d012      	beq.n	8002226 <HAL_DMA_IRQHandler+0x38e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a3e      	ldr	r2, [pc, #248]	; (8002300 <HAL_DMA_IRQHandler+0x468>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00a      	beq.n	8002220 <HAL_DMA_IRQHandler+0x388>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <HAL_DMA_IRQHandler+0x46c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d102      	bne.n	800221a <HAL_DMA_IRQHandler+0x382>
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	e01b      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 800221a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221e:	e018      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 8002220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002224:	e015      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 8002226:	2320      	movs	r3, #32
 8002228:	e013      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 800222a:	2302      	movs	r3, #2
 800222c:	e011      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 800222e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002232:	e00e      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 8002234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002238:	e00b      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 800223a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223e:	e008      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 8002240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002244:	e005      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 8002246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224a:	e002      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 800224c:	2320      	movs	r3, #32
 800224e:	e000      	b.n	8002252 <HAL_DMA_IRQHandler+0x3ba>
 8002250:	2302      	movs	r3, #2
 8002252:	4a2e      	ldr	r2, [pc, #184]	; (800230c <HAL_DMA_IRQHandler+0x474>)
 8002254:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	2b00      	cmp	r3, #0
 8002264:	d034      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800226e:	e02f      	b.n	80022d0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2208      	movs	r2, #8
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d028      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x43a>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d023      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 020e 	bic.w	r2, r2, #14
 8002298:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
    }
  }
  return;
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
}
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40020080 	.word	0x40020080
 80022e0:	40020008 	.word	0x40020008
 80022e4:	4002001c 	.word	0x4002001c
 80022e8:	40020030 	.word	0x40020030
 80022ec:	40020044 	.word	0x40020044
 80022f0:	40020058 	.word	0x40020058
 80022f4:	4002006c 	.word	0x4002006c
 80022f8:	40020408 	.word	0x40020408
 80022fc:	4002041c 	.word	0x4002041c
 8002300:	40020430 	.word	0x40020430
 8002304:	40020444 	.word	0x40020444
 8002308:	40020400 	.word	0x40020400
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b08b      	sub	sp, #44	; 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	e179      	b.n	8002618 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002324:	2201      	movs	r2, #1
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8168 	bne.w	8002612 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a96      	ldr	r2, [pc, #600]	; (80025a0 <HAL_GPIO_Init+0x290>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d05e      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800234c:	4a94      	ldr	r2, [pc, #592]	; (80025a0 <HAL_GPIO_Init+0x290>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d875      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002352:	4a94      	ldr	r2, [pc, #592]	; (80025a4 <HAL_GPIO_Init+0x294>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d058      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002358:	4a92      	ldr	r2, [pc, #584]	; (80025a4 <HAL_GPIO_Init+0x294>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d86f      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800235e:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_GPIO_Init+0x298>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d052      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002364:	4a90      	ldr	r2, [pc, #576]	; (80025a8 <HAL_GPIO_Init+0x298>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d869      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800236a:	4a90      	ldr	r2, [pc, #576]	; (80025ac <HAL_GPIO_Init+0x29c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04c      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002370:	4a8e      	ldr	r2, [pc, #568]	; (80025ac <HAL_GPIO_Init+0x29c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d863      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002376:	4a8e      	ldr	r2, [pc, #568]	; (80025b0 <HAL_GPIO_Init+0x2a0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d046      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800237c:	4a8c      	ldr	r2, [pc, #560]	; (80025b0 <HAL_GPIO_Init+0x2a0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d85d      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002382:	2b12      	cmp	r3, #18
 8002384:	d82a      	bhi.n	80023dc <HAL_GPIO_Init+0xcc>
 8002386:	2b12      	cmp	r3, #18
 8002388:	d859      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_GPIO_Init+0x80>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	0800240b 	.word	0x0800240b
 8002394:	080023e5 	.word	0x080023e5
 8002398:	080023f7 	.word	0x080023f7
 800239c:	08002439 	.word	0x08002439
 80023a0:	0800243f 	.word	0x0800243f
 80023a4:	0800243f 	.word	0x0800243f
 80023a8:	0800243f 	.word	0x0800243f
 80023ac:	0800243f 	.word	0x0800243f
 80023b0:	0800243f 	.word	0x0800243f
 80023b4:	0800243f 	.word	0x0800243f
 80023b8:	0800243f 	.word	0x0800243f
 80023bc:	0800243f 	.word	0x0800243f
 80023c0:	0800243f 	.word	0x0800243f
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	0800243f 	.word	0x0800243f
 80023cc:	0800243f 	.word	0x0800243f
 80023d0:	0800243f 	.word	0x0800243f
 80023d4:	080023ed 	.word	0x080023ed
 80023d8:	08002401 	.word	0x08002401
 80023dc:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_GPIO_Init+0x2a4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023e2:	e02c      	b.n	800243e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e029      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	3304      	adds	r3, #4
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	e024      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	3308      	adds	r3, #8
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e01f      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	330c      	adds	r3, #12
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e01a      	b.n	8002440 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002412:	2304      	movs	r3, #4
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e013      	b.n	8002440 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002420:	2308      	movs	r3, #8
 8002422:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	611a      	str	r2, [r3, #16]
          break;
 800242a:	e009      	b.n	8002440 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800242c:	2308      	movs	r3, #8
 800242e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	615a      	str	r2, [r3, #20]
          break;
 8002436:	e003      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x130>
          break;
 800243e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d801      	bhi.n	800244a <HAL_GPIO_Init+0x13a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	e001      	b.n	800244e <HAL_GPIO_Init+0x13e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2bff      	cmp	r3, #255	; 0xff
 8002454:	d802      	bhi.n	800245c <HAL_GPIO_Init+0x14c>
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x152>
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	3b08      	subs	r3, #8
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	210f      	movs	r1, #15
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80c1 	beq.w	8002612 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002490:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a8:	4a44      	ldr	r2, [pc, #272]	; (80025bc <HAL_GPIO_Init+0x2ac>)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3c      	ldr	r2, [pc, #240]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d01f      	beq.n	8002514 <HAL_GPIO_Init+0x204>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x2b4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d019      	beq.n	8002510 <HAL_GPIO_Init+0x200>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d013      	beq.n	800250c <HAL_GPIO_Init+0x1fc>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a39      	ldr	r2, [pc, #228]	; (80025cc <HAL_GPIO_Init+0x2bc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00d      	beq.n	8002508 <HAL_GPIO_Init+0x1f8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a38      	ldr	r2, [pc, #224]	; (80025d0 <HAL_GPIO_Init+0x2c0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <HAL_GPIO_Init+0x1f4>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a37      	ldr	r2, [pc, #220]	; (80025d4 <HAL_GPIO_Init+0x2c4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_GPIO_Init+0x1f0>
 80024fc:	2305      	movs	r3, #5
 80024fe:	e00a      	b.n	8002516 <HAL_GPIO_Init+0x206>
 8002500:	2306      	movs	r3, #6
 8002502:	e008      	b.n	8002516 <HAL_GPIO_Init+0x206>
 8002504:	2304      	movs	r3, #4
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x206>
 8002508:	2303      	movs	r3, #3
 800250a:	e004      	b.n	8002516 <HAL_GPIO_Init+0x206>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x206>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_GPIO_Init+0x206>
 8002514:	2300      	movs	r3, #0
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	f002 0203 	and.w	r2, r2, #3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4093      	lsls	r3, r2
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002526:	4925      	ldr	r1, [pc, #148]	; (80025bc <HAL_GPIO_Init+0x2ac>)
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4924      	ldr	r1, [pc, #144]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	43db      	mvns	r3, r3
 8002556:	4920      	ldr	r1, [pc, #128]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002558:	4013      	ands	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	491a      	ldr	r1, [pc, #104]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
 8002574:	e006      	b.n	8002584 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	43db      	mvns	r3, r3
 800257e:	4916      	ldr	r1, [pc, #88]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002580:	4013      	ands	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d025      	beq.n	80025dc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4910      	ldr	r1, [pc, #64]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
 800259c:	e025      	b.n	80025ea <HAL_GPIO_Init+0x2da>
 800259e:	bf00      	nop
 80025a0:	10320000 	.word	0x10320000
 80025a4:	10310000 	.word	0x10310000
 80025a8:	10220000 	.word	0x10220000
 80025ac:	10210000 	.word	0x10210000
 80025b0:	10120000 	.word	0x10120000
 80025b4:	10110000 	.word	0x10110000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010000 	.word	0x40010000
 80025c0:	40010800 	.word	0x40010800
 80025c4:	40010c00 	.word	0x40010c00
 80025c8:	40011000 	.word	0x40011000
 80025cc:	40011400 	.word	0x40011400
 80025d0:	40011800 	.word	0x40011800
 80025d4:	40011c00 	.word	0x40011c00
 80025d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	4913      	ldr	r1, [pc, #76]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60cb      	str	r3, [r1, #12]
 8002602:	e006      	b.n	8002612 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_GPIO_Init+0x324>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	43db      	mvns	r3, r3
 800260c:	4909      	ldr	r1, [pc, #36]	; (8002634 <HAL_GPIO_Init+0x324>)
 800260e:	4013      	ands	r3, r2
 8002610:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	3301      	adds	r3, #1
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	f47f ae7e 	bne.w	8002324 <HAL_GPIO_Init+0x14>
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	372c      	adds	r7, #44	; 0x2c
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e001      	b.n	800265a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	807b      	strh	r3, [r7, #2]
 8002672:	4613      	mov	r3, r2
 8002674:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002676:	787b      	ldrb	r3, [r7, #1]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267c:	887a      	ldrh	r2, [r7, #2]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002682:	e003      	b.n	800268c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	041a      	lsls	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	611a      	str	r2, [r3, #16]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	041a      	lsls	r2, r3, #16
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	400b      	ands	r3, r1
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e272      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8087 	beq.w	80027f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e8:	4b92      	ldr	r3, [pc, #584]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d00c      	beq.n	800270e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f4:	4b8f      	ldr	r3, [pc, #572]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d112      	bne.n	8002726 <HAL_RCC_OscConfig+0x5e>
 8002700:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d10b      	bne.n	8002726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	4b89      	ldr	r3, [pc, #548]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d06c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x12c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d168      	bne.n	80027f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e24c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x76>
 8002730:	4b80      	ldr	r3, [pc, #512]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a7f      	ldr	r2, [pc, #508]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e02e      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b7b      	ldr	r3, [pc, #492]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7a      	ldr	r2, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b78      	ldr	r3, [pc, #480]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a77      	ldr	r2, [pc, #476]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0xbc>
 800276a:	4b72      	ldr	r3, [pc, #456]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a71      	ldr	r2, [pc, #452]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b6f      	ldr	r3, [pc, #444]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6e      	ldr	r2, [pc, #440]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 8002784:	4b6b      	ldr	r3, [pc, #428]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6a      	ldr	r2, [pc, #424]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b68      	ldr	r3, [pc, #416]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff f884 	bl	80018b0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff f880 	bl	80018b0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e200      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xe4>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff f870 	bl	80018b0 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7ff f86c 	bl	80018b0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1ec      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x10c>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d063      	beq.n	80028ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002802:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800280e:	4b49      	ldr	r3, [pc, #292]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d11c      	bne.n	8002854 <HAL_RCC_OscConfig+0x18c>
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_RCC_OscConfig+0x176>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e1c0      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4939      	ldr	r1, [pc, #228]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e03a      	b.n	80028ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_RCC_OscConfig+0x270>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7ff f825 	bl	80018b0 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7ff f821 	bl	80018b0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1a1      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4927      	ldr	r1, [pc, #156]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_RCC_OscConfig+0x270>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff f804 	bl	80018b0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ac:	f7ff f800 	bl	80018b0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e180      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03a      	beq.n	800294c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d019      	beq.n	8002912 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7fe ffe4 	bl	80018b0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ec:	f7fe ffe0 	bl	80018b0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e160      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800290a:	2001      	movs	r0, #1
 800290c:	f000 fad8 	bl	8002ec0 <RCC_Delay>
 8002910:	e01c      	b.n	800294c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7fe ffca 	bl	80018b0 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291e:	e00f      	b.n	8002940 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe ffc6 	bl	80018b0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d908      	bls.n	8002940 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e146      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	42420000 	.word	0x42420000
 800293c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e9      	bne.n	8002920 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80a6 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295e:	4b8b      	ldr	r3, [pc, #556]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b88      	ldr	r3, [pc, #544]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4a87      	ldr	r2, [pc, #540]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	61d3      	str	r3, [r2, #28]
 8002976:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b82      	ldr	r3, [pc, #520]	; (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7e      	ldr	r2, [pc, #504]	; (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7fe ff87 	bl	80018b0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7fe ff83 	bl	80018b0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b64      	cmp	r3, #100	; 0x64
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e103      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x312>
 80029cc:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4a6e      	ldr	r2, [pc, #440]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	e02d      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x334>
 80029e2:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a69      	ldr	r2, [pc, #420]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6213      	str	r3, [r2, #32]
 80029ee:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a66      	ldr	r2, [pc, #408]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	e01c      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x356>
 8002a04:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a60      	ldr	r2, [pc, #384]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6213      	str	r3, [r2, #32]
 8002a10:	4b5e      	ldr	r3, [pc, #376]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a5d      	ldr	r2, [pc, #372]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	e00b      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a5a      	ldr	r2, [pc, #360]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	4b58      	ldr	r3, [pc, #352]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d015      	beq.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe ff37 	bl	80018b0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe ff33 	bl	80018b0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0b1      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ee      	beq.n	8002a46 <HAL_RCC_OscConfig+0x37e>
 8002a68:	e014      	b.n	8002a94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe ff21 	bl	80018b0 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe ff1d 	bl	80018b0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e09b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9a:	4b3c      	ldr	r3, [pc, #240]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4a3b      	ldr	r2, [pc, #236]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8087 	beq.w	8002bbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d061      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d146      	bne.n	8002b52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac4:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fef1 	bl	80018b0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe feed 	bl	80018b0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e06d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae4:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d108      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4921      	ldr	r1, [pc, #132]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a19      	ldr	r1, [r3, #32]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	491b      	ldr	r1, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fec1 	bl	80018b0 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe febd 	bl	80018b0 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e03d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x46a>
 8002b50:	e035      	b.n	8002bbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe feaa 	bl	80018b0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fea6 	bl	80018b0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e026      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x498>
 8002b7e:	e01e      	b.n	8002bbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e019      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x500>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d106      	bne.n	8002bba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000

08002bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0d0      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d910      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4965      	ldr	r1, [pc, #404]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d040      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d115      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e073      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06b      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4936      	ldr	r1, [pc, #216]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fdf8 	bl	80018b0 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe fdf4 	bl	80018b0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e053      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d210      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4922      	ldr	r1, [pc, #136]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f821 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1cc>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1d0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fd56 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08005a38 	.word	0x08005a38
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	b490      	push	{r4, r7}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002da6:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xac>)
 8002da8:	1d3c      	adds	r4, r7, #4
 8002daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002db0:	f240 2301 	movw	r3, #513	; 0x201
 8002db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x46>
 8002dde:	e02b      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002de2:	623b      	str	r3, [r7, #32]
      break;
 8002de4:	e02b      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3328      	adds	r3, #40	; 0x28
 8002df0:	443b      	add	r3, r7
 8002df2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002df6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0c5b      	lsrs	r3, r3, #17
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	3328      	adds	r3, #40	; 0x28
 8002e0e:	443b      	add	r3, r7
 8002e10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	623b      	str	r3, [r7, #32]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e3a:	623b      	str	r3, [r7, #32]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc90      	pop	{r4, r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	08005a28 	.word	0x08005a28
 8002e50:	40021000 	.word	0x40021000
 8002e54:	007a1200 	.word	0x007a1200
 8002e58:	003d0900 	.word	0x003d0900

08002e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	20000000 	.word	0x20000000

08002e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e74:	f7ff fff2 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08005a48 	.word	0x08005a48

08002e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e9c:	f7ff ffde 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0adb      	lsrs	r3, r3, #11
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4903      	ldr	r1, [pc, #12]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08005a48 	.word	0x08005a48

08002ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <RCC_Delay+0x34>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <RCC_Delay+0x38>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0a5b      	lsrs	r3, r3, #9
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002edc:	bf00      	nop
  }
  while (Delay --);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e5a      	subs	r2, r3, #1
 8002ee2:	60fa      	str	r2, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f9      	bne.n	8002edc <RCC_Delay+0x1c>
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	10624dd3 	.word	0x10624dd3

08002efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e041      	b.n	8002f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe f9f8 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 fbf2 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e041      	b.n	8003030 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f839 	bl	8003038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 fba3 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
	...

0800304c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_TIM_PWM_Start+0x24>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e022      	b.n	80030b6 <HAL_TIM_PWM_Start+0x6a>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b04      	cmp	r3, #4
 8003074:	d109      	bne.n	800308a <HAL_TIM_PWM_Start+0x3e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e015      	b.n	80030b6 <HAL_TIM_PWM_Start+0x6a>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d109      	bne.n	80030a4 <HAL_TIM_PWM_Start+0x58>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e008      	b.n	80030b6 <HAL_TIM_PWM_Start+0x6a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e072      	b.n	80031a4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d104      	bne.n	80030ce <HAL_TIM_PWM_Start+0x82>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030cc:	e013      	b.n	80030f6 <HAL_TIM_PWM_Start+0xaa>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d104      	bne.n	80030de <HAL_TIM_PWM_Start+0x92>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030dc:	e00b      	b.n	80030f6 <HAL_TIM_PWM_Start+0xaa>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Start+0xa2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ec:	e003      	b.n	80030f6 <HAL_TIM_PWM_Start+0xaa>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2202      	movs	r2, #2
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fdcc 	bl	8003c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a28      	ldr	r2, [pc, #160]	; (80031ac <HAL_TIM_PWM_Start+0x160>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_TIM_PWM_Start+0xcc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a27      	ldr	r2, [pc, #156]	; (80031b0 <HAL_TIM_PWM_Start+0x164>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_TIM_PWM_Start+0xd0>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_TIM_PWM_Start+0xd2>
 800311c:	2300      	movs	r3, #0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_TIM_PWM_Start+0x160>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d018      	beq.n	800316e <HAL_TIM_PWM_Start+0x122>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_TIM_PWM_Start+0x164>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_TIM_PWM_Start+0x122>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d00e      	beq.n	800316e <HAL_TIM_PWM_Start+0x122>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_TIM_PWM_Start+0x168>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_TIM_PWM_Start+0x122>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <HAL_TIM_PWM_Start+0x16c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIM_PWM_Start+0x122>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_TIM_PWM_Start+0x170>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d111      	bne.n	8003192 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d010      	beq.n	80031a2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	e007      	b.n	80031a2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40013400 	.word	0x40013400
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40000800 	.word	0x40000800
 80031bc:	40000c00 	.word	0x40000c00

080031c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e093      	b.n	80032fc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fe f8c7 	bl	800137c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003204:	f023 0307 	bic.w	r3, r3, #7
 8003208:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 fa85 	bl	8003724 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	4313      	orrs	r3, r2
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003260:	f023 030c 	bic.w	r3, r3, #12
 8003264:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800326c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	4313      	orrs	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	011a      	lsls	r2, r3, #4
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	031b      	lsls	r3, r3, #12
 8003290:	4313      	orrs	r3, r2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4313      	orrs	r3, r2
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003314:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800331c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003324:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800332c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d110      	bne.n	8003356 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d102      	bne.n	8003340 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800333a:	7b7b      	ldrb	r3, [r7, #13]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e069      	b.n	8003418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	e031      	b.n	80033ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d110      	bne.n	800337e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800335c:	7bbb      	ldrb	r3, [r7, #14]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003362:	7b3b      	ldrb	r3, [r7, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d001      	beq.n	800336c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e055      	b.n	8003418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337c:	e01d      	b.n	80033ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800338a:	7b7b      	ldrb	r3, [r7, #13]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d102      	bne.n	8003396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003390:	7b3b      	ldrb	r3, [r7, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e03e      	b.n	8003418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_TIM_Encoder_Start+0xc4>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d008      	beq.n	80033d8 <HAL_TIM_Encoder_Start+0xd4>
 80033c6:	e00f      	b.n	80033e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fc63 	bl	8003c9c <TIM_CCxChannelCmd>
      break;
 80033d6:	e016      	b.n	8003406 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	2104      	movs	r1, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fc5b 	bl	8003c9c <TIM_CCxChannelCmd>
      break;
 80033e6:	e00e      	b.n	8003406 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fc53 	bl	8003c9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	2104      	movs	r1, #4
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fc4c 	bl	8003c9c <TIM_CCxChannelCmd>
      break;
 8003404:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003436:	2302      	movs	r3, #2
 8003438:	e0ac      	b.n	8003594 <HAL_TIM_PWM_ConfigChannel+0x174>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	f200 809f 	bhi.w	8003588 <HAL_TIM_PWM_ConfigChannel+0x168>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003485 	.word	0x08003485
 8003454:	08003589 	.word	0x08003589
 8003458:	08003589 	.word	0x08003589
 800345c:	08003589 	.word	0x08003589
 8003460:	080034c5 	.word	0x080034c5
 8003464:	08003589 	.word	0x08003589
 8003468:	08003589 	.word	0x08003589
 800346c:	08003589 	.word	0x08003589
 8003470:	08003507 	.word	0x08003507
 8003474:	08003589 	.word	0x08003589
 8003478:	08003589 	.word	0x08003589
 800347c:	08003589 	.word	0x08003589
 8003480:	08003547 	.word	0x08003547
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f9c4 	bl	8003818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0208 	orr.w	r2, r2, #8
 800349e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6999      	ldr	r1, [r3, #24]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	619a      	str	r2, [r3, #24]
      break;
 80034c2:	e062      	b.n	800358a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fa14 	bl	80038f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6999      	ldr	r1, [r3, #24]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	619a      	str	r2, [r3, #24]
      break;
 8003504:	e041      	b.n	800358a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fa67 	bl	80039e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0208 	orr.w	r2, r2, #8
 8003520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0204 	bic.w	r2, r2, #4
 8003530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69d9      	ldr	r1, [r3, #28]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	61da      	str	r2, [r3, #28]
      break;
 8003544:	e021      	b.n	800358a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fabb 	bl	8003ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69d9      	ldr	r1, [r3, #28]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	021a      	lsls	r2, r3, #8
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	61da      	str	r2, [r3, #28]
      break;
 8003586:	e000      	b.n	800358a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_ConfigClockSource+0x18>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e0b3      	b.n	800371c <HAL_TIM_ConfigClockSource+0x180>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ec:	d03e      	beq.n	800366c <HAL_TIM_ConfigClockSource+0xd0>
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f2:	f200 8087 	bhi.w	8003704 <HAL_TIM_ConfigClockSource+0x168>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	f000 8085 	beq.w	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003602:	d87f      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
 8003604:	2b70      	cmp	r3, #112	; 0x70
 8003606:	d01a      	beq.n	800363e <HAL_TIM_ConfigClockSource+0xa2>
 8003608:	2b70      	cmp	r3, #112	; 0x70
 800360a:	d87b      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
 800360c:	2b60      	cmp	r3, #96	; 0x60
 800360e:	d050      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x116>
 8003610:	2b60      	cmp	r3, #96	; 0x60
 8003612:	d877      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
 8003614:	2b50      	cmp	r3, #80	; 0x50
 8003616:	d03c      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xf6>
 8003618:	2b50      	cmp	r3, #80	; 0x50
 800361a:	d873      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d058      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x136>
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d86f      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
 8003624:	2b30      	cmp	r3, #48	; 0x30
 8003626:	d064      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x156>
 8003628:	2b30      	cmp	r3, #48	; 0x30
 800362a:	d86b      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d060      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x156>
 8003630:	2b20      	cmp	r3, #32
 8003632:	d867      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05c      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x156>
 8003638:	2b10      	cmp	r3, #16
 800363a:	d05a      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800363c:	e062      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6899      	ldr	r1, [r3, #8]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f000 fb06 	bl	8003c5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003660:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	609a      	str	r2, [r3, #8]
      break;
 800366a:	e04e      	b.n	800370a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f000 faef 	bl	8003c5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800368e:	609a      	str	r2, [r3, #8]
      break;
 8003690:	e03b      	b.n	800370a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	461a      	mov	r2, r3
 80036a0:	f000 fa66 	bl	8003b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2150      	movs	r1, #80	; 0x50
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fabd 	bl	8003c2a <TIM_ITRx_SetConfig>
      break;
 80036b0:	e02b      	b.n	800370a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 fa84 	bl	8003bcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2160      	movs	r1, #96	; 0x60
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 faad 	bl	8003c2a <TIM_ITRx_SetConfig>
      break;
 80036d0:	e01b      	b.n	800370a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 fa46 	bl	8003b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2140      	movs	r1, #64	; 0x40
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fa9d 	bl	8003c2a <TIM_ITRx_SetConfig>
      break;
 80036f0:	e00b      	b.n	800370a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f000 fa94 	bl	8003c2a <TIM_ITRx_SetConfig>
        break;
 8003702:	e002      	b.n	800370a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003708:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a33      	ldr	r2, [pc, #204]	; (8003804 <TIM_Base_SetConfig+0xe0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a32      	ldr	r2, [pc, #200]	; (8003808 <TIM_Base_SetConfig+0xe4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00f      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d00b      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a2f      	ldr	r2, [pc, #188]	; (800380c <TIM_Base_SetConfig+0xe8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a2e      	ldr	r2, [pc, #184]	; (8003810 <TIM_Base_SetConfig+0xec>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a2d      	ldr	r2, [pc, #180]	; (8003814 <TIM_Base_SetConfig+0xf0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d108      	bne.n	8003776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a22      	ldr	r2, [pc, #136]	; (8003804 <TIM_Base_SetConfig+0xe0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <TIM_Base_SetConfig+0x82>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a21      	ldr	r2, [pc, #132]	; (8003808 <TIM_Base_SetConfig+0xe4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00f      	beq.n	80037a6 <TIM_Base_SetConfig+0x82>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0x82>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1e      	ldr	r2, [pc, #120]	; (800380c <TIM_Base_SetConfig+0xe8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0x82>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <TIM_Base_SetConfig+0xec>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0x82>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <TIM_Base_SetConfig+0xf0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <TIM_Base_SetConfig+0xe0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0xc8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a08      	ldr	r2, [pc, #32]	; (8003808 <TIM_Base_SetConfig+0xe4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d103      	bne.n	80037f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	615a      	str	r2, [r3, #20]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00

08003818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0201 	bic.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 0302 	bic.w	r3, r3, #2
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <TIM_OC1_SetConfig+0xd8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_OC1_SetConfig+0x64>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <TIM_OC1_SetConfig+0xdc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d10c      	bne.n	8003896 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0308 	bic.w	r3, r3, #8
 8003882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <TIM_OC1_SetConfig+0xd8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_OC1_SetConfig+0x8e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <TIM_OC1_SetConfig+0xdc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d111      	bne.n	80038ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40013400 	.word	0x40013400

080038f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0210 	bic.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0320 	bic.w	r3, r3, #32
 8003942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <TIM_OC2_SetConfig+0xe0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_OC2_SetConfig+0x68>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a20      	ldr	r2, [pc, #128]	; (80039dc <TIM_OC2_SetConfig+0xe4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10d      	bne.n	800397c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <TIM_OC2_SetConfig+0xe0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_OC2_SetConfig+0x94>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <TIM_OC2_SetConfig+0xe4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d113      	bne.n	80039b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800399a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40013400 	.word	0x40013400

080039e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0303 	bic.w	r3, r3, #3
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <TIM_OC3_SetConfig+0xe0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_OC3_SetConfig+0x66>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <TIM_OC3_SetConfig+0xe4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10d      	bne.n	8003a62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <TIM_OC3_SetConfig+0xe0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_OC3_SetConfig+0x92>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <TIM_OC3_SetConfig+0xe4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d113      	bne.n	8003a9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400

08003ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	031b      	lsls	r3, r3, #12
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <TIM_OC4_SetConfig+0xa0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC4_SetConfig+0x68>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <TIM_OC4_SetConfig+0xa4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40013400 	.word	0x40013400

08003b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 030a 	bic.w	r3, r3, #10
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f023 0210 	bic.w	r2, r3, #16
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	031b      	lsls	r3, r3, #12
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	621a      	str	r2, [r3, #32]
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f043 0307 	orr.w	r3, r3, #7
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	609a      	str	r2, [r3, #8]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b087      	sub	sp, #28
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	609a      	str	r2, [r3, #8]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2201      	movs	r2, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_TIMEx_PWMN_Start+0x24>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e022      	b.n	8003d4e <HAL_TIMEx_PWMN_Start+0x6a>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d109      	bne.n	8003d22 <HAL_TIMEx_PWMN_Start+0x3e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e015      	b.n	8003d4e <HAL_TIMEx_PWMN_Start+0x6a>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d109      	bne.n	8003d3c <HAL_TIMEx_PWMN_Start+0x58>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e008      	b.n	8003d4e <HAL_TIMEx_PWMN_Start+0x6a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e063      	b.n	8003e1e <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIMEx_PWMN_Start+0x82>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d64:	e013      	b.n	8003d8e <HAL_TIMEx_PWMN_Start+0xaa>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIMEx_PWMN_Start+0x92>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d74:	e00b      	b.n	8003d8e <HAL_TIMEx_PWMN_Start+0xaa>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIMEx_PWMN_Start+0xa2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d84:	e003      	b.n	8003d8e <HAL_TIMEx_PWMN_Start+0xaa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2204      	movs	r2, #4
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f90d 	bl	8003fb6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <HAL_TIMEx_PWMN_Start+0x144>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_TIMEx_PWMN_Start+0x104>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_TIMEx_PWMN_Start+0x148>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_TIMEx_PWMN_Start+0x104>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc8:	d00e      	beq.n	8003de8 <HAL_TIMEx_PWMN_Start+0x104>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <HAL_TIMEx_PWMN_Start+0x14c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_TIMEx_PWMN_Start+0x104>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_TIMEx_PWMN_Start+0x150>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIMEx_PWMN_Start+0x104>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <HAL_TIMEx_PWMN_Start+0x154>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d111      	bne.n	8003e0c <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d010      	beq.n	8003e1c <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	e007      	b.n	8003e1c <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40013400 	.word	0x40013400
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00

08003e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e050      	b.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d018      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d009      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40013400 	.word	0x40013400
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40000800 	.word	0x40000800
 8003f10:	40000c00 	.word	0x40000c00

08003f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e03d      	b.n	8003fac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2204      	movs	r2, #4
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	401a      	ands	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1a      	ldr	r2, [r3, #32]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e03f      	b.n	8004090 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fd fb47 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2224      	movs	r2, #36	; 0x24
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004040:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fc84 	bl	8004950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004056:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004066:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004076:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d17c      	bne.n	80041b2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_UART_Transmit+0x2c>
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e075      	b.n	80041b4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Transmit+0x3e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e06e      	b.n	80041b4 <HAL_UART_Transmit+0x11c>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	; 0x21
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ec:	f7fd fbe0 	bl	80018b0 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d108      	bne.n	800411a <HAL_UART_Transmit+0x82>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e003      	b.n	8004122 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800412a:	e02a      	b.n	8004182 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2200      	movs	r2, #0
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa37 	bl	80045aa <UART_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e036      	b.n	80041b4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800415a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	3302      	adds	r3, #2
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e007      	b.n	8004174 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1cf      	bne.n	800412c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2200      	movs	r2, #0
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fa07 	bl	80045aa <UART_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e006      	b.n	80041b4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
  }
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d11d      	bne.n	8004212 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_UART_Receive_IT+0x26>
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e016      	b.n	8004214 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_UART_Receive_IT+0x38>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e00f      	b.n	8004214 <HAL_UART_Receive_IT+0x58>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	461a      	mov	r2, r3
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fa18 	bl	800463e <UART_Start_Receive_IT>
 800420e:	4603      	mov	r3, r0
 8004210:	e000      	b.n	8004214 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004212:	2302      	movs	r3, #2
  }
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_UART_IRQHandler+0x52>
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fac9 	bl	80047fe <UART_Receive_IT>
      return;
 800426c:	e17b      	b.n	8004566 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80b1 	beq.w	80043d8 <HAL_UART_IRQHandler+0x1bc>
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <HAL_UART_IRQHandler+0x70>
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a6 	beq.w	80043d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_UART_IRQHandler+0x90>
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f043 0201 	orr.w	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_UART_IRQHandler+0xb0>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f043 0202 	orr.w	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_UART_IRQHandler+0xd0>
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f043 0204 	orr.w	r2, r3, #4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00f      	beq.n	8004316 <HAL_UART_IRQHandler+0xfa>
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <HAL_UART_IRQHandler+0xee>
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f043 0208 	orr.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 811e 	beq.w	800455c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_UART_IRQHandler+0x11e>
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fa62 	bl	80047fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_UART_IRQHandler+0x146>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d031      	beq.n	80043c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f9a4 	bl	80046b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d023      	beq.n	80043be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004384:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	2b00      	cmp	r3, #0
 800438c:	d013      	beq.n	80043b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	4a76      	ldr	r2, [pc, #472]	; (800456c <HAL_UART_IRQHandler+0x350>)
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd fc74 	bl	8001c88 <HAL_DMA_Abort_IT>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b0:	4610      	mov	r0, r2
 80043b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	e00e      	b.n	80043d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8e3 	bl	8004582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043bc:	e00a      	b.n	80043d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8df 	bl	8004582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	e006      	b.n	80043d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8db 	bl	8004582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043d2:	e0c3      	b.n	800455c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	bf00      	nop
    return;
 80043d6:	e0c1      	b.n	800455c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f040 80a1 	bne.w	8004524 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 809b 	beq.w	8004524 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8095 	beq.w	8004524 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d04e      	beq.n	80044bc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004428:	8a3b      	ldrh	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8098 	beq.w	8004560 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004434:	8a3a      	ldrh	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	f080 8092 	bcs.w	8004560 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8a3a      	ldrh	r2, [r7, #16]
 8004440:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b20      	cmp	r3, #32
 800444a:	d02b      	beq.n	80044a4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0210 	bic.w	r2, r2, #16
 8004498:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd fbb8 	bl	8001c14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f86d 	bl	8004594 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044ba:	e051      	b.n	8004560 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d047      	beq.n	8004564 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80044d4:	8a7b      	ldrh	r3, [r7, #18]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044e8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004518:	8a7b      	ldrh	r3, [r7, #18]
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f839 	bl	8004594 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004522:	e01f      	b.n	8004564 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_UART_IRQHandler+0x324>
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8f9 	bl	8004730 <UART_Transmit_IT>
    return;
 800453e:	e012      	b.n	8004566 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <HAL_UART_IRQHandler+0x34a>
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f93a 	bl	80047ce <UART_EndTransmit_IT>
    return;
 800455a:	e004      	b.n	8004566 <HAL_UART_IRQHandler+0x34a>
    return;
 800455c:	bf00      	nop
 800455e:	e002      	b.n	8004566 <HAL_UART_IRQHandler+0x34a>
      return;
 8004560:	bf00      	nop
 8004562:	e000      	b.n	8004566 <HAL_UART_IRQHandler+0x34a>
      return;
 8004564:	bf00      	nop
  }
}
 8004566:	3728      	adds	r7, #40	; 0x28
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	08004709 	.word	0x08004709

08004570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ba:	e02c      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d028      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0x30>
 80045ca:	f7fd f971 	bl	80018b0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d21d      	bcs.n	8004616 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e00f      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	429a      	cmp	r2, r3
 8004632:	d0c3      	beq.n	80045bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	88fa      	ldrh	r2, [r7, #6]
 8004656:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2222      	movs	r2, #34	; 0x22
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0220 	orr.w	r2, r2, #32
 80046a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0210 	bic.w	r2, r2, #16
 80046ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff ff2d 	bl	8004582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b21      	cmp	r3, #33	; 0x21
 8004742:	d13e      	bne.n	80047c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474c:	d114      	bne.n	8004778 <UART_Transmit_IT+0x48>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d110      	bne.n	8004778 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	1c9a      	adds	r2, r3, #2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	621a      	str	r2, [r3, #32]
 8004776:	e008      	b.n	800478a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	1c59      	adds	r1, r3, #1
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6211      	str	r1, [r2, #32]
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29b      	uxth	r3, r3
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4619      	mov	r1, r3
 8004798:	84d1      	strh	r1, [r2, #38]	; 0x26
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	e000      	b.n	80047c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
  }
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff febe 	bl	8004570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b22      	cmp	r3, #34	; 0x22
 8004810:	f040 8099 	bne.w	8004946 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d117      	bne.n	800484e <UART_Receive_IT+0x50>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d113      	bne.n	800484e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	b29a      	uxth	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	1c9a      	adds	r2, r3, #2
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	; 0x28
 800484c:	e026      	b.n	800489c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004860:	d007      	beq.n	8004872 <UART_Receive_IT+0x74>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <UART_Receive_IT+0x82>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e008      	b.n	8004892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800488c:	b2da      	uxtb	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4619      	mov	r1, r3
 80048aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d148      	bne.n	8004942 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0220 	bic.w	r2, r2, #32
 80048be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d123      	bne.n	8004938 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0210 	bic.w	r2, r2, #16
 8004904:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d10a      	bne.n	800492a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff fe2f 	bl	8004594 <HAL_UARTEx_RxEventCallback>
 8004936:	e002      	b.n	800493e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fb ffed 	bl	8000918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e002      	b.n	8004948 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800498a:	f023 030c 	bic.w	r3, r3, #12
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	430b      	orrs	r3, r1
 8004996:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <UART_SetConfig+0x114>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d103      	bne.n	80049c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7fe fa6e 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	e002      	b.n	80049c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe fa56 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 80049c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009a      	lsls	r2, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <UART_SetConfig+0x118>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	0119      	lsls	r1, r3, #4
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	009a      	lsls	r2, r3, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049fc:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <UART_SetConfig+0x118>)
 80049fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2064      	movs	r0, #100	; 0x64
 8004a06:	fb00 f303 	mul.w	r3, r0, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	3332      	adds	r3, #50	; 0x32
 8004a10:	4a15      	ldr	r2, [pc, #84]	; (8004a68 <UART_SetConfig+0x118>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1c:	4419      	add	r1, r3
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009a      	lsls	r2, r3, #2
 8004a28:	441a      	add	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <UART_SetConfig+0x118>)
 8004a36:	fba3 0302 	umull	r0, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	2064      	movs	r0, #100	; 0x64
 8004a3e:	fb00 f303 	mul.w	r3, r0, r3
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	3332      	adds	r3, #50	; 0x32
 8004a48:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <UART_SetConfig+0x118>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	f003 020f 	and.w	r2, r3, #15
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	440a      	add	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40013800 	.word	0x40013800
 8004a68:	51eb851f 	.word	0x51eb851f

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	2600      	movs	r6, #0
 8004a7c:	4d0c      	ldr	r5, [pc, #48]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7e:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	f000 ffb6 	bl	80059f8 <_init>
 8004a8c:	2600      	movs	r6, #0
 8004a8e:	4d0a      	ldr	r5, [pc, #40]	; (8004ab8 <__libc_init_array+0x40>)
 8004a90:	4c0a      	ldr	r4, [pc, #40]	; (8004abc <__libc_init_array+0x44>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08005ae8 	.word	0x08005ae8
 8004ab4:	08005ae8 	.word	0x08005ae8
 8004ab8:	08005ae8 	.word	0x08005ae8
 8004abc:	08005aec 	.word	0x08005aec

08004ac0 <memset>:
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4402      	add	r2, r0
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d100      	bne.n	8004aca <memset+0xa>
 8004ac8:	4770      	bx	lr
 8004aca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ace:	e7f9      	b.n	8004ac4 <memset+0x4>

08004ad0 <iprintf>:
 8004ad0:	b40f      	push	{r0, r1, r2, r3}
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <iprintf+0x2c>)
 8004ad4:	b513      	push	{r0, r1, r4, lr}
 8004ad6:	681c      	ldr	r4, [r3, #0]
 8004ad8:	b124      	cbz	r4, 8004ae4 <iprintf+0x14>
 8004ada:	69a3      	ldr	r3, [r4, #24]
 8004adc:	b913      	cbnz	r3, 8004ae4 <iprintf+0x14>
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f866 	bl	8004bb0 <__sinit>
 8004ae4:	ab05      	add	r3, sp, #20
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	9a04      	ldr	r2, [sp, #16]
 8004aea:	68a1      	ldr	r1, [r4, #8]
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	f000 f9bb 	bl	8004e68 <_vfiprintf_r>
 8004af2:	b002      	add	sp, #8
 8004af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af8:	b004      	add	sp, #16
 8004afa:	4770      	bx	lr
 8004afc:	2000000c 	.word	0x2000000c

08004b00 <std>:
 8004b00:	2300      	movs	r3, #0
 8004b02:	b510      	push	{r4, lr}
 8004b04:	4604      	mov	r4, r0
 8004b06:	e9c0 3300 	strd	r3, r3, [r0]
 8004b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b0e:	6083      	str	r3, [r0, #8]
 8004b10:	8181      	strh	r1, [r0, #12]
 8004b12:	6643      	str	r3, [r0, #100]	; 0x64
 8004b14:	81c2      	strh	r2, [r0, #14]
 8004b16:	6183      	str	r3, [r0, #24]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	305c      	adds	r0, #92	; 0x5c
 8004b1e:	f7ff ffcf 	bl	8004ac0 <memset>
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <std+0x38>)
 8004b24:	6224      	str	r4, [r4, #32]
 8004b26:	6263      	str	r3, [r4, #36]	; 0x24
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <std+0x3c>)
 8004b2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <std+0x40>)
 8004b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <std+0x44>)
 8004b32:	6323      	str	r3, [r4, #48]	; 0x30
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	bf00      	nop
 8004b38:	08005415 	.word	0x08005415
 8004b3c:	08005437 	.word	0x08005437
 8004b40:	0800546f 	.word	0x0800546f
 8004b44:	08005493 	.word	0x08005493

08004b48 <_cleanup_r>:
 8004b48:	4901      	ldr	r1, [pc, #4]	; (8004b50 <_cleanup_r+0x8>)
 8004b4a:	f000 b8af 	b.w	8004cac <_fwalk_reent>
 8004b4e:	bf00      	nop
 8004b50:	08005765 	.word	0x08005765

08004b54 <__sfmoreglue>:
 8004b54:	2268      	movs	r2, #104	; 0x68
 8004b56:	b570      	push	{r4, r5, r6, lr}
 8004b58:	1e4d      	subs	r5, r1, #1
 8004b5a:	4355      	muls	r5, r2
 8004b5c:	460e      	mov	r6, r1
 8004b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b62:	f000 f8e5 	bl	8004d30 <_malloc_r>
 8004b66:	4604      	mov	r4, r0
 8004b68:	b140      	cbz	r0, 8004b7c <__sfmoreglue+0x28>
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b70:	300c      	adds	r0, #12
 8004b72:	60a0      	str	r0, [r4, #8]
 8004b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b78:	f7ff ffa2 	bl	8004ac0 <memset>
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}

08004b80 <__sfp_lock_acquire>:
 8004b80:	4801      	ldr	r0, [pc, #4]	; (8004b88 <__sfp_lock_acquire+0x8>)
 8004b82:	f000 b8b3 	b.w	8004cec <__retarget_lock_acquire_recursive>
 8004b86:	bf00      	nop
 8004b88:	20000301 	.word	0x20000301

08004b8c <__sfp_lock_release>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	; (8004b94 <__sfp_lock_release+0x8>)
 8004b8e:	f000 b8ae 	b.w	8004cee <__retarget_lock_release_recursive>
 8004b92:	bf00      	nop
 8004b94:	20000301 	.word	0x20000301

08004b98 <__sinit_lock_acquire>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__sinit_lock_acquire+0x8>)
 8004b9a:	f000 b8a7 	b.w	8004cec <__retarget_lock_acquire_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	20000302 	.word	0x20000302

08004ba4 <__sinit_lock_release>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sinit_lock_release+0x8>)
 8004ba6:	f000 b8a2 	b.w	8004cee <__retarget_lock_release_recursive>
 8004baa:	bf00      	nop
 8004bac:	20000302 	.word	0x20000302

08004bb0 <__sinit>:
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	f7ff fff0 	bl	8004b98 <__sinit_lock_acquire>
 8004bb8:	69a3      	ldr	r3, [r4, #24]
 8004bba:	b11b      	cbz	r3, 8004bc4 <__sinit+0x14>
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	f7ff bff0 	b.w	8004ba4 <__sinit_lock_release>
 8004bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <__sinit+0x68>)
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <__sinit+0x6c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	bf08      	it	eq
 8004bd6:	2301      	moveq	r3, #1
 8004bd8:	4620      	mov	r0, r4
 8004bda:	bf08      	it	eq
 8004bdc:	61a3      	streq	r3, [r4, #24]
 8004bde:	f000 f81f 	bl	8004c20 <__sfp>
 8004be2:	6060      	str	r0, [r4, #4]
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 f81b 	bl	8004c20 <__sfp>
 8004bea:	60a0      	str	r0, [r4, #8]
 8004bec:	4620      	mov	r0, r4
 8004bee:	f000 f817 	bl	8004c20 <__sfp>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2104      	movs	r1, #4
 8004bf6:	60e0      	str	r0, [r4, #12]
 8004bf8:	6860      	ldr	r0, [r4, #4]
 8004bfa:	f7ff ff81 	bl	8004b00 <std>
 8004bfe:	2201      	movs	r2, #1
 8004c00:	2109      	movs	r1, #9
 8004c02:	68a0      	ldr	r0, [r4, #8]
 8004c04:	f7ff ff7c 	bl	8004b00 <std>
 8004c08:	2202      	movs	r2, #2
 8004c0a:	2112      	movs	r1, #18
 8004c0c:	68e0      	ldr	r0, [r4, #12]
 8004c0e:	f7ff ff77 	bl	8004b00 <std>
 8004c12:	2301      	movs	r3, #1
 8004c14:	61a3      	str	r3, [r4, #24]
 8004c16:	e7d1      	b.n	8004bbc <__sinit+0xc>
 8004c18:	08005a50 	.word	0x08005a50
 8004c1c:	08004b49 	.word	0x08004b49

08004c20 <__sfp>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	4607      	mov	r7, r0
 8004c24:	f7ff ffac 	bl	8004b80 <__sfp_lock_acquire>
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <__sfp+0x84>)
 8004c2a:	681e      	ldr	r6, [r3, #0]
 8004c2c:	69b3      	ldr	r3, [r6, #24]
 8004c2e:	b913      	cbnz	r3, 8004c36 <__sfp+0x16>
 8004c30:	4630      	mov	r0, r6
 8004c32:	f7ff ffbd 	bl	8004bb0 <__sinit>
 8004c36:	3648      	adds	r6, #72	; 0x48
 8004c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	d503      	bpl.n	8004c48 <__sfp+0x28>
 8004c40:	6833      	ldr	r3, [r6, #0]
 8004c42:	b30b      	cbz	r3, 8004c88 <__sfp+0x68>
 8004c44:	6836      	ldr	r6, [r6, #0]
 8004c46:	e7f7      	b.n	8004c38 <__sfp+0x18>
 8004c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c4c:	b9d5      	cbnz	r5, 8004c84 <__sfp+0x64>
 8004c4e:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <__sfp+0x88>)
 8004c50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c54:	60e3      	str	r3, [r4, #12]
 8004c56:	6665      	str	r5, [r4, #100]	; 0x64
 8004c58:	f000 f847 	bl	8004cea <__retarget_lock_init_recursive>
 8004c5c:	f7ff ff96 	bl	8004b8c <__sfp_lock_release>
 8004c60:	2208      	movs	r2, #8
 8004c62:	4629      	mov	r1, r5
 8004c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c6c:	6025      	str	r5, [r4, #0]
 8004c6e:	61a5      	str	r5, [r4, #24]
 8004c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c74:	f7ff ff24 	bl	8004ac0 <memset>
 8004c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c80:	4620      	mov	r0, r4
 8004c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c84:	3468      	adds	r4, #104	; 0x68
 8004c86:	e7d9      	b.n	8004c3c <__sfp+0x1c>
 8004c88:	2104      	movs	r1, #4
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	f7ff ff62 	bl	8004b54 <__sfmoreglue>
 8004c90:	4604      	mov	r4, r0
 8004c92:	6030      	str	r0, [r6, #0]
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d1d5      	bne.n	8004c44 <__sfp+0x24>
 8004c98:	f7ff ff78 	bl	8004b8c <__sfp_lock_release>
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	e7ee      	b.n	8004c80 <__sfp+0x60>
 8004ca2:	bf00      	nop
 8004ca4:	08005a50 	.word	0x08005a50
 8004ca8:	ffff0001 	.word	0xffff0001

08004cac <_fwalk_reent>:
 8004cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	4688      	mov	r8, r1
 8004cb4:	2700      	movs	r7, #0
 8004cb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8004cc2:	d505      	bpl.n	8004cd0 <_fwalk_reent+0x24>
 8004cc4:	6824      	ldr	r4, [r4, #0]
 8004cc6:	2c00      	cmp	r4, #0
 8004cc8:	d1f7      	bne.n	8004cba <_fwalk_reent+0xe>
 8004cca:	4638      	mov	r0, r7
 8004ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd0:	89ab      	ldrh	r3, [r5, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d907      	bls.n	8004ce6 <_fwalk_reent+0x3a>
 8004cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	d003      	beq.n	8004ce6 <_fwalk_reent+0x3a>
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	47c0      	blx	r8
 8004ce4:	4307      	orrs	r7, r0
 8004ce6:	3568      	adds	r5, #104	; 0x68
 8004ce8:	e7e9      	b.n	8004cbe <_fwalk_reent+0x12>

08004cea <__retarget_lock_init_recursive>:
 8004cea:	4770      	bx	lr

08004cec <__retarget_lock_acquire_recursive>:
 8004cec:	4770      	bx	lr

08004cee <__retarget_lock_release_recursive>:
 8004cee:	4770      	bx	lr

08004cf0 <sbrk_aligned>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4e0e      	ldr	r6, [pc, #56]	; (8004d2c <sbrk_aligned+0x3c>)
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	6831      	ldr	r1, [r6, #0]
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b911      	cbnz	r1, 8004d02 <sbrk_aligned+0x12>
 8004cfc:	f000 fb7a 	bl	80053f4 <_sbrk_r>
 8004d00:	6030      	str	r0, [r6, #0]
 8004d02:	4621      	mov	r1, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 fb75 	bl	80053f4 <_sbrk_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d00a      	beq.n	8004d24 <sbrk_aligned+0x34>
 8004d0e:	1cc4      	adds	r4, r0, #3
 8004d10:	f024 0403 	bic.w	r4, r4, #3
 8004d14:	42a0      	cmp	r0, r4
 8004d16:	d007      	beq.n	8004d28 <sbrk_aligned+0x38>
 8004d18:	1a21      	subs	r1, r4, r0
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 fb6a 	bl	80053f4 <_sbrk_r>
 8004d20:	3001      	adds	r0, #1
 8004d22:	d101      	bne.n	8004d28 <sbrk_aligned+0x38>
 8004d24:	f04f 34ff 	mov.w	r4, #4294967295
 8004d28:	4620      	mov	r0, r4
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	20000308 	.word	0x20000308

08004d30 <_malloc_r>:
 8004d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d34:	1ccd      	adds	r5, r1, #3
 8004d36:	f025 0503 	bic.w	r5, r5, #3
 8004d3a:	3508      	adds	r5, #8
 8004d3c:	2d0c      	cmp	r5, #12
 8004d3e:	bf38      	it	cc
 8004d40:	250c      	movcc	r5, #12
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	4607      	mov	r7, r0
 8004d46:	db01      	blt.n	8004d4c <_malloc_r+0x1c>
 8004d48:	42a9      	cmp	r1, r5
 8004d4a:	d905      	bls.n	8004d58 <_malloc_r+0x28>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	2600      	movs	r6, #0
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4630      	mov	r0, r6
 8004d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d58:	4e2e      	ldr	r6, [pc, #184]	; (8004e14 <_malloc_r+0xe4>)
 8004d5a:	f000 fdc5 	bl	80058e8 <__malloc_lock>
 8004d5e:	6833      	ldr	r3, [r6, #0]
 8004d60:	461c      	mov	r4, r3
 8004d62:	bb34      	cbnz	r4, 8004db2 <_malloc_r+0x82>
 8004d64:	4629      	mov	r1, r5
 8004d66:	4638      	mov	r0, r7
 8004d68:	f7ff ffc2 	bl	8004cf0 <sbrk_aligned>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	4604      	mov	r4, r0
 8004d70:	d14d      	bne.n	8004e0e <_malloc_r+0xde>
 8004d72:	6834      	ldr	r4, [r6, #0]
 8004d74:	4626      	mov	r6, r4
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	d140      	bne.n	8004dfc <_malloc_r+0xcc>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4638      	mov	r0, r7
 8004d80:	eb04 0803 	add.w	r8, r4, r3
 8004d84:	f000 fb36 	bl	80053f4 <_sbrk_r>
 8004d88:	4580      	cmp	r8, r0
 8004d8a:	d13a      	bne.n	8004e02 <_malloc_r+0xd2>
 8004d8c:	6821      	ldr	r1, [r4, #0]
 8004d8e:	3503      	adds	r5, #3
 8004d90:	1a6d      	subs	r5, r5, r1
 8004d92:	f025 0503 	bic.w	r5, r5, #3
 8004d96:	3508      	adds	r5, #8
 8004d98:	2d0c      	cmp	r5, #12
 8004d9a:	bf38      	it	cc
 8004d9c:	250c      	movcc	r5, #12
 8004d9e:	4638      	mov	r0, r7
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7ff ffa5 	bl	8004cf0 <sbrk_aligned>
 8004da6:	3001      	adds	r0, #1
 8004da8:	d02b      	beq.n	8004e02 <_malloc_r+0xd2>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	442b      	add	r3, r5
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	e00e      	b.n	8004dd0 <_malloc_r+0xa0>
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	1b52      	subs	r2, r2, r5
 8004db6:	d41e      	bmi.n	8004df6 <_malloc_r+0xc6>
 8004db8:	2a0b      	cmp	r2, #11
 8004dba:	d916      	bls.n	8004dea <_malloc_r+0xba>
 8004dbc:	1961      	adds	r1, r4, r5
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	6025      	str	r5, [r4, #0]
 8004dc2:	bf18      	it	ne
 8004dc4:	6059      	strne	r1, [r3, #4]
 8004dc6:	6863      	ldr	r3, [r4, #4]
 8004dc8:	bf08      	it	eq
 8004dca:	6031      	streq	r1, [r6, #0]
 8004dcc:	5162      	str	r2, [r4, r5]
 8004dce:	604b      	str	r3, [r1, #4]
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f104 060b 	add.w	r6, r4, #11
 8004dd6:	f000 fd8d 	bl	80058f4 <__malloc_unlock>
 8004dda:	f026 0607 	bic.w	r6, r6, #7
 8004dde:	1d23      	adds	r3, r4, #4
 8004de0:	1af2      	subs	r2, r6, r3
 8004de2:	d0b6      	beq.n	8004d52 <_malloc_r+0x22>
 8004de4:	1b9b      	subs	r3, r3, r6
 8004de6:	50a3      	str	r3, [r4, r2]
 8004de8:	e7b3      	b.n	8004d52 <_malloc_r+0x22>
 8004dea:	6862      	ldr	r2, [r4, #4]
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	bf0c      	ite	eq
 8004df0:	6032      	streq	r2, [r6, #0]
 8004df2:	605a      	strne	r2, [r3, #4]
 8004df4:	e7ec      	b.n	8004dd0 <_malloc_r+0xa0>
 8004df6:	4623      	mov	r3, r4
 8004df8:	6864      	ldr	r4, [r4, #4]
 8004dfa:	e7b2      	b.n	8004d62 <_malloc_r+0x32>
 8004dfc:	4634      	mov	r4, r6
 8004dfe:	6876      	ldr	r6, [r6, #4]
 8004e00:	e7b9      	b.n	8004d76 <_malloc_r+0x46>
 8004e02:	230c      	movs	r3, #12
 8004e04:	4638      	mov	r0, r7
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	f000 fd74 	bl	80058f4 <__malloc_unlock>
 8004e0c:	e7a1      	b.n	8004d52 <_malloc_r+0x22>
 8004e0e:	6025      	str	r5, [r4, #0]
 8004e10:	e7de      	b.n	8004dd0 <_malloc_r+0xa0>
 8004e12:	bf00      	nop
 8004e14:	20000304 	.word	0x20000304

08004e18 <__sfputc_r>:
 8004e18:	6893      	ldr	r3, [r2, #8]
 8004e1a:	b410      	push	{r4}
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	6093      	str	r3, [r2, #8]
 8004e22:	da07      	bge.n	8004e34 <__sfputc_r+0x1c>
 8004e24:	6994      	ldr	r4, [r2, #24]
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	db01      	blt.n	8004e2e <__sfputc_r+0x16>
 8004e2a:	290a      	cmp	r1, #10
 8004e2c:	d102      	bne.n	8004e34 <__sfputc_r+0x1c>
 8004e2e:	bc10      	pop	{r4}
 8004e30:	f000 bb34 	b.w	800549c <__swbuf_r>
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	1c58      	adds	r0, r3, #1
 8004e38:	6010      	str	r0, [r2, #0]
 8004e3a:	7019      	strb	r1, [r3, #0]
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	bc10      	pop	{r4}
 8004e40:	4770      	bx	lr

08004e42 <__sfputs_r>:
 8004e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e44:	4606      	mov	r6, r0
 8004e46:	460f      	mov	r7, r1
 8004e48:	4614      	mov	r4, r2
 8004e4a:	18d5      	adds	r5, r2, r3
 8004e4c:	42ac      	cmp	r4, r5
 8004e4e:	d101      	bne.n	8004e54 <__sfputs_r+0x12>
 8004e50:	2000      	movs	r0, #0
 8004e52:	e007      	b.n	8004e64 <__sfputs_r+0x22>
 8004e54:	463a      	mov	r2, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5c:	f7ff ffdc 	bl	8004e18 <__sfputc_r>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d1f3      	bne.n	8004e4c <__sfputs_r+0xa>
 8004e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e68 <_vfiprintf_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	460d      	mov	r5, r1
 8004e6e:	4614      	mov	r4, r2
 8004e70:	4698      	mov	r8, r3
 8004e72:	4606      	mov	r6, r0
 8004e74:	b09d      	sub	sp, #116	; 0x74
 8004e76:	b118      	cbz	r0, 8004e80 <_vfiprintf_r+0x18>
 8004e78:	6983      	ldr	r3, [r0, #24]
 8004e7a:	b90b      	cbnz	r3, 8004e80 <_vfiprintf_r+0x18>
 8004e7c:	f7ff fe98 	bl	8004bb0 <__sinit>
 8004e80:	4b89      	ldr	r3, [pc, #548]	; (80050a8 <_vfiprintf_r+0x240>)
 8004e82:	429d      	cmp	r5, r3
 8004e84:	d11b      	bne.n	8004ebe <_vfiprintf_r+0x56>
 8004e86:	6875      	ldr	r5, [r6, #4]
 8004e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e8a:	07d9      	lsls	r1, r3, #31
 8004e8c:	d405      	bmi.n	8004e9a <_vfiprintf_r+0x32>
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	059a      	lsls	r2, r3, #22
 8004e92:	d402      	bmi.n	8004e9a <_vfiprintf_r+0x32>
 8004e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e96:	f7ff ff29 	bl	8004cec <__retarget_lock_acquire_recursive>
 8004e9a:	89ab      	ldrh	r3, [r5, #12]
 8004e9c:	071b      	lsls	r3, r3, #28
 8004e9e:	d501      	bpl.n	8004ea4 <_vfiprintf_r+0x3c>
 8004ea0:	692b      	ldr	r3, [r5, #16]
 8004ea2:	b9eb      	cbnz	r3, 8004ee0 <_vfiprintf_r+0x78>
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 fb5c 	bl	8005564 <__swsetup_r>
 8004eac:	b1c0      	cbz	r0, 8004ee0 <_vfiprintf_r+0x78>
 8004eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eb0:	07dc      	lsls	r4, r3, #31
 8004eb2:	d50e      	bpl.n	8004ed2 <_vfiprintf_r+0x6a>
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	b01d      	add	sp, #116	; 0x74
 8004eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ebe:	4b7b      	ldr	r3, [pc, #492]	; (80050ac <_vfiprintf_r+0x244>)
 8004ec0:	429d      	cmp	r5, r3
 8004ec2:	d101      	bne.n	8004ec8 <_vfiprintf_r+0x60>
 8004ec4:	68b5      	ldr	r5, [r6, #8]
 8004ec6:	e7df      	b.n	8004e88 <_vfiprintf_r+0x20>
 8004ec8:	4b79      	ldr	r3, [pc, #484]	; (80050b0 <_vfiprintf_r+0x248>)
 8004eca:	429d      	cmp	r5, r3
 8004ecc:	bf08      	it	eq
 8004ece:	68f5      	ldreq	r5, [r6, #12]
 8004ed0:	e7da      	b.n	8004e88 <_vfiprintf_r+0x20>
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	0598      	lsls	r0, r3, #22
 8004ed6:	d4ed      	bmi.n	8004eb4 <_vfiprintf_r+0x4c>
 8004ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eda:	f7ff ff08 	bl	8004cee <__retarget_lock_release_recursive>
 8004ede:	e7e9      	b.n	8004eb4 <_vfiprintf_r+0x4c>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eea:	2330      	movs	r3, #48	; 0x30
 8004eec:	f04f 0901 	mov.w	r9, #1
 8004ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ef4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80050b4 <_vfiprintf_r+0x24c>
 8004ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004efc:	4623      	mov	r3, r4
 8004efe:	469a      	mov	sl, r3
 8004f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f04:	b10a      	cbz	r2, 8004f0a <_vfiprintf_r+0xa2>
 8004f06:	2a25      	cmp	r2, #37	; 0x25
 8004f08:	d1f9      	bne.n	8004efe <_vfiprintf_r+0x96>
 8004f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f0e:	d00b      	beq.n	8004f28 <_vfiprintf_r+0xc0>
 8004f10:	465b      	mov	r3, fp
 8004f12:	4622      	mov	r2, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7ff ff93 	bl	8004e42 <__sfputs_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f000 80aa 	beq.w	8005076 <_vfiprintf_r+0x20e>
 8004f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f24:	445a      	add	r2, fp
 8004f26:	9209      	str	r2, [sp, #36]	; 0x24
 8004f28:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80a2 	beq.w	8005076 <_vfiprintf_r+0x20e>
 8004f32:	2300      	movs	r3, #0
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295
 8004f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f3c:	f10a 0a01 	add.w	sl, sl, #1
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	9307      	str	r3, [sp, #28]
 8004f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f48:	931a      	str	r3, [sp, #104]	; 0x68
 8004f4a:	4654      	mov	r4, sl
 8004f4c:	2205      	movs	r2, #5
 8004f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f52:	4858      	ldr	r0, [pc, #352]	; (80050b4 <_vfiprintf_r+0x24c>)
 8004f54:	f000 fcba 	bl	80058cc <memchr>
 8004f58:	9a04      	ldr	r2, [sp, #16]
 8004f5a:	b9d8      	cbnz	r0, 8004f94 <_vfiprintf_r+0x12c>
 8004f5c:	06d1      	lsls	r1, r2, #27
 8004f5e:	bf44      	itt	mi
 8004f60:	2320      	movmi	r3, #32
 8004f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f66:	0713      	lsls	r3, r2, #28
 8004f68:	bf44      	itt	mi
 8004f6a:	232b      	movmi	r3, #43	; 0x2b
 8004f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f70:	f89a 3000 	ldrb.w	r3, [sl]
 8004f74:	2b2a      	cmp	r3, #42	; 0x2a
 8004f76:	d015      	beq.n	8004fa4 <_vfiprintf_r+0x13c>
 8004f78:	4654      	mov	r4, sl
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f04f 0c0a 	mov.w	ip, #10
 8004f80:	9a07      	ldr	r2, [sp, #28]
 8004f82:	4621      	mov	r1, r4
 8004f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f88:	3b30      	subs	r3, #48	; 0x30
 8004f8a:	2b09      	cmp	r3, #9
 8004f8c:	d94e      	bls.n	800502c <_vfiprintf_r+0x1c4>
 8004f8e:	b1b0      	cbz	r0, 8004fbe <_vfiprintf_r+0x156>
 8004f90:	9207      	str	r2, [sp, #28]
 8004f92:	e014      	b.n	8004fbe <_vfiprintf_r+0x156>
 8004f94:	eba0 0308 	sub.w	r3, r0, r8
 8004f98:	fa09 f303 	lsl.w	r3, r9, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	46a2      	mov	sl, r4
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	e7d2      	b.n	8004f4a <_vfiprintf_r+0xe2>
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	1d19      	adds	r1, r3, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	9103      	str	r1, [sp, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfbb      	ittet	lt
 8004fb0:	425b      	neglt	r3, r3
 8004fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8004fb6:	9307      	strge	r3, [sp, #28]
 8004fb8:	9307      	strlt	r3, [sp, #28]
 8004fba:	bfb8      	it	lt
 8004fbc:	9204      	strlt	r2, [sp, #16]
 8004fbe:	7823      	ldrb	r3, [r4, #0]
 8004fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fc2:	d10c      	bne.n	8004fde <_vfiprintf_r+0x176>
 8004fc4:	7863      	ldrb	r3, [r4, #1]
 8004fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc8:	d135      	bne.n	8005036 <_vfiprintf_r+0x1ce>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	3402      	adds	r4, #2
 8004fce:	1d1a      	adds	r2, r3, #4
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	9203      	str	r2, [sp, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bfb8      	it	lt
 8004fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fdc:	9305      	str	r3, [sp, #20]
 8004fde:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80050b8 <_vfiprintf_r+0x250>
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	7821      	ldrb	r1, [r4, #0]
 8004fe8:	f000 fc70 	bl	80058cc <memchr>
 8004fec:	b140      	cbz	r0, 8005000 <_vfiprintf_r+0x198>
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	eba0 000a 	sub.w	r0, r0, sl
 8004ff4:	fa03 f000 	lsl.w	r0, r3, r0
 8004ff8:	9b04      	ldr	r3, [sp, #16]
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	4303      	orrs	r3, r0
 8004ffe:	9304      	str	r3, [sp, #16]
 8005000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005004:	2206      	movs	r2, #6
 8005006:	482d      	ldr	r0, [pc, #180]	; (80050bc <_vfiprintf_r+0x254>)
 8005008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800500c:	f000 fc5e 	bl	80058cc <memchr>
 8005010:	2800      	cmp	r0, #0
 8005012:	d03f      	beq.n	8005094 <_vfiprintf_r+0x22c>
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <_vfiprintf_r+0x258>)
 8005016:	bb1b      	cbnz	r3, 8005060 <_vfiprintf_r+0x1f8>
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	3307      	adds	r3, #7
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	3308      	adds	r3, #8
 8005022:	9303      	str	r3, [sp, #12]
 8005024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005026:	443b      	add	r3, r7
 8005028:	9309      	str	r3, [sp, #36]	; 0x24
 800502a:	e767      	b.n	8004efc <_vfiprintf_r+0x94>
 800502c:	460c      	mov	r4, r1
 800502e:	2001      	movs	r0, #1
 8005030:	fb0c 3202 	mla	r2, ip, r2, r3
 8005034:	e7a5      	b.n	8004f82 <_vfiprintf_r+0x11a>
 8005036:	2300      	movs	r3, #0
 8005038:	f04f 0c0a 	mov.w	ip, #10
 800503c:	4619      	mov	r1, r3
 800503e:	3401      	adds	r4, #1
 8005040:	9305      	str	r3, [sp, #20]
 8005042:	4620      	mov	r0, r4
 8005044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005048:	3a30      	subs	r2, #48	; 0x30
 800504a:	2a09      	cmp	r2, #9
 800504c:	d903      	bls.n	8005056 <_vfiprintf_r+0x1ee>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0c5      	beq.n	8004fde <_vfiprintf_r+0x176>
 8005052:	9105      	str	r1, [sp, #20]
 8005054:	e7c3      	b.n	8004fde <_vfiprintf_r+0x176>
 8005056:	4604      	mov	r4, r0
 8005058:	2301      	movs	r3, #1
 800505a:	fb0c 2101 	mla	r1, ip, r1, r2
 800505e:	e7f0      	b.n	8005042 <_vfiprintf_r+0x1da>
 8005060:	ab03      	add	r3, sp, #12
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	462a      	mov	r2, r5
 8005066:	4630      	mov	r0, r6
 8005068:	4b16      	ldr	r3, [pc, #88]	; (80050c4 <_vfiprintf_r+0x25c>)
 800506a:	a904      	add	r1, sp, #16
 800506c:	f3af 8000 	nop.w
 8005070:	4607      	mov	r7, r0
 8005072:	1c78      	adds	r0, r7, #1
 8005074:	d1d6      	bne.n	8005024 <_vfiprintf_r+0x1bc>
 8005076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005078:	07d9      	lsls	r1, r3, #31
 800507a:	d405      	bmi.n	8005088 <_vfiprintf_r+0x220>
 800507c:	89ab      	ldrh	r3, [r5, #12]
 800507e:	059a      	lsls	r2, r3, #22
 8005080:	d402      	bmi.n	8005088 <_vfiprintf_r+0x220>
 8005082:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005084:	f7ff fe33 	bl	8004cee <__retarget_lock_release_recursive>
 8005088:	89ab      	ldrh	r3, [r5, #12]
 800508a:	065b      	lsls	r3, r3, #25
 800508c:	f53f af12 	bmi.w	8004eb4 <_vfiprintf_r+0x4c>
 8005090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005092:	e711      	b.n	8004eb8 <_vfiprintf_r+0x50>
 8005094:	ab03      	add	r3, sp, #12
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	462a      	mov	r2, r5
 800509a:	4630      	mov	r0, r6
 800509c:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <_vfiprintf_r+0x25c>)
 800509e:	a904      	add	r1, sp, #16
 80050a0:	f000 f882 	bl	80051a8 <_printf_i>
 80050a4:	e7e4      	b.n	8005070 <_vfiprintf_r+0x208>
 80050a6:	bf00      	nop
 80050a8:	08005a74 	.word	0x08005a74
 80050ac:	08005a94 	.word	0x08005a94
 80050b0:	08005a54 	.word	0x08005a54
 80050b4:	08005ab4 	.word	0x08005ab4
 80050b8:	08005aba 	.word	0x08005aba
 80050bc:	08005abe 	.word	0x08005abe
 80050c0:	00000000 	.word	0x00000000
 80050c4:	08004e43 	.word	0x08004e43

080050c8 <_printf_common>:
 80050c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	4616      	mov	r6, r2
 80050ce:	4699      	mov	r9, r3
 80050d0:	688a      	ldr	r2, [r1, #8]
 80050d2:	690b      	ldr	r3, [r1, #16]
 80050d4:	4607      	mov	r7, r0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bfb8      	it	lt
 80050da:	4613      	movlt	r3, r2
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050e2:	460c      	mov	r4, r1
 80050e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e8:	b10a      	cbz	r2, 80050ee <_printf_common+0x26>
 80050ea:	3301      	adds	r3, #1
 80050ec:	6033      	str	r3, [r6, #0]
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	0699      	lsls	r1, r3, #26
 80050f2:	bf42      	ittt	mi
 80050f4:	6833      	ldrmi	r3, [r6, #0]
 80050f6:	3302      	addmi	r3, #2
 80050f8:	6033      	strmi	r3, [r6, #0]
 80050fa:	6825      	ldr	r5, [r4, #0]
 80050fc:	f015 0506 	ands.w	r5, r5, #6
 8005100:	d106      	bne.n	8005110 <_printf_common+0x48>
 8005102:	f104 0a19 	add.w	sl, r4, #25
 8005106:	68e3      	ldr	r3, [r4, #12]
 8005108:	6832      	ldr	r2, [r6, #0]
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	42ab      	cmp	r3, r5
 800510e:	dc28      	bgt.n	8005162 <_printf_common+0x9a>
 8005110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005114:	1e13      	subs	r3, r2, #0
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	bf18      	it	ne
 800511a:	2301      	movne	r3, #1
 800511c:	0692      	lsls	r2, r2, #26
 800511e:	d42d      	bmi.n	800517c <_printf_common+0xb4>
 8005120:	4649      	mov	r1, r9
 8005122:	4638      	mov	r0, r7
 8005124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005128:	47c0      	blx	r8
 800512a:	3001      	adds	r0, #1
 800512c:	d020      	beq.n	8005170 <_printf_common+0xa8>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	68e5      	ldr	r5, [r4, #12]
 8005132:	f003 0306 	and.w	r3, r3, #6
 8005136:	2b04      	cmp	r3, #4
 8005138:	bf18      	it	ne
 800513a:	2500      	movne	r5, #0
 800513c:	6832      	ldr	r2, [r6, #0]
 800513e:	f04f 0600 	mov.w	r6, #0
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	bf08      	it	eq
 8005146:	1aad      	subeq	r5, r5, r2
 8005148:	6922      	ldr	r2, [r4, #16]
 800514a:	bf08      	it	eq
 800514c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005150:	4293      	cmp	r3, r2
 8005152:	bfc4      	itt	gt
 8005154:	1a9b      	subgt	r3, r3, r2
 8005156:	18ed      	addgt	r5, r5, r3
 8005158:	341a      	adds	r4, #26
 800515a:	42b5      	cmp	r5, r6
 800515c:	d11a      	bne.n	8005194 <_printf_common+0xcc>
 800515e:	2000      	movs	r0, #0
 8005160:	e008      	b.n	8005174 <_printf_common+0xac>
 8005162:	2301      	movs	r3, #1
 8005164:	4652      	mov	r2, sl
 8005166:	4649      	mov	r1, r9
 8005168:	4638      	mov	r0, r7
 800516a:	47c0      	blx	r8
 800516c:	3001      	adds	r0, #1
 800516e:	d103      	bne.n	8005178 <_printf_common+0xb0>
 8005170:	f04f 30ff 	mov.w	r0, #4294967295
 8005174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005178:	3501      	adds	r5, #1
 800517a:	e7c4      	b.n	8005106 <_printf_common+0x3e>
 800517c:	2030      	movs	r0, #48	; 0x30
 800517e:	18e1      	adds	r1, r4, r3
 8005180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800518a:	4422      	add	r2, r4
 800518c:	3302      	adds	r3, #2
 800518e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005192:	e7c5      	b.n	8005120 <_printf_common+0x58>
 8005194:	2301      	movs	r3, #1
 8005196:	4622      	mov	r2, r4
 8005198:	4649      	mov	r1, r9
 800519a:	4638      	mov	r0, r7
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d0e6      	beq.n	8005170 <_printf_common+0xa8>
 80051a2:	3601      	adds	r6, #1
 80051a4:	e7d9      	b.n	800515a <_printf_common+0x92>
	...

080051a8 <_printf_i>:
 80051a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	7e0f      	ldrb	r7, [r1, #24]
 80051ae:	4691      	mov	r9, r2
 80051b0:	2f78      	cmp	r7, #120	; 0x78
 80051b2:	4680      	mov	r8, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	469a      	mov	sl, r3
 80051b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051be:	d807      	bhi.n	80051d0 <_printf_i+0x28>
 80051c0:	2f62      	cmp	r7, #98	; 0x62
 80051c2:	d80a      	bhi.n	80051da <_printf_i+0x32>
 80051c4:	2f00      	cmp	r7, #0
 80051c6:	f000 80d9 	beq.w	800537c <_printf_i+0x1d4>
 80051ca:	2f58      	cmp	r7, #88	; 0x58
 80051cc:	f000 80a4 	beq.w	8005318 <_printf_i+0x170>
 80051d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051d8:	e03a      	b.n	8005250 <_printf_i+0xa8>
 80051da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051de:	2b15      	cmp	r3, #21
 80051e0:	d8f6      	bhi.n	80051d0 <_printf_i+0x28>
 80051e2:	a101      	add	r1, pc, #4	; (adr r1, 80051e8 <_printf_i+0x40>)
 80051e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005255 	.word	0x08005255
 80051f0:	080051d1 	.word	0x080051d1
 80051f4:	080051d1 	.word	0x080051d1
 80051f8:	080051d1 	.word	0x080051d1
 80051fc:	080051d1 	.word	0x080051d1
 8005200:	08005255 	.word	0x08005255
 8005204:	080051d1 	.word	0x080051d1
 8005208:	080051d1 	.word	0x080051d1
 800520c:	080051d1 	.word	0x080051d1
 8005210:	080051d1 	.word	0x080051d1
 8005214:	08005363 	.word	0x08005363
 8005218:	08005285 	.word	0x08005285
 800521c:	08005345 	.word	0x08005345
 8005220:	080051d1 	.word	0x080051d1
 8005224:	080051d1 	.word	0x080051d1
 8005228:	08005385 	.word	0x08005385
 800522c:	080051d1 	.word	0x080051d1
 8005230:	08005285 	.word	0x08005285
 8005234:	080051d1 	.word	0x080051d1
 8005238:	080051d1 	.word	0x080051d1
 800523c:	0800534d 	.word	0x0800534d
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	602a      	str	r2, [r5, #0]
 8005248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800524c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005250:	2301      	movs	r3, #1
 8005252:	e0a4      	b.n	800539e <_printf_i+0x1f6>
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	6829      	ldr	r1, [r5, #0]
 8005258:	0606      	lsls	r6, r0, #24
 800525a:	f101 0304 	add.w	r3, r1, #4
 800525e:	d50a      	bpl.n	8005276 <_printf_i+0xce>
 8005260:	680e      	ldr	r6, [r1, #0]
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	2e00      	cmp	r6, #0
 8005266:	da03      	bge.n	8005270 <_printf_i+0xc8>
 8005268:	232d      	movs	r3, #45	; 0x2d
 800526a:	4276      	negs	r6, r6
 800526c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005270:	230a      	movs	r3, #10
 8005272:	485e      	ldr	r0, [pc, #376]	; (80053ec <_printf_i+0x244>)
 8005274:	e019      	b.n	80052aa <_printf_i+0x102>
 8005276:	680e      	ldr	r6, [r1, #0]
 8005278:	f010 0f40 	tst.w	r0, #64	; 0x40
 800527c:	602b      	str	r3, [r5, #0]
 800527e:	bf18      	it	ne
 8005280:	b236      	sxthne	r6, r6
 8005282:	e7ef      	b.n	8005264 <_printf_i+0xbc>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	6820      	ldr	r0, [r4, #0]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	6029      	str	r1, [r5, #0]
 800528c:	0601      	lsls	r1, r0, #24
 800528e:	d501      	bpl.n	8005294 <_printf_i+0xec>
 8005290:	681e      	ldr	r6, [r3, #0]
 8005292:	e002      	b.n	800529a <_printf_i+0xf2>
 8005294:	0646      	lsls	r6, r0, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0xe8>
 8005298:	881e      	ldrh	r6, [r3, #0]
 800529a:	2f6f      	cmp	r7, #111	; 0x6f
 800529c:	bf0c      	ite	eq
 800529e:	2308      	moveq	r3, #8
 80052a0:	230a      	movne	r3, #10
 80052a2:	4852      	ldr	r0, [pc, #328]	; (80053ec <_printf_i+0x244>)
 80052a4:	2100      	movs	r1, #0
 80052a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052aa:	6865      	ldr	r5, [r4, #4]
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	bfa8      	it	ge
 80052b0:	6821      	ldrge	r1, [r4, #0]
 80052b2:	60a5      	str	r5, [r4, #8]
 80052b4:	bfa4      	itt	ge
 80052b6:	f021 0104 	bicge.w	r1, r1, #4
 80052ba:	6021      	strge	r1, [r4, #0]
 80052bc:	b90e      	cbnz	r6, 80052c2 <_printf_i+0x11a>
 80052be:	2d00      	cmp	r5, #0
 80052c0:	d04d      	beq.n	800535e <_printf_i+0x1b6>
 80052c2:	4615      	mov	r5, r2
 80052c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80052c8:	fb03 6711 	mls	r7, r3, r1, r6
 80052cc:	5dc7      	ldrb	r7, [r0, r7]
 80052ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052d2:	4637      	mov	r7, r6
 80052d4:	42bb      	cmp	r3, r7
 80052d6:	460e      	mov	r6, r1
 80052d8:	d9f4      	bls.n	80052c4 <_printf_i+0x11c>
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d10b      	bne.n	80052f6 <_printf_i+0x14e>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	07de      	lsls	r6, r3, #31
 80052e2:	d508      	bpl.n	80052f6 <_printf_i+0x14e>
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	6861      	ldr	r1, [r4, #4]
 80052e8:	4299      	cmp	r1, r3
 80052ea:	bfde      	ittt	le
 80052ec:	2330      	movle	r3, #48	; 0x30
 80052ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052f6:	1b52      	subs	r2, r2, r5
 80052f8:	6122      	str	r2, [r4, #16]
 80052fa:	464b      	mov	r3, r9
 80052fc:	4621      	mov	r1, r4
 80052fe:	4640      	mov	r0, r8
 8005300:	f8cd a000 	str.w	sl, [sp]
 8005304:	aa03      	add	r2, sp, #12
 8005306:	f7ff fedf 	bl	80050c8 <_printf_common>
 800530a:	3001      	adds	r0, #1
 800530c:	d14c      	bne.n	80053a8 <_printf_i+0x200>
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
 8005312:	b004      	add	sp, #16
 8005314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005318:	4834      	ldr	r0, [pc, #208]	; (80053ec <_printf_i+0x244>)
 800531a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800531e:	6829      	ldr	r1, [r5, #0]
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f851 6b04 	ldr.w	r6, [r1], #4
 8005326:	6029      	str	r1, [r5, #0]
 8005328:	061d      	lsls	r5, r3, #24
 800532a:	d514      	bpl.n	8005356 <_printf_i+0x1ae>
 800532c:	07df      	lsls	r7, r3, #31
 800532e:	bf44      	itt	mi
 8005330:	f043 0320 	orrmi.w	r3, r3, #32
 8005334:	6023      	strmi	r3, [r4, #0]
 8005336:	b91e      	cbnz	r6, 8005340 <_printf_i+0x198>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	f023 0320 	bic.w	r3, r3, #32
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	2310      	movs	r3, #16
 8005342:	e7af      	b.n	80052a4 <_printf_i+0xfc>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	f043 0320 	orr.w	r3, r3, #32
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	2378      	movs	r3, #120	; 0x78
 800534e:	4828      	ldr	r0, [pc, #160]	; (80053f0 <_printf_i+0x248>)
 8005350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005354:	e7e3      	b.n	800531e <_printf_i+0x176>
 8005356:	0659      	lsls	r1, r3, #25
 8005358:	bf48      	it	mi
 800535a:	b2b6      	uxthmi	r6, r6
 800535c:	e7e6      	b.n	800532c <_printf_i+0x184>
 800535e:	4615      	mov	r5, r2
 8005360:	e7bb      	b.n	80052da <_printf_i+0x132>
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	6826      	ldr	r6, [r4, #0]
 8005366:	1d18      	adds	r0, r3, #4
 8005368:	6961      	ldr	r1, [r4, #20]
 800536a:	6028      	str	r0, [r5, #0]
 800536c:	0635      	lsls	r5, r6, #24
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	d501      	bpl.n	8005376 <_printf_i+0x1ce>
 8005372:	6019      	str	r1, [r3, #0]
 8005374:	e002      	b.n	800537c <_printf_i+0x1d4>
 8005376:	0670      	lsls	r0, r6, #25
 8005378:	d5fb      	bpl.n	8005372 <_printf_i+0x1ca>
 800537a:	8019      	strh	r1, [r3, #0]
 800537c:	2300      	movs	r3, #0
 800537e:	4615      	mov	r5, r2
 8005380:	6123      	str	r3, [r4, #16]
 8005382:	e7ba      	b.n	80052fa <_printf_i+0x152>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	2100      	movs	r1, #0
 8005388:	1d1a      	adds	r2, r3, #4
 800538a:	602a      	str	r2, [r5, #0]
 800538c:	681d      	ldr	r5, [r3, #0]
 800538e:	6862      	ldr	r2, [r4, #4]
 8005390:	4628      	mov	r0, r5
 8005392:	f000 fa9b 	bl	80058cc <memchr>
 8005396:	b108      	cbz	r0, 800539c <_printf_i+0x1f4>
 8005398:	1b40      	subs	r0, r0, r5
 800539a:	6060      	str	r0, [r4, #4]
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	2300      	movs	r3, #0
 80053a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a6:	e7a8      	b.n	80052fa <_printf_i+0x152>
 80053a8:	462a      	mov	r2, r5
 80053aa:	4649      	mov	r1, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	47d0      	blx	sl
 80053b2:	3001      	adds	r0, #1
 80053b4:	d0ab      	beq.n	800530e <_printf_i+0x166>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	079b      	lsls	r3, r3, #30
 80053ba:	d413      	bmi.n	80053e4 <_printf_i+0x23c>
 80053bc:	68e0      	ldr	r0, [r4, #12]
 80053be:	9b03      	ldr	r3, [sp, #12]
 80053c0:	4298      	cmp	r0, r3
 80053c2:	bfb8      	it	lt
 80053c4:	4618      	movlt	r0, r3
 80053c6:	e7a4      	b.n	8005312 <_printf_i+0x16a>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4632      	mov	r2, r6
 80053cc:	4649      	mov	r1, r9
 80053ce:	4640      	mov	r0, r8
 80053d0:	47d0      	blx	sl
 80053d2:	3001      	adds	r0, #1
 80053d4:	d09b      	beq.n	800530e <_printf_i+0x166>
 80053d6:	3501      	adds	r5, #1
 80053d8:	68e3      	ldr	r3, [r4, #12]
 80053da:	9903      	ldr	r1, [sp, #12]
 80053dc:	1a5b      	subs	r3, r3, r1
 80053de:	42ab      	cmp	r3, r5
 80053e0:	dcf2      	bgt.n	80053c8 <_printf_i+0x220>
 80053e2:	e7eb      	b.n	80053bc <_printf_i+0x214>
 80053e4:	2500      	movs	r5, #0
 80053e6:	f104 0619 	add.w	r6, r4, #25
 80053ea:	e7f5      	b.n	80053d8 <_printf_i+0x230>
 80053ec:	08005ac5 	.word	0x08005ac5
 80053f0:	08005ad6 	.word	0x08005ad6

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	2300      	movs	r3, #0
 80053f8:	4d05      	ldr	r5, [pc, #20]	; (8005410 <_sbrk_r+0x1c>)
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fb fc76 	bl	8000cf0 <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	2000030c 	.word	0x2000030c

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 fab8 	bl	8005990 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	; 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	4605      	mov	r5, r0
 8005440:	05db      	lsls	r3, r3, #23
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f9c4 	bl	80057dc <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	4632      	mov	r2, r6
 8005458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	4628      	mov	r0, r5
 8005460:	463b      	mov	r3, r7
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b869 	b.w	8005540 <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f9b1 	bl	80057dc <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	; 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b8d3 	b.w	8005640 <_close_r>
	...

0800549c <__swbuf_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	460e      	mov	r6, r1
 80054a0:	4614      	mov	r4, r2
 80054a2:	4605      	mov	r5, r0
 80054a4:	b118      	cbz	r0, 80054ae <__swbuf_r+0x12>
 80054a6:	6983      	ldr	r3, [r0, #24]
 80054a8:	b90b      	cbnz	r3, 80054ae <__swbuf_r+0x12>
 80054aa:	f7ff fb81 	bl	8004bb0 <__sinit>
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <__swbuf_r+0x98>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d12b      	bne.n	800550c <__swbuf_r+0x70>
 80054b4:	686c      	ldr	r4, [r5, #4]
 80054b6:	69a3      	ldr	r3, [r4, #24]
 80054b8:	60a3      	str	r3, [r4, #8]
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	071a      	lsls	r2, r3, #28
 80054be:	d52f      	bpl.n	8005520 <__swbuf_r+0x84>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	b36b      	cbz	r3, 8005520 <__swbuf_r+0x84>
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	b2f6      	uxtb	r6, r6
 80054ca:	1ac0      	subs	r0, r0, r3
 80054cc:	6963      	ldr	r3, [r4, #20]
 80054ce:	4637      	mov	r7, r6
 80054d0:	4283      	cmp	r3, r0
 80054d2:	dc04      	bgt.n	80054de <__swbuf_r+0x42>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f944 	bl	8005764 <_fflush_r>
 80054dc:	bb30      	cbnz	r0, 800552c <__swbuf_r+0x90>
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	3001      	adds	r0, #1
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60a3      	str	r3, [r4, #8]
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	6022      	str	r2, [r4, #0]
 80054ec:	701e      	strb	r6, [r3, #0]
 80054ee:	6963      	ldr	r3, [r4, #20]
 80054f0:	4283      	cmp	r3, r0
 80054f2:	d004      	beq.n	80054fe <__swbuf_r+0x62>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	07db      	lsls	r3, r3, #31
 80054f8:	d506      	bpl.n	8005508 <__swbuf_r+0x6c>
 80054fa:	2e0a      	cmp	r6, #10
 80054fc:	d104      	bne.n	8005508 <__swbuf_r+0x6c>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f92f 	bl	8005764 <_fflush_r>
 8005506:	b988      	cbnz	r0, 800552c <__swbuf_r+0x90>
 8005508:	4638      	mov	r0, r7
 800550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <__swbuf_r+0x9c>)
 800550e:	429c      	cmp	r4, r3
 8005510:	d101      	bne.n	8005516 <__swbuf_r+0x7a>
 8005512:	68ac      	ldr	r4, [r5, #8]
 8005514:	e7cf      	b.n	80054b6 <__swbuf_r+0x1a>
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <__swbuf_r+0xa0>)
 8005518:	429c      	cmp	r4, r3
 800551a:	bf08      	it	eq
 800551c:	68ec      	ldreq	r4, [r5, #12]
 800551e:	e7ca      	b.n	80054b6 <__swbuf_r+0x1a>
 8005520:	4621      	mov	r1, r4
 8005522:	4628      	mov	r0, r5
 8005524:	f000 f81e 	bl	8005564 <__swsetup_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	d0cb      	beq.n	80054c4 <__swbuf_r+0x28>
 800552c:	f04f 37ff 	mov.w	r7, #4294967295
 8005530:	e7ea      	b.n	8005508 <__swbuf_r+0x6c>
 8005532:	bf00      	nop
 8005534:	08005a74 	.word	0x08005a74
 8005538:	08005a94 	.word	0x08005a94
 800553c:	08005a54 	.word	0x08005a54

08005540 <_write_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	2200      	movs	r2, #0
 800554a:	4d05      	ldr	r5, [pc, #20]	; (8005560 <_write_r+0x20>)
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fb81 	bl	8000c56 <_write>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_write_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_write_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	2000030c 	.word	0x2000030c

08005564 <__swsetup_r>:
 8005564:	4b32      	ldr	r3, [pc, #200]	; (8005630 <__swsetup_r+0xcc>)
 8005566:	b570      	push	{r4, r5, r6, lr}
 8005568:	681d      	ldr	r5, [r3, #0]
 800556a:	4606      	mov	r6, r0
 800556c:	460c      	mov	r4, r1
 800556e:	b125      	cbz	r5, 800557a <__swsetup_r+0x16>
 8005570:	69ab      	ldr	r3, [r5, #24]
 8005572:	b913      	cbnz	r3, 800557a <__swsetup_r+0x16>
 8005574:	4628      	mov	r0, r5
 8005576:	f7ff fb1b 	bl	8004bb0 <__sinit>
 800557a:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <__swsetup_r+0xd0>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d10f      	bne.n	80055a0 <__swsetup_r+0x3c>
 8005580:	686c      	ldr	r4, [r5, #4]
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005588:	0719      	lsls	r1, r3, #28
 800558a:	d42c      	bmi.n	80055e6 <__swsetup_r+0x82>
 800558c:	06dd      	lsls	r5, r3, #27
 800558e:	d411      	bmi.n	80055b4 <__swsetup_r+0x50>
 8005590:	2309      	movs	r3, #9
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005598:	f04f 30ff 	mov.w	r0, #4294967295
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	e03e      	b.n	800561e <__swsetup_r+0xba>
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <__swsetup_r+0xd4>)
 80055a2:	429c      	cmp	r4, r3
 80055a4:	d101      	bne.n	80055aa <__swsetup_r+0x46>
 80055a6:	68ac      	ldr	r4, [r5, #8]
 80055a8:	e7eb      	b.n	8005582 <__swsetup_r+0x1e>
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <__swsetup_r+0xd8>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	bf08      	it	eq
 80055b0:	68ec      	ldreq	r4, [r5, #12]
 80055b2:	e7e6      	b.n	8005582 <__swsetup_r+0x1e>
 80055b4:	0758      	lsls	r0, r3, #29
 80055b6:	d512      	bpl.n	80055de <__swsetup_r+0x7a>
 80055b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ba:	b141      	cbz	r1, 80055ce <__swsetup_r+0x6a>
 80055bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c0:	4299      	cmp	r1, r3
 80055c2:	d002      	beq.n	80055ca <__swsetup_r+0x66>
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f99b 	bl	8005900 <_free_r>
 80055ca:	2300      	movs	r3, #0
 80055cc:	6363      	str	r3, [r4, #52]	; 0x34
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	2300      	movs	r3, #0
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f043 0308 	orr.w	r3, r3, #8
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	b94b      	cbnz	r3, 80055fe <__swsetup_r+0x9a>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d003      	beq.n	80055fe <__swsetup_r+0x9a>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f927 	bl	800584c <__smakebuf_r>
 80055fe:	89a0      	ldrh	r0, [r4, #12]
 8005600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005604:	f010 0301 	ands.w	r3, r0, #1
 8005608:	d00a      	beq.n	8005620 <__swsetup_r+0xbc>
 800560a:	2300      	movs	r3, #0
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	6963      	ldr	r3, [r4, #20]
 8005610:	425b      	negs	r3, r3
 8005612:	61a3      	str	r3, [r4, #24]
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	b943      	cbnz	r3, 800562a <__swsetup_r+0xc6>
 8005618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800561c:	d1ba      	bne.n	8005594 <__swsetup_r+0x30>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	0781      	lsls	r1, r0, #30
 8005622:	bf58      	it	pl
 8005624:	6963      	ldrpl	r3, [r4, #20]
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	e7f4      	b.n	8005614 <__swsetup_r+0xb0>
 800562a:	2000      	movs	r0, #0
 800562c:	e7f7      	b.n	800561e <__swsetup_r+0xba>
 800562e:	bf00      	nop
 8005630:	2000000c 	.word	0x2000000c
 8005634:	08005a74 	.word	0x08005a74
 8005638:	08005a94 	.word	0x08005a94
 800563c:	08005a54 	.word	0x08005a54

08005640 <_close_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	2300      	movs	r3, #0
 8005644:	4d05      	ldr	r5, [pc, #20]	; (800565c <_close_r+0x1c>)
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	f7fb fb1f 	bl	8000c8e <_close>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_close_r+0x1a>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_close_r+0x1a>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	2000030c 	.word	0x2000030c

08005660 <__sflush_r>:
 8005660:	898a      	ldrh	r2, [r1, #12]
 8005662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005664:	4605      	mov	r5, r0
 8005666:	0710      	lsls	r0, r2, #28
 8005668:	460c      	mov	r4, r1
 800566a:	d457      	bmi.n	800571c <__sflush_r+0xbc>
 800566c:	684b      	ldr	r3, [r1, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	dc04      	bgt.n	800567c <__sflush_r+0x1c>
 8005672:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	dc01      	bgt.n	800567c <__sflush_r+0x1c>
 8005678:	2000      	movs	r0, #0
 800567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800567c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800567e:	2e00      	cmp	r6, #0
 8005680:	d0fa      	beq.n	8005678 <__sflush_r+0x18>
 8005682:	2300      	movs	r3, #0
 8005684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005688:	682f      	ldr	r7, [r5, #0]
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	d032      	beq.n	80056f4 <__sflush_r+0x94>
 800568e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	075a      	lsls	r2, r3, #29
 8005694:	d505      	bpl.n	80056a2 <__sflush_r+0x42>
 8005696:	6863      	ldr	r3, [r4, #4]
 8005698:	1ac0      	subs	r0, r0, r3
 800569a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800569c:	b10b      	cbz	r3, 80056a2 <__sflush_r+0x42>
 800569e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056a0:	1ac0      	subs	r0, r0, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	4602      	mov	r2, r0
 80056a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056a8:	4628      	mov	r0, r5
 80056aa:	6a21      	ldr	r1, [r4, #32]
 80056ac:	47b0      	blx	r6
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	d106      	bne.n	80056c2 <__sflush_r+0x62>
 80056b4:	6829      	ldr	r1, [r5, #0]
 80056b6:	291d      	cmp	r1, #29
 80056b8:	d82c      	bhi.n	8005714 <__sflush_r+0xb4>
 80056ba:	4a29      	ldr	r2, [pc, #164]	; (8005760 <__sflush_r+0x100>)
 80056bc:	40ca      	lsrs	r2, r1
 80056be:	07d6      	lsls	r6, r2, #31
 80056c0:	d528      	bpl.n	8005714 <__sflush_r+0xb4>
 80056c2:	2200      	movs	r2, #0
 80056c4:	6062      	str	r2, [r4, #4]
 80056c6:	6922      	ldr	r2, [r4, #16]
 80056c8:	04d9      	lsls	r1, r3, #19
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	d504      	bpl.n	80056d8 <__sflush_r+0x78>
 80056ce:	1c42      	adds	r2, r0, #1
 80056d0:	d101      	bne.n	80056d6 <__sflush_r+0x76>
 80056d2:	682b      	ldr	r3, [r5, #0]
 80056d4:	b903      	cbnz	r3, 80056d8 <__sflush_r+0x78>
 80056d6:	6560      	str	r0, [r4, #84]	; 0x54
 80056d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056da:	602f      	str	r7, [r5, #0]
 80056dc:	2900      	cmp	r1, #0
 80056de:	d0cb      	beq.n	8005678 <__sflush_r+0x18>
 80056e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056e4:	4299      	cmp	r1, r3
 80056e6:	d002      	beq.n	80056ee <__sflush_r+0x8e>
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 f909 	bl	8005900 <_free_r>
 80056ee:	2000      	movs	r0, #0
 80056f0:	6360      	str	r0, [r4, #52]	; 0x34
 80056f2:	e7c2      	b.n	800567a <__sflush_r+0x1a>
 80056f4:	6a21      	ldr	r1, [r4, #32]
 80056f6:	2301      	movs	r3, #1
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b0      	blx	r6
 80056fc:	1c41      	adds	r1, r0, #1
 80056fe:	d1c7      	bne.n	8005690 <__sflush_r+0x30>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0c4      	beq.n	8005690 <__sflush_r+0x30>
 8005706:	2b1d      	cmp	r3, #29
 8005708:	d001      	beq.n	800570e <__sflush_r+0xae>
 800570a:	2b16      	cmp	r3, #22
 800570c:	d101      	bne.n	8005712 <__sflush_r+0xb2>
 800570e:	602f      	str	r7, [r5, #0]
 8005710:	e7b2      	b.n	8005678 <__sflush_r+0x18>
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	e7ae      	b.n	800567a <__sflush_r+0x1a>
 800571c:	690f      	ldr	r7, [r1, #16]
 800571e:	2f00      	cmp	r7, #0
 8005720:	d0aa      	beq.n	8005678 <__sflush_r+0x18>
 8005722:	0793      	lsls	r3, r2, #30
 8005724:	bf18      	it	ne
 8005726:	2300      	movne	r3, #0
 8005728:	680e      	ldr	r6, [r1, #0]
 800572a:	bf08      	it	eq
 800572c:	694b      	ldreq	r3, [r1, #20]
 800572e:	1bf6      	subs	r6, r6, r7
 8005730:	600f      	str	r7, [r1, #0]
 8005732:	608b      	str	r3, [r1, #8]
 8005734:	2e00      	cmp	r6, #0
 8005736:	dd9f      	ble.n	8005678 <__sflush_r+0x18>
 8005738:	4633      	mov	r3, r6
 800573a:	463a      	mov	r2, r7
 800573c:	4628      	mov	r0, r5
 800573e:	6a21      	ldr	r1, [r4, #32]
 8005740:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005744:	47e0      	blx	ip
 8005746:	2800      	cmp	r0, #0
 8005748:	dc06      	bgt.n	8005758 <__sflush_r+0xf8>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	e790      	b.n	800567a <__sflush_r+0x1a>
 8005758:	4407      	add	r7, r0
 800575a:	1a36      	subs	r6, r6, r0
 800575c:	e7ea      	b.n	8005734 <__sflush_r+0xd4>
 800575e:	bf00      	nop
 8005760:	20400001 	.word	0x20400001

08005764 <_fflush_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	4605      	mov	r5, r0
 800576a:	460c      	mov	r4, r1
 800576c:	b913      	cbnz	r3, 8005774 <_fflush_r+0x10>
 800576e:	2500      	movs	r5, #0
 8005770:	4628      	mov	r0, r5
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	b118      	cbz	r0, 800577e <_fflush_r+0x1a>
 8005776:	6983      	ldr	r3, [r0, #24]
 8005778:	b90b      	cbnz	r3, 800577e <_fflush_r+0x1a>
 800577a:	f7ff fa19 	bl	8004bb0 <__sinit>
 800577e:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <_fflush_r+0x6c>)
 8005780:	429c      	cmp	r4, r3
 8005782:	d11b      	bne.n	80057bc <_fflush_r+0x58>
 8005784:	686c      	ldr	r4, [r5, #4]
 8005786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ef      	beq.n	800576e <_fflush_r+0xa>
 800578e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005790:	07d0      	lsls	r0, r2, #31
 8005792:	d404      	bmi.n	800579e <_fflush_r+0x3a>
 8005794:	0599      	lsls	r1, r3, #22
 8005796:	d402      	bmi.n	800579e <_fflush_r+0x3a>
 8005798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579a:	f7ff faa7 	bl	8004cec <__retarget_lock_acquire_recursive>
 800579e:	4628      	mov	r0, r5
 80057a0:	4621      	mov	r1, r4
 80057a2:	f7ff ff5d 	bl	8005660 <__sflush_r>
 80057a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a8:	4605      	mov	r5, r0
 80057aa:	07da      	lsls	r2, r3, #31
 80057ac:	d4e0      	bmi.n	8005770 <_fflush_r+0xc>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	059b      	lsls	r3, r3, #22
 80057b2:	d4dd      	bmi.n	8005770 <_fflush_r+0xc>
 80057b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057b6:	f7ff fa9a 	bl	8004cee <__retarget_lock_release_recursive>
 80057ba:	e7d9      	b.n	8005770 <_fflush_r+0xc>
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <_fflush_r+0x70>)
 80057be:	429c      	cmp	r4, r3
 80057c0:	d101      	bne.n	80057c6 <_fflush_r+0x62>
 80057c2:	68ac      	ldr	r4, [r5, #8]
 80057c4:	e7df      	b.n	8005786 <_fflush_r+0x22>
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <_fflush_r+0x74>)
 80057c8:	429c      	cmp	r4, r3
 80057ca:	bf08      	it	eq
 80057cc:	68ec      	ldreq	r4, [r5, #12]
 80057ce:	e7da      	b.n	8005786 <_fflush_r+0x22>
 80057d0:	08005a74 	.word	0x08005a74
 80057d4:	08005a94 	.word	0x08005a94
 80057d8:	08005a54 	.word	0x08005a54

080057dc <_lseek_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4604      	mov	r4, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	2200      	movs	r2, #0
 80057e6:	4d05      	ldr	r5, [pc, #20]	; (80057fc <_lseek_r+0x20>)
 80057e8:	602a      	str	r2, [r5, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f7fb fa73 	bl	8000cd6 <_lseek>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_lseek_r+0x1e>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_lseek_r+0x1e>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	2000030c 	.word	0x2000030c

08005800 <__swhatbuf_r>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	460e      	mov	r6, r1
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	4614      	mov	r4, r2
 800580a:	2900      	cmp	r1, #0
 800580c:	461d      	mov	r5, r3
 800580e:	b096      	sub	sp, #88	; 0x58
 8005810:	da08      	bge.n	8005824 <__swhatbuf_r+0x24>
 8005812:	2200      	movs	r2, #0
 8005814:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005818:	602a      	str	r2, [r5, #0]
 800581a:	061a      	lsls	r2, r3, #24
 800581c:	d410      	bmi.n	8005840 <__swhatbuf_r+0x40>
 800581e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005822:	e00e      	b.n	8005842 <__swhatbuf_r+0x42>
 8005824:	466a      	mov	r2, sp
 8005826:	f000 f8c5 	bl	80059b4 <_fstat_r>
 800582a:	2800      	cmp	r0, #0
 800582c:	dbf1      	blt.n	8005812 <__swhatbuf_r+0x12>
 800582e:	9a01      	ldr	r2, [sp, #4]
 8005830:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005834:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005838:	425a      	negs	r2, r3
 800583a:	415a      	adcs	r2, r3
 800583c:	602a      	str	r2, [r5, #0]
 800583e:	e7ee      	b.n	800581e <__swhatbuf_r+0x1e>
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	2000      	movs	r0, #0
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	b016      	add	sp, #88	; 0x58
 8005848:	bd70      	pop	{r4, r5, r6, pc}
	...

0800584c <__smakebuf_r>:
 800584c:	898b      	ldrh	r3, [r1, #12]
 800584e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005850:	079d      	lsls	r5, r3, #30
 8005852:	4606      	mov	r6, r0
 8005854:	460c      	mov	r4, r1
 8005856:	d507      	bpl.n	8005868 <__smakebuf_r+0x1c>
 8005858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	2301      	movs	r3, #1
 8005862:	6163      	str	r3, [r4, #20]
 8005864:	b002      	add	sp, #8
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	466a      	mov	r2, sp
 800586a:	ab01      	add	r3, sp, #4
 800586c:	f7ff ffc8 	bl	8005800 <__swhatbuf_r>
 8005870:	9900      	ldr	r1, [sp, #0]
 8005872:	4605      	mov	r5, r0
 8005874:	4630      	mov	r0, r6
 8005876:	f7ff fa5b 	bl	8004d30 <_malloc_r>
 800587a:	b948      	cbnz	r0, 8005890 <__smakebuf_r+0x44>
 800587c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005880:	059a      	lsls	r2, r3, #22
 8005882:	d4ef      	bmi.n	8005864 <__smakebuf_r+0x18>
 8005884:	f023 0303 	bic.w	r3, r3, #3
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7e3      	b.n	8005858 <__smakebuf_r+0xc>
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <__smakebuf_r+0x7c>)
 8005892:	62b3      	str	r3, [r6, #40]	; 0x28
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	6020      	str	r0, [r4, #0]
 8005898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	9b00      	ldr	r3, [sp, #0]
 80058a0:	6120      	str	r0, [r4, #16]
 80058a2:	6163      	str	r3, [r4, #20]
 80058a4:	9b01      	ldr	r3, [sp, #4]
 80058a6:	b15b      	cbz	r3, 80058c0 <__smakebuf_r+0x74>
 80058a8:	4630      	mov	r0, r6
 80058aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ae:	f000 f893 	bl	80059d8 <_isatty_r>
 80058b2:	b128      	cbz	r0, 80058c0 <__smakebuf_r+0x74>
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	89a0      	ldrh	r0, [r4, #12]
 80058c2:	4305      	orrs	r5, r0
 80058c4:	81a5      	strh	r5, [r4, #12]
 80058c6:	e7cd      	b.n	8005864 <__smakebuf_r+0x18>
 80058c8:	08004b49 	.word	0x08004b49

080058cc <memchr>:
 80058cc:	4603      	mov	r3, r0
 80058ce:	b510      	push	{r4, lr}
 80058d0:	b2c9      	uxtb	r1, r1
 80058d2:	4402      	add	r2, r0
 80058d4:	4293      	cmp	r3, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	d101      	bne.n	80058de <memchr+0x12>
 80058da:	2000      	movs	r0, #0
 80058dc:	e003      	b.n	80058e6 <memchr+0x1a>
 80058de:	7804      	ldrb	r4, [r0, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	428c      	cmp	r4, r1
 80058e4:	d1f6      	bne.n	80058d4 <memchr+0x8>
 80058e6:	bd10      	pop	{r4, pc}

080058e8 <__malloc_lock>:
 80058e8:	4801      	ldr	r0, [pc, #4]	; (80058f0 <__malloc_lock+0x8>)
 80058ea:	f7ff b9ff 	b.w	8004cec <__retarget_lock_acquire_recursive>
 80058ee:	bf00      	nop
 80058f0:	20000300 	.word	0x20000300

080058f4 <__malloc_unlock>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__malloc_unlock+0x8>)
 80058f6:	f7ff b9fa 	b.w	8004cee <__retarget_lock_release_recursive>
 80058fa:	bf00      	nop
 80058fc:	20000300 	.word	0x20000300

08005900 <_free_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4605      	mov	r5, r0
 8005904:	2900      	cmp	r1, #0
 8005906:	d040      	beq.n	800598a <_free_r+0x8a>
 8005908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800590c:	1f0c      	subs	r4, r1, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	bfb8      	it	lt
 8005912:	18e4      	addlt	r4, r4, r3
 8005914:	f7ff ffe8 	bl	80058e8 <__malloc_lock>
 8005918:	4a1c      	ldr	r2, [pc, #112]	; (800598c <_free_r+0x8c>)
 800591a:	6813      	ldr	r3, [r2, #0]
 800591c:	b933      	cbnz	r3, 800592c <_free_r+0x2c>
 800591e:	6063      	str	r3, [r4, #4]
 8005920:	6014      	str	r4, [r2, #0]
 8005922:	4628      	mov	r0, r5
 8005924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005928:	f7ff bfe4 	b.w	80058f4 <__malloc_unlock>
 800592c:	42a3      	cmp	r3, r4
 800592e:	d908      	bls.n	8005942 <_free_r+0x42>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	1821      	adds	r1, r4, r0
 8005934:	428b      	cmp	r3, r1
 8005936:	bf01      	itttt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	1809      	addeq	r1, r1, r0
 800593e:	6021      	streq	r1, [r4, #0]
 8005940:	e7ed      	b.n	800591e <_free_r+0x1e>
 8005942:	461a      	mov	r2, r3
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	b10b      	cbz	r3, 800594c <_free_r+0x4c>
 8005948:	42a3      	cmp	r3, r4
 800594a:	d9fa      	bls.n	8005942 <_free_r+0x42>
 800594c:	6811      	ldr	r1, [r2, #0]
 800594e:	1850      	adds	r0, r2, r1
 8005950:	42a0      	cmp	r0, r4
 8005952:	d10b      	bne.n	800596c <_free_r+0x6c>
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	4401      	add	r1, r0
 8005958:	1850      	adds	r0, r2, r1
 800595a:	4283      	cmp	r3, r0
 800595c:	6011      	str	r1, [r2, #0]
 800595e:	d1e0      	bne.n	8005922 <_free_r+0x22>
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4401      	add	r1, r0
 8005966:	6011      	str	r1, [r2, #0]
 8005968:	6053      	str	r3, [r2, #4]
 800596a:	e7da      	b.n	8005922 <_free_r+0x22>
 800596c:	d902      	bls.n	8005974 <_free_r+0x74>
 800596e:	230c      	movs	r3, #12
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	e7d6      	b.n	8005922 <_free_r+0x22>
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	1821      	adds	r1, r4, r0
 8005978:	428b      	cmp	r3, r1
 800597a:	bf01      	itttt	eq
 800597c:	6819      	ldreq	r1, [r3, #0]
 800597e:	685b      	ldreq	r3, [r3, #4]
 8005980:	1809      	addeq	r1, r1, r0
 8005982:	6021      	streq	r1, [r4, #0]
 8005984:	6063      	str	r3, [r4, #4]
 8005986:	6054      	str	r4, [r2, #4]
 8005988:	e7cb      	b.n	8005922 <_free_r+0x22>
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000304 	.word	0x20000304

08005990 <_read_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	2200      	movs	r2, #0
 800599a:	4d05      	ldr	r5, [pc, #20]	; (80059b0 <_read_r+0x20>)
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fb f93c 	bl	8000c1c <_read>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_read_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_read_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	2000030c 	.word	0x2000030c

080059b4 <_fstat_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	2300      	movs	r3, #0
 80059b8:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_fstat_r+0x20>)
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f7fb f96f 	bl	8000ca4 <_fstat>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d102      	bne.n	80059d0 <_fstat_r+0x1c>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	b103      	cbz	r3, 80059d0 <_fstat_r+0x1c>
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	bd38      	pop	{r3, r4, r5, pc}
 80059d2:	bf00      	nop
 80059d4:	2000030c 	.word	0x2000030c

080059d8 <_isatty_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	2300      	movs	r3, #0
 80059dc:	4d05      	ldr	r5, [pc, #20]	; (80059f4 <_isatty_r+0x1c>)
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb f96d 	bl	8000cc2 <_isatty>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_isatty_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_isatty_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	2000030c 	.word	0x2000030c

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
