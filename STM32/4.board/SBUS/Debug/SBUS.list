
SBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f7c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004284  08004284  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004284  08004284  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800428c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000074  08004300  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004300  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074ac  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fff  00000000  00000000  00027549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00029548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  00029df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af62  00000000  00000000  0002a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7f5  00000000  00000000  000454f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f47  00000000  00000000  00051ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3c2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000276c  00000000  00000000  000e3c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08004148 	.word	0x08004148

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08004148 	.word	0x08004148

08000224 <Bsp_Led_Show_State_Handle>:
#include "bsp.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f001 fdd7 	bl	8001dfa <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000090 	.word	0x20000090
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 f85f 	bl	8000320 <Beep_On_Time>
	USART1_Init();
 8000262:	f000 fae3 	bl	800082c <USART1_Init>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 8000270:	2001      	movs	r0, #1
 8000272:	f000 f8c7 	bl	8000404 <Key1_State>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d00d      	beq.n	8000298 <Bsp_Loop+0x2c>
	{
		Beep_On_Time(50);
 800027c:	2032      	movs	r0, #50	; 0x32
 800027e:	f000 f84f 	bl	8000320 <Beep_On_Time>
		static int press = 0;
		press++;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <Bsp_Loop+0x44>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <Bsp_Loop+0x44>)
 800028a:	6013      	str	r3, [r2, #0]
		printf("press:%d\n", press);
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <Bsp_Loop+0x44>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4619      	mov	r1, r3
 8000292:	4808      	ldr	r0, [pc, #32]	; (80002b4 <Bsp_Loop+0x48>)
 8000294:	f002 ff4e 	bl	8003134 <iprintf>
	}
	SBUS_Handle();
 8000298:	f000 fa82 	bl	80007a0 <SBUS_Handle>

	Bsp_Led_Show_State_Handle();
 800029c:	f7ff ffc2 	bl	8000224 <Bsp_Led_Show_State_Handle>
	// The buzzer automatically shuts down when times out   蜂鸣器超时自动关闭
	Beep_Timeout_Close_Handle();
 80002a0:	f000 f87e 	bl	80003a0 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 80002a4:	200a      	movs	r0, #10
 80002a6:	f000 febf 	bl	8001028 <HAL_Delay>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000094 	.word	0x20000094
 80002b4:	08004160 	.word	0x08004160

080002b8 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 80002c2:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <Beep_Set_Time+0x1c>)
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	8013      	strh	r3, [r2, #0]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000098 	.word	0x20000098

080002d8 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	return beep_on_time;
 80002dc:	4b02      	ldr	r3, [pc, #8]	; (80002e8 <Beep_Get_Time+0x10>)
 80002de:	881b      	ldrh	r3, [r3, #0]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	20000098 	.word	0x20000098

080002ec <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 80002f6:	4a04      	ldr	r2, [pc, #16]	; (8000308 <Beep_Set_State+0x1c>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	7013      	strb	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	2000009a 	.word	0x2000009a

0800030c <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	return beep_state;
 8000310:	4b02      	ldr	r3, [pc, #8]	; (800031c <Beep_Get_State+0x10>)
 8000312:	781b      	ldrb	r3, [r3, #0]
}
 8000314:	4618      	mov	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	2000009a 	.word	0x2000009a

08000320 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d10b      	bne.n	8000348 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000330:	2001      	movs	r0, #1
 8000332:	f7ff ffdb 	bl	80002ec <Beep_Set_State>
		Beep_Set_Time(0);
 8000336:	2000      	movs	r0, #0
 8000338:	f7ff ffbe 	bl	80002b8 <Beep_Set_Time>
		BEEP_ON();
 800033c:	2201      	movs	r2, #1
 800033e:	2120      	movs	r1, #32
 8000340:	4815      	ldr	r0, [pc, #84]	; (8000398 <Beep_On_Time+0x78>)
 8000342:	f001 fd42 	bl	8001dca <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8000346:	e022      	b.n	800038e <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d10b      	bne.n	8000366 <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ffcc 	bl	80002ec <Beep_Set_State>
		Beep_Set_Time(0);
 8000354:	2000      	movs	r0, #0
 8000356:	f7ff ffaf 	bl	80002b8 <Beep_Set_Time>
		BEEP_OFF();
 800035a:	2200      	movs	r2, #0
 800035c:	2120      	movs	r1, #32
 800035e:	480e      	ldr	r0, [pc, #56]	; (8000398 <Beep_On_Time+0x78>)
 8000360:	f001 fd33 	bl	8001dca <HAL_GPIO_WritePin>
}
 8000364:	e013      	b.n	800038e <Beep_On_Time+0x6e>
		if (time >= 10)
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	2b09      	cmp	r3, #9
 800036a:	d910      	bls.n	800038e <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 800036c:	2002      	movs	r0, #2
 800036e:	f7ff ffbd 	bl	80002ec <Beep_Set_State>
			Beep_Set_Time(time / 10);
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	4a09      	ldr	r2, [pc, #36]	; (800039c <Beep_On_Time+0x7c>)
 8000376:	fba2 2303 	umull	r2, r3, r2, r3
 800037a:	08db      	lsrs	r3, r3, #3
 800037c:	b29b      	uxth	r3, r3
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff9a 	bl	80002b8 <Beep_Set_Time>
			BEEP_ON();
 8000384:	2201      	movs	r2, #1
 8000386:	2120      	movs	r1, #32
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <Beep_On_Time+0x78>)
 800038a:	f001 fd1e 	bl	8001dca <HAL_GPIO_WritePin>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40011000 	.word	0x40011000
 800039c:	cccccccd 	.word	0xcccccccd

080003a0 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80003a4:	f7ff ffb2 	bl	800030c <Beep_Get_State>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d113      	bne.n	80003d6 <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 80003ae:	f7ff ff93 	bl	80002d8 <Beep_Get_Time>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d006      	beq.n	80003c6 <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <Beep_Timeout_Close_Handle+0x3c>)
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	3b01      	subs	r3, #1
 80003be:	b29a      	uxth	r2, r3
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <Beep_Timeout_Close_Handle+0x3c>)
 80003c2:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 80003c4:	e007      	b.n	80003d6 <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 80003c6:	2200      	movs	r2, #0
 80003c8:	2120      	movs	r1, #32
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <Beep_Timeout_Close_Handle+0x40>)
 80003cc:	f001 fcfd 	bl	8001dca <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff ff8b 	bl	80002ec <Beep_Set_State>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000098 	.word	0x20000098
 80003e0:	40011000 	.word	0x40011000

080003e4 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 80003e8:	2104      	movs	r1, #4
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <Key1_is_Press+0x1c>)
 80003ec:	f001 fcd6 	bl	8001d9c <HAL_GPIO_ReadPin>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d101      	bne.n	80003fa <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 80003f6:	2301      	movs	r3, #1
 80003f8:	e000      	b.n	80003fc <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40011400 	.word	0x40011400

08000404 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800040e:	f7ff ffe9 	bl	80003e4 <Key1_is_Press>
 8000412:	4603      	mov	r3, r0
 8000414:	2b01      	cmp	r3, #1
 8000416:	d10e      	bne.n	8000436 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <Key1_State+0x50>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	3301      	adds	r3, #1
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	429a      	cmp	r2, r3
 8000426:	da09      	bge.n	800043c <Key1_State+0x38>
		{
			key1_state++;
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <Key1_State+0x50>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b29a      	uxth	r2, r3
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <Key1_State+0x50>)
 8000432:	801a      	strh	r2, [r3, #0]
 8000434:	e002      	b.n	800043c <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <Key1_State+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <Key1_State+0x50>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	2b02      	cmp	r3, #2
 8000442:	d101      	bne.n	8000448 <Key1_State+0x44>
	{
		return KEY_PRESS;
 8000444:	2301      	movs	r3, #1
 8000446:	e000      	b.n	800044a <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000009c 	.word	0x2000009c

08000458 <SBUS_Parse_Data>:
int16_t g_sbus_channels[18] = {0};


// Parses SBUS data into channel values  解析SBUS的数据，转化成通道数值。
static int SBUS_Parse_Data(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    g_sbus_channels[0]  = ((sbus_data[1] | sbus_data[2] << 8) & 0x07FF);
 800045c:	4b91      	ldr	r3, [pc, #580]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800045e:	785b      	ldrb	r3, [r3, #1]
 8000460:	b21a      	sxth	r2, r3
 8000462:	4b90      	ldr	r3, [pc, #576]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000464:	789b      	ldrb	r3, [r3, #2]
 8000466:	021b      	lsls	r3, r3, #8
 8000468:	b21b      	sxth	r3, r3
 800046a:	4313      	orrs	r3, r2
 800046c:	b21b      	sxth	r3, r3
 800046e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000472:	b21a      	sxth	r2, r3
 8000474:	4b8c      	ldr	r3, [pc, #560]	; (80006a8 <SBUS_Parse_Data+0x250>)
 8000476:	801a      	strh	r2, [r3, #0]
    g_sbus_channels[1]  = ((sbus_data[2] >> 3 | sbus_data[3] << 5) & 0x07FF);
 8000478:	4b8a      	ldr	r3, [pc, #552]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800047a:	789b      	ldrb	r3, [r3, #2]
 800047c:	08db      	lsrs	r3, r3, #3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	b21a      	sxth	r2, r3
 8000482:	4b88      	ldr	r3, [pc, #544]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000484:	78db      	ldrb	r3, [r3, #3]
 8000486:	015b      	lsls	r3, r3, #5
 8000488:	b21b      	sxth	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b21b      	sxth	r3, r3
 800048e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000492:	b21a      	sxth	r2, r3
 8000494:	4b84      	ldr	r3, [pc, #528]	; (80006a8 <SBUS_Parse_Data+0x250>)
 8000496:	805a      	strh	r2, [r3, #2]
    g_sbus_channels[2]  = ((sbus_data[3] >> 6 | sbus_data[4] << 2 | sbus_data[5] << 10) & 0x07FF);
 8000498:	4b82      	ldr	r3, [pc, #520]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800049a:	78db      	ldrb	r3, [r3, #3]
 800049c:	099b      	lsrs	r3, r3, #6
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	4b80      	ldr	r3, [pc, #512]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	b21b      	sxth	r3, r3
 80004aa:	4313      	orrs	r3, r2
 80004ac:	b21a      	sxth	r2, r3
 80004ae:	4b7d      	ldr	r3, [pc, #500]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	029b      	lsls	r3, r3, #10
 80004b4:	b21b      	sxth	r3, r3
 80004b6:	4313      	orrs	r3, r2
 80004b8:	b21b      	sxth	r3, r3
 80004ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004be:	b21a      	sxth	r2, r3
 80004c0:	4b79      	ldr	r3, [pc, #484]	; (80006a8 <SBUS_Parse_Data+0x250>)
 80004c2:	809a      	strh	r2, [r3, #4]
    g_sbus_channels[3]  = ((sbus_data[5] >> 1 | sbus_data[6] << 7) & 0x07FF);
 80004c4:	4b77      	ldr	r3, [pc, #476]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	b21a      	sxth	r2, r3
 80004ce:	4b75      	ldr	r3, [pc, #468]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80004d0:	799b      	ldrb	r3, [r3, #6]
 80004d2:	01db      	lsls	r3, r3, #7
 80004d4:	b21b      	sxth	r3, r3
 80004d6:	4313      	orrs	r3, r2
 80004d8:	b21b      	sxth	r3, r3
 80004da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004de:	b21a      	sxth	r2, r3
 80004e0:	4b71      	ldr	r3, [pc, #452]	; (80006a8 <SBUS_Parse_Data+0x250>)
 80004e2:	80da      	strh	r2, [r3, #6]
    g_sbus_channels[4]  = ((sbus_data[6] >> 4 | sbus_data[7] << 4) & 0x07FF);
 80004e4:	4b6f      	ldr	r3, [pc, #444]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80004e6:	799b      	ldrb	r3, [r3, #6]
 80004e8:	091b      	lsrs	r3, r3, #4
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	b21a      	sxth	r2, r3
 80004ee:	4b6d      	ldr	r3, [pc, #436]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80004f0:	79db      	ldrb	r3, [r3, #7]
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b21b      	sxth	r3, r3
 80004fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80004fe:	b21a      	sxth	r2, r3
 8000500:	4b69      	ldr	r3, [pc, #420]	; (80006a8 <SBUS_Parse_Data+0x250>)
 8000502:	811a      	strh	r2, [r3, #8]
    g_sbus_channels[5]  = ((sbus_data[7] >> 7 | sbus_data[8] << 1 | sbus_data[9] << 9) & 0x07FF);
 8000504:	4b67      	ldr	r3, [pc, #412]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000506:	79db      	ldrb	r3, [r3, #7]
 8000508:	09db      	lsrs	r3, r3, #7
 800050a:	b2db      	uxtb	r3, r3
 800050c:	b21a      	sxth	r2, r3
 800050e:	4b65      	ldr	r3, [pc, #404]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000510:	7a1b      	ldrb	r3, [r3, #8]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	b21b      	sxth	r3, r3
 8000516:	4313      	orrs	r3, r2
 8000518:	b21a      	sxth	r2, r3
 800051a:	4b62      	ldr	r3, [pc, #392]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800051c:	7a5b      	ldrb	r3, [r3, #9]
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	b21b      	sxth	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b21b      	sxth	r3, r3
 8000526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800052a:	b21a      	sxth	r2, r3
 800052c:	4b5e      	ldr	r3, [pc, #376]	; (80006a8 <SBUS_Parse_Data+0x250>)
 800052e:	815a      	strh	r2, [r3, #10]
    g_sbus_channels[6]  = ((sbus_data[9] >> 2 | sbus_data[10] << 6) & 0x07FF);
 8000530:	4b5c      	ldr	r3, [pc, #368]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000532:	7a5b      	ldrb	r3, [r3, #9]
 8000534:	089b      	lsrs	r3, r3, #2
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b21a      	sxth	r2, r3
 800053a:	4b5a      	ldr	r3, [pc, #360]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800053c:	7a9b      	ldrb	r3, [r3, #10]
 800053e:	019b      	lsls	r3, r3, #6
 8000540:	b21b      	sxth	r3, r3
 8000542:	4313      	orrs	r3, r2
 8000544:	b21b      	sxth	r3, r3
 8000546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800054a:	b21a      	sxth	r2, r3
 800054c:	4b56      	ldr	r3, [pc, #344]	; (80006a8 <SBUS_Parse_Data+0x250>)
 800054e:	819a      	strh	r2, [r3, #12]
    g_sbus_channels[7]  = ((sbus_data[10] >> 5 | sbus_data[11] << 3) & 0x07FF);
 8000550:	4b54      	ldr	r3, [pc, #336]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000552:	7a9b      	ldrb	r3, [r3, #10]
 8000554:	095b      	lsrs	r3, r3, #5
 8000556:	b2db      	uxtb	r3, r3
 8000558:	b21a      	sxth	r2, r3
 800055a:	4b52      	ldr	r3, [pc, #328]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800055c:	7adb      	ldrb	r3, [r3, #11]
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	b21b      	sxth	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b21b      	sxth	r3, r3
 8000566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800056a:	b21a      	sxth	r2, r3
 800056c:	4b4e      	ldr	r3, [pc, #312]	; (80006a8 <SBUS_Parse_Data+0x250>)
 800056e:	81da      	strh	r2, [r3, #14]
    #ifdef ALL_CHANNELS
    g_sbus_channels[8]  = ((sbus_data[12] | sbus_data[13] << 8) & 0x07FF);
 8000570:	4b4c      	ldr	r3, [pc, #304]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000572:	7b1b      	ldrb	r3, [r3, #12]
 8000574:	b21a      	sxth	r2, r3
 8000576:	4b4b      	ldr	r3, [pc, #300]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000578:	7b5b      	ldrb	r3, [r3, #13]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	b21b      	sxth	r3, r3
 800057e:	4313      	orrs	r3, r2
 8000580:	b21b      	sxth	r3, r3
 8000582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000586:	b21a      	sxth	r2, r3
 8000588:	4b47      	ldr	r3, [pc, #284]	; (80006a8 <SBUS_Parse_Data+0x250>)
 800058a:	821a      	strh	r2, [r3, #16]
    g_sbus_channels[9]  = ((sbus_data[13] >> 3 | sbus_data[14] << 5) & 0x07FF);
 800058c:	4b45      	ldr	r3, [pc, #276]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800058e:	7b5b      	ldrb	r3, [r3, #13]
 8000590:	08db      	lsrs	r3, r3, #3
 8000592:	b2db      	uxtb	r3, r3
 8000594:	b21a      	sxth	r2, r3
 8000596:	4b43      	ldr	r3, [pc, #268]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000598:	7b9b      	ldrb	r3, [r3, #14]
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	b21b      	sxth	r3, r3
 800059e:	4313      	orrs	r3, r2
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <SBUS_Parse_Data+0x250>)
 80005aa:	825a      	strh	r2, [r3, #18]
    g_sbus_channels[10] = ((sbus_data[14] >> 6 | sbus_data[15] << 2 | sbus_data[16] << 10) & 0x07FF);
 80005ac:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80005ae:	7b9b      	ldrb	r3, [r3, #14]
 80005b0:	099b      	lsrs	r3, r3, #6
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80005b8:	7bdb      	ldrb	r3, [r3, #15]
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	b21b      	sxth	r3, r3
 80005be:	4313      	orrs	r3, r2
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	4b38      	ldr	r3, [pc, #224]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80005c4:	7c1b      	ldrb	r3, [r3, #16]
 80005c6:	029b      	lsls	r3, r3, #10
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <SBUS_Parse_Data+0x250>)
 80005d6:	829a      	strh	r2, [r3, #20]
    g_sbus_channels[11] = ((sbus_data[16] >> 1 | sbus_data[17] << 7) & 0x07FF);
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80005da:	7c1b      	ldrb	r3, [r3, #16]
 80005dc:	085b      	lsrs	r3, r3, #1
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80005e4:	7c5b      	ldrb	r3, [r3, #17]
 80005e6:	01db      	lsls	r3, r3, #7
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005f2:	b21a      	sxth	r2, r3
 80005f4:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <SBUS_Parse_Data+0x250>)
 80005f6:	82da      	strh	r2, [r3, #22]
    g_sbus_channels[12] = ((sbus_data[17] >> 4 | sbus_data[18] << 4) & 0x07FF);
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 80005fa:	7c5b      	ldrb	r3, [r3, #17]
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	b21a      	sxth	r2, r3
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000604:	7c9b      	ldrb	r3, [r3, #18]
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SBUS_Parse_Data+0x250>)
 8000616:	831a      	strh	r2, [r3, #24]
    g_sbus_channels[13] = ((sbus_data[18] >> 7 | sbus_data[19] << 1 | sbus_data[20] << 9) & 0x07FF);
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800061a:	7c9b      	ldrb	r3, [r3, #18]
 800061c:	09db      	lsrs	r3, r3, #7
 800061e:	b2db      	uxtb	r3, r3
 8000620:	b21a      	sxth	r2, r3
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000624:	7cdb      	ldrb	r3, [r3, #19]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21a      	sxth	r2, r3
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000630:	7d1b      	ldrb	r3, [r3, #20]
 8000632:	025b      	lsls	r3, r3, #9
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21b      	sxth	r3, r3
 800063a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800063e:	b21a      	sxth	r2, r3
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <SBUS_Parse_Data+0x250>)
 8000642:	835a      	strh	r2, [r3, #26]
    g_sbus_channels[14] = ((sbus_data[20] >> 2 | sbus_data[21] << 6) & 0x07FF);
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000646:	7d1b      	ldrb	r3, [r3, #20]
 8000648:	089b      	lsrs	r3, r3, #2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	b21a      	sxth	r2, r3
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000650:	7d5b      	ldrb	r3, [r3, #21]
 8000652:	019b      	lsls	r3, r3, #6
 8000654:	b21b      	sxth	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b21b      	sxth	r3, r3
 800065a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800065e:	b21a      	sxth	r2, r3
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <SBUS_Parse_Data+0x250>)
 8000662:	839a      	strh	r2, [r3, #28]
    g_sbus_channels[15] = ((sbus_data[21] >> 5 | sbus_data[22] << 3) & 0x07FF);
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000666:	7d5b      	ldrb	r3, [r3, #21]
 8000668:	095b      	lsrs	r3, r3, #5
 800066a:	b2db      	uxtb	r3, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 8000670:	7d9b      	ldrb	r3, [r3, #22]
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800067e:	b21a      	sxth	r2, r3
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <SBUS_Parse_Data+0x250>)
 8000682:	83da      	strh	r2, [r3, #30]
    #endif

    // 安全检测，检测是否失联或者数据错误
    // Security detection to check for lost connections or data errors
    failsafe_status = SBUS_SIGNAL_OK;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <SBUS_Parse_Data+0x254>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
    if (sbus_data[23] & (1 << 2))
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <SBUS_Parse_Data+0x24c>)
 800068c:	7ddb      	ldrb	r3, [r3, #23]
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00e      	beq.n	80006b4 <SBUS_Parse_Data+0x25c>
    {
        failsafe_status = SBUS_SIGNAL_LOST;
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <SBUS_Parse_Data+0x254>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
        printf("SBUS_SIGNAL_LOST\n");
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <SBUS_Parse_Data+0x258>)
 800069e:	f002 fdcf 	bl	8003240 <puts>
 80006a2:	e013      	b.n	80006cc <SBUS_Parse_Data+0x274>
 80006a4:	200000c0 	.word	0x200000c0
 80006a8:	200000dc 	.word	0x200000dc
 80006ac:	20000000 	.word	0x20000000
 80006b0:	0800416c 	.word	0x0800416c
        // lost contact errors  遥控器失联错误
    }
    else if (sbus_data[23] & (1 << 3))
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <SBUS_Parse_Data+0x27c>)
 80006b6:	7ddb      	ldrb	r3, [r3, #23]
 80006b8:	f003 0308 	and.w	r3, r3, #8
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <SBUS_Parse_Data+0x274>
    {
        failsafe_status = SBUS_SIGNAL_FAILSAFE;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <SBUS_Parse_Data+0x280>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	701a      	strb	r2, [r3, #0]
        printf("SBUS_SIGNAL_FAILSAFE\n");
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <SBUS_Parse_Data+0x284>)
 80006c8:	f002 fdba 	bl	8003240 <puts>
        // data loss error  数据丢失错误
    }
    return failsafe_status;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <SBUS_Parse_Data+0x280>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000c0 	.word	0x200000c0
 80006d8:	20000000 	.word	0x20000000
 80006dc:	08004180 	.word	0x08004180

080006e0 <SBUS_Reveive>:

// Receives SBUS cache data  接收SBUS的缓存数据
void SBUS_Reveive(uint8_t data)
{
 80006e0:	b4b0      	push	{r4, r5, r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
    // If the protocol start flag is met, data is received  如果符合协议开始标志，则开始接收数据
    if (sbus_start == 0 && data == SBUS_START)
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <SBUS_Reveive+0xac>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d115      	bne.n	800071e <SBUS_Reveive+0x3e>
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d112      	bne.n	800071e <SBUS_Reveive+0x3e>
    {
        sbus_start = 1;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <SBUS_Reveive+0xac>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
        sbus_new_cmd = 0;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <SBUS_Reveive+0xb0>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
        sbus_buf_index = 0;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SBUS_Reveive+0xb4>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
        inBuffer[sbus_buf_index] = data;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SBUS_Reveive+0xb4>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SBUS_Reveive+0xb8>)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	5453      	strb	r3, [r2, r1]
        inBuffer[SBUS_RECV_MAX - 1] = 0xff;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SBUS_Reveive+0xb8>)
 8000718:	22ff      	movs	r2, #255	; 0xff
 800071a:	761a      	strb	r2, [r3, #24]
 800071c:	e00f      	b.n	800073e <SBUS_Reveive+0x5e>
    }
    else if (sbus_start)
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <SBUS_Reveive+0xac>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00b      	beq.n	800073e <SBUS_Reveive+0x5e>
    {
        sbus_buf_index++;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <SBUS_Reveive+0xb4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SBUS_Reveive+0xb4>)
 8000730:	701a      	strb	r2, [r3, #0]
        inBuffer[sbus_buf_index] = data;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <SBUS_Reveive+0xb4>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <SBUS_Reveive+0xb8>)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	5453      	strb	r3, [r2, r1]
    }

    // Finish receiving a frame of data  完成接收一帧数据
    if (sbus_start & (sbus_buf_index >= (SBUS_RECV_MAX - 1)))
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <SBUS_Reveive+0xac>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SBUS_Reveive+0xb4>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b17      	cmp	r3, #23
 800074a:	bf8c      	ite	hi
 800074c:	2301      	movhi	r3, #1
 800074e:	2300      	movls	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	2b00      	cmp	r3, #0
 8000756:	d013      	beq.n	8000780 <SBUS_Reveive+0xa0>
    {
        sbus_start = 0;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <SBUS_Reveive+0xac>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
        if (inBuffer[SBUS_RECV_MAX - 1] == SBUS_END)
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SBUS_Reveive+0xb8>)
 8000760:	7e1b      	ldrb	r3, [r3, #24]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d10c      	bne.n	8000780 <SBUS_Reveive+0xa0>
        {
            memcpy(sbus_data, inBuffer, SBUS_RECV_MAX);
 8000766:	4a0d      	ldr	r2, [pc, #52]	; (800079c <SBUS_Reveive+0xbc>)
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <SBUS_Reveive+0xb8>)
 800076a:	4614      	mov	r4, r2
 800076c:	461d      	mov	r5, r3
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000776:	c403      	stmia	r4!, {r0, r1}
 8000778:	7022      	strb	r2, [r4, #0]
            sbus_new_cmd = 1;
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SBUS_Reveive+0xb0>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bcb0      	pop	{r4, r5, r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2000009e 	.word	0x2000009e
 8000790:	200000a0 	.word	0x200000a0
 8000794:	2000009f 	.word	0x2000009f
 8000798:	200000a4 	.word	0x200000a4
 800079c:	200000c0 	.word	0x200000c0

080007a0 <SBUS_Handle>:

// SBUS receives and processes data handle  SBUS接收处理数据句柄
void SBUS_Handle(void)
{
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af06      	add	r7, sp, #24
    if (sbus_new_cmd)
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <SBUS_Handle+0x80>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d034      	beq.n	8000818 <SBUS_Handle+0x78>
    {
        int res = SBUS_Parse_Data();
 80007ae:	f7ff fe53 	bl	8000458 <SBUS_Parse_Data>
 80007b2:	6078      	str	r0, [r7, #4]
        sbus_new_cmd = 0;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <SBUS_Handle+0x80>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
        if (res) return;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d12a      	bne.n	8000816 <SBUS_Handle+0x76>
			   g_sbus_channels[9], g_sbus_channels[10], g_sbus_channels[11],
			   g_sbus_channels[12], g_sbus_channels[13], g_sbus_channels[14],
			   g_sbus_channels[15]);
        #else
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
               g_sbus_channels[0], g_sbus_channels[1], g_sbus_channels[2],
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <SBUS_Handle+0x84>)
 80007c2:	f9b3 3000 	ldrsh.w	r3, [r3]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007c6:	461d      	mov	r5, r3
               g_sbus_channels[0], g_sbus_channels[1], g_sbus_channels[2],
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <SBUS_Handle+0x84>)
 80007ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007ce:	461e      	mov	r6, r3
               g_sbus_channels[0], g_sbus_channels[1], g_sbus_channels[2],
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <SBUS_Handle+0x84>)
 80007d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007d6:	469c      	mov	ip, r3
			   g_sbus_channels[3], g_sbus_channels[4],g_sbus_channels[5],
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <SBUS_Handle+0x84>)
 80007da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007de:	461a      	mov	r2, r3
			   g_sbus_channels[3], g_sbus_channels[4],g_sbus_channels[5],
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <SBUS_Handle+0x84>)
 80007e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007e6:	4619      	mov	r1, r3
			   g_sbus_channels[3], g_sbus_channels[4],g_sbus_channels[5],
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <SBUS_Handle+0x84>)
 80007ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007ee:	4618      	mov	r0, r3
			   g_sbus_channels[6], g_sbus_channels[7]);
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <SBUS_Handle+0x84>)
 80007f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007f6:	461c      	mov	r4, r3
			   g_sbus_channels[6], g_sbus_channels[7]);
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <SBUS_Handle+0x84>)
 80007fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
        printf("%d,%d,%d,%d,%d,%d,%d,%d\r\n",
 80007fe:	9304      	str	r3, [sp, #16]
 8000800:	9403      	str	r4, [sp, #12]
 8000802:	9002      	str	r0, [sp, #8]
 8000804:	9101      	str	r1, [sp, #4]
 8000806:	9200      	str	r2, [sp, #0]
 8000808:	4663      	mov	r3, ip
 800080a:	4632      	mov	r2, r6
 800080c:	4629      	mov	r1, r5
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <SBUS_Handle+0x88>)
 8000810:	f002 fc90 	bl	8003134 <iprintf>
 8000814:	e000      	b.n	8000818 <SBUS_Handle+0x78>
        if (res) return;
 8000816:	bf00      	nop
        #endif
    }
}
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081e:	bf00      	nop
 8000820:	200000a0 	.word	0x200000a0
 8000824:	200000dc 	.word	0x200000dc
 8000828:	08004198 	.word	0x08004198

0800082c <USART1_Init>:



// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000830:	2201      	movs	r2, #1
 8000832:	4907      	ldr	r1, [pc, #28]	; (8000850 <USART1_Init+0x24>)
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <USART1_Init+0x28>)
 8000836:	f001 fff2 	bl	800281e <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&RxTemp_2, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <USART1_Init+0x2c>)
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <USART1_Init+0x30>)
 8000840:	f001 ffed 	bl	800281e <HAL_UART_Receive_IT>

    printf("start serial\n");
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <USART1_Init+0x34>)
 8000846:	f002 fcfb 	bl	8003240 <puts>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000100 	.word	0x20000100
 8000854:	20000108 	.word	0x20000108
 8000858:	20000101 	.word	0x20000101
 800085c:	2000014c 	.word	0x2000014c
 8000860:	080041b4 	.word	0x080041b4

08000864 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800086e:	1df9      	adds	r1, r7, #7
 8000870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000874:	2201      	movs	r2, #1
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <USART1_Send_U8+0x20>)
 8000878:	f001 ff3f 	bl	80026fa <HAL_UART_Transmit>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000108 	.word	0x20000108

08000888 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

    if (huart == &huart1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_UART_RxCpltCallback+0x48>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d109      	bne.n	80008ac <HAL_UART_RxCpltCallback+0x24>
    {
        // 测试发送数据，实际应用中不应该在中断中发送数据
        // Test sending data. In practice, data should not be sent during interrupts  
        USART1_Send_U8(RxTemp);
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_UART_RxCpltCallback+0x4c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffe1 	bl	8000864 <USART1_Send_U8>
        // Continue receiving data  继续接收数据
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	490b      	ldr	r1, [pc, #44]	; (80008d4 <HAL_UART_RxCpltCallback+0x4c>)
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <HAL_UART_RxCpltCallback+0x48>)
 80008a8:	f001 ffb9 	bl	800281e <HAL_UART_Receive_IT>
    }
    if (huart == &huart2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_UART_RxCpltCallback+0x50>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d109      	bne.n	80008c8 <HAL_UART_RxCpltCallback+0x40>
    {
        SBUS_Reveive(RxTemp_2);
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff11 	bl	80006e0 <SBUS_Reveive>
        // printf("a:%d\n", RxTemp_2);
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&RxTemp_2, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <HAL_UART_RxCpltCallback+0x50>)
 80008c4:	f001 ffab 	bl	800281e <HAL_UART_Receive_IT>
    }
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000108 	.word	0x20000108
 80008d4:	20000100 	.word	0x20000100
 80008d8:	2000014c 	.word	0x2000014c
 80008dc:	20000101 	.word	0x20000101

080008e0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80008e8:	1d39      	adds	r1, r7, #4
 80008ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ee:	2201      	movs	r2, #1
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <__io_putchar+0x20>)
 80008f2:	f001 ff02 	bl	80026fa <HAL_UART_Transmit>
    return ch;
 80008f6:	687b      	ldr	r3, [r7, #4]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000108 	.word	0x20000108

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_DMA_Init+0x38>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <MX_DMA_Init+0x38>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DMA_Init+0x38>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200e      	movs	r0, #14
 8000928:	f000 fc79 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800092c:	200e      	movs	r0, #14
 800092e:	f000 fc92 	bl	8001256 <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_GPIO_Init+0xa8>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_GPIO_Init+0xa8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_GPIO_Init+0xa8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0320 	and.w	r3, r3, #32
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <MX_GPIO_Init+0xa8>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f242 0120 	movw	r1, #8224	; 0x2020
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_GPIO_Init+0xac>)
 80009a4:	f001 fa11 	bl	8001dca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 80009a8:	f242 0320 	movw	r3, #8224	; 0x2020
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	480a      	ldr	r0, [pc, #40]	; (80009ec <MX_GPIO_Init+0xac>)
 80009c2:	f001 f857 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80009c6:	2304      	movs	r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_GPIO_Init+0xb0>)
 80009da:	f001 f84b 	bl	8001a74 <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40011000 	.word	0x40011000
 80009f0:	40011400 	.word	0x40011400

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fab4 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f80d 	bl	8000a1a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f7ff ff9e 	bl	8000940 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a04:	f000 f972 	bl	8000cec <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000a08:	f7ff ff7c 	bl	8000904 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a0c:	f000 f998 	bl	8000d40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8000a10:	f7ff fc22 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Bsp_Loop();
 8000a14:	f7ff fc2a 	bl	800026c <Bsp_Loop>
 8000a18:	e7fc      	b.n	8000a14 <main+0x20>

08000a1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b090      	sub	sp, #64	; 0x40
 8000a1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a20:	f107 0318 	add.w	r3, r7, #24
 8000a24:	2228      	movs	r2, #40	; 0x28
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fb7b 	bl	8003124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a44:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 f9e2 	bl	8001e2c <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a6e:	f000 f819 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fc4f 	bl	8002330 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a98:	f000 f804 	bl	8000aa4 <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3740      	adds	r7, #64	; 0x40
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_MspInit+0x5c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x5c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_MspInit+0x60>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_MspInit+0x60>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 fa49 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <DMA1_Channel4_IRQHandler+0x10>)
 8000b6a:	f000 fd47 	bl	80015fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000190 	.word	0x20000190

08000b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <USART1_IRQHandler+0x10>)
 8000b7e:	f001 fe7f 	bl	8002880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000108 	.word	0x20000108

08000b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <USART2_IRQHandler+0x10>)
 8000b92:	f001 fe75 	bl	8002880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000014c 	.word	0x2000014c

08000ba0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
	}

return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e009      	b.n	8000c00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fe73 	bl	80008e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf1      	blt.n	8000bec <_write+0x12>
	}
	return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
	return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c38:	605a      	str	r2, [r3, #4]
	return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <_isatty>:

int _isatty(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f002 fa14 	bl	80030d0 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000c000 	.word	0x2000c000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	20000104 	.word	0x20000104
 8000cdc:	200001e8 	.word	0x200001e8

08000ce0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_USART1_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d24:	f001 fc9c 	bl	8002660 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d2e:	f7ff feb9 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000108 	.word	0x20000108
 8000d3c:	40013800 	.word	0x40013800

08000d40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d46:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x54>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d4c:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART2_UART_Init+0x58>)
 8000d4e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d7c:	f001 fc70 	bl	8002660 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f7ff fe8d 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000014c 	.word	0x2000014c
 8000d94:	40004400 	.word	0x40004400
 8000d98:	000186a0 	.word	0x000186a0

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a52      	ldr	r2, [pc, #328]	; (8000f00 <HAL_UART_MspInit+0x164>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d160      	bne.n	8000e7e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dbc:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a50      	ldr	r2, [pc, #320]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a4a      	ldr	r2, [pc, #296]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4841      	ldr	r0, [pc, #260]	; (8000f08 <HAL_UART_MspInit+0x16c>)
 8000e02:	f000 fe37 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	483b      	ldr	r0, [pc, #236]	; (8000f08 <HAL_UART_MspInit+0x16c>)
 8000e1c:	f000 fe2a 	bl	8001a74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e22:	4a3b      	ldr	r2, [pc, #236]	; (8000f10 <HAL_UART_MspInit+0x174>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e28:	2210      	movs	r2, #16
 8000e2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2c:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e44:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e50:	482e      	ldr	r0, [pc, #184]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e52:	f000 fa1b 	bl	800128c <HAL_DMA_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000e5c:	f7ff fe22 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a2a      	ldr	r2, [pc, #168]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <HAL_UART_MspInit+0x170>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2025      	movs	r0, #37	; 0x25
 8000e72:	f000 f9d4 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e76:	2025      	movs	r0, #37	; 0x25
 8000e78:	f000 f9ed 	bl	8001256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e7c:	e03c      	b.n	8000ef8 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <HAL_UART_MspInit+0x178>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d137      	bne.n	8000ef8 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e92:	61d3      	str	r3, [r2, #28]
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_UART_MspInit+0x168>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <HAL_UART_MspInit+0x16c>)
 8000ecc:	f000 fdd2 	bl	8001a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_UART_MspInit+0x16c>)
 8000ee4:	f000 fdc6 	bl	8001a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	2026      	movs	r0, #38	; 0x26
 8000eee:	f000 f996 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef2:	2026      	movs	r0, #38	; 0x26
 8000ef4:	f000 f9af 	bl	8001256 <HAL_NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	20000190 	.word	0x20000190
 8000f10:	40020044 	.word	0x40020044
 8000f14:	40004400 	.word	0x40004400

08000f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3e:	f7ff fecf 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f002 f8cb 	bl	80030dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f46:	f7ff fd55 	bl	80009f4 <main>
  bx lr
 8000f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f54:	0800428c 	.word	0x0800428c
  ldr r2, =_sbss
 8000f58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f5c:	200001e8 	.word	0x200001e8

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x28>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f947 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fd96 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f95f 	bl	8001272 <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f927 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	2000000c 	.word	0x2000000c
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_IncTick+0x20>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	2000000c 	.word	0x2000000c
 8001010:	200001d4 	.word	0x200001d4

08001014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	200001d4 	.word	0x200001d4

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffe0 	bl	8001014 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000000c 	.word	0x2000000c

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4906      	ldr	r1, [pc, #24]	; (8001108 <__NVIC_EnableIRQ+0x34>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff90 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff2d 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff42 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff90 	bl	8001160 <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5f 	bl	800110c <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff35 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e059      	b.n	8001356 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_DMA_Init+0xd4>)
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d80f      	bhi.n	80012ce <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_DMA_Init+0xd8>)
 80012b6:	4413      	add	r3, r2
 80012b8:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <HAL_DMA_Init+0xdc>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	009a      	lsls	r2, r3, #2
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_DMA_Init+0xe0>)
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80012cc:	e00e      	b.n	80012ec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_DMA_Init+0xe4>)
 80012d6:	4413      	add	r3, r2
 80012d8:	4a23      	ldr	r2, [pc, #140]	; (8001368 <HAL_DMA_Init+0xdc>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	009a      	lsls	r2, r3, #2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a22      	ldr	r2, [pc, #136]	; (8001374 <HAL_DMA_Init+0xe8>)
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001302:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001306:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40020407 	.word	0x40020407
 8001364:	bffdfff8 	.word	0xbffdfff8
 8001368:	cccccccd 	.word	0xcccccccd
 800136c:	40020000 	.word	0x40020000
 8001370:	bffdfbf8 	.word	0xbffdfbf8
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800138a:	2b02      	cmp	r3, #2
 800138c:	d008      	beq.n	80013a0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e020      	b.n	80013e2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 020e 	bic.w	r2, r2, #14
 80013ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d005      	beq.n	800140e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2204      	movs	r2, #4
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e0d6      	b.n	80015bc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 020e 	bic.w	r2, r2, #14
 800141c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <HAL_DMA_Abort_IT+0x1dc>)
 8001436:	429a      	cmp	r2, r3
 8001438:	d958      	bls.n	80014ec <HAL_DMA_Abort_IT+0x100>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a63      	ldr	r2, [pc, #396]	; (80015cc <HAL_DMA_Abort_IT+0x1e0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04f      	beq.n	80014e4 <HAL_DMA_Abort_IT+0xf8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a61      	ldr	r2, [pc, #388]	; (80015d0 <HAL_DMA_Abort_IT+0x1e4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d048      	beq.n	80014e0 <HAL_DMA_Abort_IT+0xf4>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a60      	ldr	r2, [pc, #384]	; (80015d4 <HAL_DMA_Abort_IT+0x1e8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d040      	beq.n	80014da <HAL_DMA_Abort_IT+0xee>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a5e      	ldr	r2, [pc, #376]	; (80015d8 <HAL_DMA_Abort_IT+0x1ec>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d038      	beq.n	80014d4 <HAL_DMA_Abort_IT+0xe8>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a5d      	ldr	r2, [pc, #372]	; (80015dc <HAL_DMA_Abort_IT+0x1f0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d030      	beq.n	80014ce <HAL_DMA_Abort_IT+0xe2>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <HAL_DMA_Abort_IT+0x1f4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d028      	beq.n	80014c8 <HAL_DMA_Abort_IT+0xdc>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a53      	ldr	r2, [pc, #332]	; (80015c8 <HAL_DMA_Abort_IT+0x1dc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d020      	beq.n	80014c2 <HAL_DMA_Abort_IT+0xd6>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_DMA_Abort_IT+0x1f8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d019      	beq.n	80014be <HAL_DMA_Abort_IT+0xd2>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <HAL_DMA_Abort_IT+0x1fc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d012      	beq.n	80014ba <HAL_DMA_Abort_IT+0xce>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a54      	ldr	r2, [pc, #336]	; (80015ec <HAL_DMA_Abort_IT+0x200>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00a      	beq.n	80014b4 <HAL_DMA_Abort_IT+0xc8>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a53      	ldr	r2, [pc, #332]	; (80015f0 <HAL_DMA_Abort_IT+0x204>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d102      	bne.n	80014ae <HAL_DMA_Abort_IT+0xc2>
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	e01b      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b2:	e018      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b8:	e015      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014ba:	2310      	movs	r3, #16
 80014bc:	e013      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014be:	2301      	movs	r3, #1
 80014c0:	e011      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c6:	e00e      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014cc:	e00b      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d2:	e008      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	e005      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	e002      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014e0:	2310      	movs	r3, #16
 80014e2:	e000      	b.n	80014e6 <HAL_DMA_Abort_IT+0xfa>
 80014e4:	2301      	movs	r3, #1
 80014e6:	4a43      	ldr	r2, [pc, #268]	; (80015f4 <HAL_DMA_Abort_IT+0x208>)
 80014e8:	6053      	str	r3, [r2, #4]
 80014ea:	e057      	b.n	800159c <HAL_DMA_Abort_IT+0x1b0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a36      	ldr	r2, [pc, #216]	; (80015cc <HAL_DMA_Abort_IT+0x1e0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d04f      	beq.n	8001596 <HAL_DMA_Abort_IT+0x1aa>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <HAL_DMA_Abort_IT+0x1e4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d048      	beq.n	8001592 <HAL_DMA_Abort_IT+0x1a6>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a33      	ldr	r2, [pc, #204]	; (80015d4 <HAL_DMA_Abort_IT+0x1e8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d040      	beq.n	800158c <HAL_DMA_Abort_IT+0x1a0>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <HAL_DMA_Abort_IT+0x1ec>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d038      	beq.n	8001586 <HAL_DMA_Abort_IT+0x19a>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a30      	ldr	r2, [pc, #192]	; (80015dc <HAL_DMA_Abort_IT+0x1f0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d030      	beq.n	8001580 <HAL_DMA_Abort_IT+0x194>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <HAL_DMA_Abort_IT+0x1f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d028      	beq.n	800157a <HAL_DMA_Abort_IT+0x18e>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <HAL_DMA_Abort_IT+0x1dc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d020      	beq.n	8001574 <HAL_DMA_Abort_IT+0x188>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <HAL_DMA_Abort_IT+0x1f8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d019      	beq.n	8001570 <HAL_DMA_Abort_IT+0x184>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_DMA_Abort_IT+0x1fc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d012      	beq.n	800156c <HAL_DMA_Abort_IT+0x180>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a28      	ldr	r2, [pc, #160]	; (80015ec <HAL_DMA_Abort_IT+0x200>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00a      	beq.n	8001566 <HAL_DMA_Abort_IT+0x17a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_DMA_Abort_IT+0x204>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d102      	bne.n	8001560 <HAL_DMA_Abort_IT+0x174>
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	e01b      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	e018      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156a:	e015      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 800156c:	2310      	movs	r3, #16
 800156e:	e013      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001570:	2301      	movs	r3, #1
 8001572:	e011      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001578:	e00e      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 800157a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800157e:	e00b      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001584:	e008      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	e005      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	e002      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001592:	2310      	movs	r3, #16
 8001594:	e000      	b.n	8001598 <HAL_DMA_Abort_IT+0x1ac>
 8001596:	2301      	movs	r3, #1
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_DMA_Abort_IT+0x20c>)
 800159a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
    } 
  }
  return status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020080 	.word	0x40020080
 80015cc:	40020008 	.word	0x40020008
 80015d0:	4002001c 	.word	0x4002001c
 80015d4:	40020030 	.word	0x40020030
 80015d8:	40020044 	.word	0x40020044
 80015dc:	40020058 	.word	0x40020058
 80015e0:	4002006c 	.word	0x4002006c
 80015e4:	40020408 	.word	0x40020408
 80015e8:	4002041c 	.word	0x4002041c
 80015ec:	40020430 	.word	0x40020430
 80015f0:	40020444 	.word	0x40020444
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020000 	.word	0x40020000

080015fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2204      	movs	r2, #4
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80f1 	beq.w	8001808 <HAL_DMA_IRQHandler+0x20c>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80eb 	beq.w	8001808 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_DMA_IRQHandler+0x1d8>)
 8001658:	429a      	cmp	r2, r3
 800165a:	d958      	bls.n	800170e <HAL_DMA_IRQHandler+0x112>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5d      	ldr	r2, [pc, #372]	; (80017d8 <HAL_DMA_IRQHandler+0x1dc>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d04f      	beq.n	8001706 <HAL_DMA_IRQHandler+0x10a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5c      	ldr	r2, [pc, #368]	; (80017dc <HAL_DMA_IRQHandler+0x1e0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d048      	beq.n	8001702 <HAL_DMA_IRQHandler+0x106>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <HAL_DMA_IRQHandler+0x1e4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d040      	beq.n	80016fc <HAL_DMA_IRQHandler+0x100>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a59      	ldr	r2, [pc, #356]	; (80017e4 <HAL_DMA_IRQHandler+0x1e8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d038      	beq.n	80016f6 <HAL_DMA_IRQHandler+0xfa>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a57      	ldr	r2, [pc, #348]	; (80017e8 <HAL_DMA_IRQHandler+0x1ec>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d030      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xf4>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a56      	ldr	r2, [pc, #344]	; (80017ec <HAL_DMA_IRQHandler+0x1f0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d028      	beq.n	80016ea <HAL_DMA_IRQHandler+0xee>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_DMA_IRQHandler+0x1d8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d020      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xe8>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_DMA_IRQHandler+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d019      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xe4>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <HAL_DMA_IRQHandler+0x1f8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d012      	beq.n	80016dc <HAL_DMA_IRQHandler+0xe0>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a4f      	ldr	r2, [pc, #316]	; (80017f8 <HAL_DMA_IRQHandler+0x1fc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00a      	beq.n	80016d6 <HAL_DMA_IRQHandler+0xda>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a4d      	ldr	r2, [pc, #308]	; (80017fc <HAL_DMA_IRQHandler+0x200>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d102      	bne.n	80016d0 <HAL_DMA_IRQHandler+0xd4>
 80016ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ce:	e01b      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016d4:	e018      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016da:	e015      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	e013      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016e0:	2304      	movs	r3, #4
 80016e2:	e011      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016e8:	e00e      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ee:	e00b      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016f4:	e008      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016fa:	e005      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001700:	e002      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 8001702:	2340      	movs	r3, #64	; 0x40
 8001704:	e000      	b.n	8001708 <HAL_DMA_IRQHandler+0x10c>
 8001706:	2304      	movs	r3, #4
 8001708:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <HAL_DMA_IRQHandler+0x204>)
 800170a:	6053      	str	r3, [r2, #4]
 800170c:	e057      	b.n	80017be <HAL_DMA_IRQHandler+0x1c2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a31      	ldr	r2, [pc, #196]	; (80017d8 <HAL_DMA_IRQHandler+0x1dc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04f      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x1bc>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_DMA_IRQHandler+0x1e0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d048      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x1b8>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <HAL_DMA_IRQHandler+0x1e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d040      	beq.n	80017ae <HAL_DMA_IRQHandler+0x1b2>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <HAL_DMA_IRQHandler+0x1e8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d038      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x1ac>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <HAL_DMA_IRQHandler+0x1ec>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d030      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x1a6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <HAL_DMA_IRQHandler+0x1f0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d028      	beq.n	800179c <HAL_DMA_IRQHandler+0x1a0>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_DMA_IRQHandler+0x1d8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d020      	beq.n	8001796 <HAL_DMA_IRQHandler+0x19a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <HAL_DMA_IRQHandler+0x1f4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_DMA_IRQHandler+0x196>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d012      	beq.n	800178e <HAL_DMA_IRQHandler+0x192>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_DMA_IRQHandler+0x1fc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00a      	beq.n	8001788 <HAL_DMA_IRQHandler+0x18c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_DMA_IRQHandler+0x200>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d102      	bne.n	8001782 <HAL_DMA_IRQHandler+0x186>
 800177c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001780:	e01b      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 8001782:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001786:	e018      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 8001788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178c:	e015      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	e013      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 8001792:	2304      	movs	r3, #4
 8001794:	e011      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 8001796:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800179a:	e00e      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 800179c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a0:	e00b      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 80017a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017a6:	e008      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 80017a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ac:	e005      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 80017ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b2:	e002      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 80017b4:	2340      	movs	r3, #64	; 0x40
 80017b6:	e000      	b.n	80017ba <HAL_DMA_IRQHandler+0x1be>
 80017b8:	2304      	movs	r3, #4
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_DMA_IRQHandler+0x208>)
 80017bc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8136 	beq.w	8001a34 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	e130      	b.n	8001a34 <HAL_DMA_IRQHandler+0x438>
 80017d2:	bf00      	nop
 80017d4:	40020080 	.word	0x40020080
 80017d8:	40020008 	.word	0x40020008
 80017dc:	4002001c 	.word	0x4002001c
 80017e0:	40020030 	.word	0x40020030
 80017e4:	40020044 	.word	0x40020044
 80017e8:	40020058 	.word	0x40020058
 80017ec:	4002006c 	.word	0x4002006c
 80017f0:	40020408 	.word	0x40020408
 80017f4:	4002041c 	.word	0x4002041c
 80017f8:	40020430 	.word	0x40020430
 80017fc:	40020444 	.word	0x40020444
 8001800:	40020400 	.word	0x40020400
 8001804:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	2202      	movs	r2, #2
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80dd 	beq.w	80019d4 <HAL_DMA_IRQHandler+0x3d8>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80d7 	beq.w	80019d4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10b      	bne.n	800184c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 020a 	bic.w	r2, r2, #10
 8001842:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <HAL_DMA_IRQHandler+0x444>)
 8001854:	429a      	cmp	r2, r3
 8001856:	d958      	bls.n	800190a <HAL_DMA_IRQHandler+0x30e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a79      	ldr	r2, [pc, #484]	; (8001a44 <HAL_DMA_IRQHandler+0x448>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d04f      	beq.n	8001902 <HAL_DMA_IRQHandler+0x306>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a78      	ldr	r2, [pc, #480]	; (8001a48 <HAL_DMA_IRQHandler+0x44c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d048      	beq.n	80018fe <HAL_DMA_IRQHandler+0x302>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a76      	ldr	r2, [pc, #472]	; (8001a4c <HAL_DMA_IRQHandler+0x450>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d040      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x2fc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	; (8001a50 <HAL_DMA_IRQHandler+0x454>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d038      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x2f6>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a73      	ldr	r2, [pc, #460]	; (8001a54 <HAL_DMA_IRQHandler+0x458>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d030      	beq.n	80018ec <HAL_DMA_IRQHandler+0x2f0>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a72      	ldr	r2, [pc, #456]	; (8001a58 <HAL_DMA_IRQHandler+0x45c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d028      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x2ea>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a69      	ldr	r2, [pc, #420]	; (8001a40 <HAL_DMA_IRQHandler+0x444>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d020      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x2e4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_DMA_IRQHandler+0x460>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d019      	beq.n	80018dc <HAL_DMA_IRQHandler+0x2e0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6c      	ldr	r2, [pc, #432]	; (8001a60 <HAL_DMA_IRQHandler+0x464>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d012      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x2dc>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6b      	ldr	r2, [pc, #428]	; (8001a64 <HAL_DMA_IRQHandler+0x468>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00a      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x2d6>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a69      	ldr	r2, [pc, #420]	; (8001a68 <HAL_DMA_IRQHandler+0x46c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <HAL_DMA_IRQHandler+0x2d0>
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	e01b      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d0:	e018      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d6:	e015      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018d8:	2320      	movs	r3, #32
 80018da:	e013      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018dc:	2302      	movs	r3, #2
 80018de:	e011      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e4:	e00e      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018ea:	e00b      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	e008      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f6:	e005      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fc:	e002      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 80018fe:	2320      	movs	r3, #32
 8001900:	e000      	b.n	8001904 <HAL_DMA_IRQHandler+0x308>
 8001902:	2302      	movs	r3, #2
 8001904:	4a59      	ldr	r2, [pc, #356]	; (8001a6c <HAL_DMA_IRQHandler+0x470>)
 8001906:	6053      	str	r3, [r2, #4]
 8001908:	e057      	b.n	80019ba <HAL_DMA_IRQHandler+0x3be>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a4d      	ldr	r2, [pc, #308]	; (8001a44 <HAL_DMA_IRQHandler+0x448>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d04f      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x3b8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <HAL_DMA_IRQHandler+0x44c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d048      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x3b4>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <HAL_DMA_IRQHandler+0x450>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d040      	beq.n	80019aa <HAL_DMA_IRQHandler+0x3ae>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_DMA_IRQHandler+0x454>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d038      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x3a8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <HAL_DMA_IRQHandler+0x458>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d030      	beq.n	800199e <HAL_DMA_IRQHandler+0x3a2>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <HAL_DMA_IRQHandler+0x45c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d028      	beq.n	8001998 <HAL_DMA_IRQHandler+0x39c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <HAL_DMA_IRQHandler+0x444>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d020      	beq.n	8001992 <HAL_DMA_IRQHandler+0x396>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a41      	ldr	r2, [pc, #260]	; (8001a5c <HAL_DMA_IRQHandler+0x460>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_DMA_IRQHandler+0x392>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a40      	ldr	r2, [pc, #256]	; (8001a60 <HAL_DMA_IRQHandler+0x464>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d012      	beq.n	800198a <HAL_DMA_IRQHandler+0x38e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a3e      	ldr	r2, [pc, #248]	; (8001a64 <HAL_DMA_IRQHandler+0x468>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00a      	beq.n	8001984 <HAL_DMA_IRQHandler+0x388>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <HAL_DMA_IRQHandler+0x46c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d102      	bne.n	800197e <HAL_DMA_IRQHandler+0x382>
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	e01b      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 800197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001982:	e018      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 8001984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001988:	e015      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 800198a:	2320      	movs	r3, #32
 800198c:	e013      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 800198e:	2302      	movs	r3, #2
 8001990:	e011      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 8001992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001996:	e00e      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 8001998:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800199c:	e00b      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 800199e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a2:	e008      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 80019a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a8:	e005      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 80019aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ae:	e002      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 80019b0:	2320      	movs	r3, #32
 80019b2:	e000      	b.n	80019b6 <HAL_DMA_IRQHandler+0x3ba>
 80019b4:	2302      	movs	r3, #2
 80019b6:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_DMA_IRQHandler+0x474>)
 80019b8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d034      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019d2:	e02f      	b.n	8001a34 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2208      	movs	r2, #8
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d028      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x43a>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d023      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 020e 	bic.w	r2, r2, #14
 80019fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
    }
  }
  return;
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
}
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40020080 	.word	0x40020080
 8001a44:	40020008 	.word	0x40020008
 8001a48:	4002001c 	.word	0x4002001c
 8001a4c:	40020030 	.word	0x40020030
 8001a50:	40020044 	.word	0x40020044
 8001a54:	40020058 	.word	0x40020058
 8001a58:	4002006c 	.word	0x4002006c
 8001a5c:	40020408 	.word	0x40020408
 8001a60:	4002041c 	.word	0x4002041c
 8001a64:	40020430 	.word	0x40020430
 8001a68:	40020444 	.word	0x40020444
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e179      	b.n	8001d7c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8168 	bne.w	8001d76 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4a96      	ldr	r2, [pc, #600]	; (8001d04 <HAL_GPIO_Init+0x290>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d05e      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ab0:	4a94      	ldr	r2, [pc, #592]	; (8001d04 <HAL_GPIO_Init+0x290>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d875      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ab6:	4a94      	ldr	r2, [pc, #592]	; (8001d08 <HAL_GPIO_Init+0x294>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d058      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001abc:	4a92      	ldr	r2, [pc, #584]	; (8001d08 <HAL_GPIO_Init+0x294>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d86f      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ac2:	4a92      	ldr	r2, [pc, #584]	; (8001d0c <HAL_GPIO_Init+0x298>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d052      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ac8:	4a90      	ldr	r2, [pc, #576]	; (8001d0c <HAL_GPIO_Init+0x298>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d869      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ace:	4a90      	ldr	r2, [pc, #576]	; (8001d10 <HAL_GPIO_Init+0x29c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d04c      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ad4:	4a8e      	ldr	r2, [pc, #568]	; (8001d10 <HAL_GPIO_Init+0x29c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d863      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ada:	4a8e      	ldr	r2, [pc, #568]	; (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d046      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ae0:	4a8c      	ldr	r2, [pc, #560]	; (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d85d      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d82a      	bhi.n	8001b40 <HAL_GPIO_Init+0xcc>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d859      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <HAL_GPIO_Init+0x80>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b5b 	.word	0x08001b5b
 8001b00:	08001b9d 	.word	0x08001b9d
 8001b04:	08001ba3 	.word	0x08001ba3
 8001b08:	08001ba3 	.word	0x08001ba3
 8001b0c:	08001ba3 	.word	0x08001ba3
 8001b10:	08001ba3 	.word	0x08001ba3
 8001b14:	08001ba3 	.word	0x08001ba3
 8001b18:	08001ba3 	.word	0x08001ba3
 8001b1c:	08001ba3 	.word	0x08001ba3
 8001b20:	08001ba3 	.word	0x08001ba3
 8001b24:	08001ba3 	.word	0x08001ba3
 8001b28:	08001ba3 	.word	0x08001ba3
 8001b2c:	08001ba3 	.word	0x08001ba3
 8001b30:	08001ba3 	.word	0x08001ba3
 8001b34:	08001ba3 	.word	0x08001ba3
 8001b38:	08001b51 	.word	0x08001b51
 8001b3c:	08001b65 	.word	0x08001b65
 8001b40:	4a75      	ldr	r2, [pc, #468]	; (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b46:	e02c      	b.n	8001ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e029      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e024      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e01f      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e01a      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b76:	2304      	movs	r3, #4
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e013      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	611a      	str	r2, [r3, #16]
          break;
 8001b8e:	e009      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	615a      	str	r2, [r3, #20]
          break;
 8001b9a:	e003      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
          break;
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          break;
 8001ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d801      	bhi.n	8001bae <HAL_GPIO_Init+0x13a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_Init+0x13e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2bff      	cmp	r3, #255	; 0xff
 8001bb8:	d802      	bhi.n	8001bc0 <HAL_GPIO_Init+0x14c>
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0x152>
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	3b08      	subs	r3, #8
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	210f      	movs	r1, #15
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	6a39      	ldr	r1, [r7, #32]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80c1 	beq.w	8001d76 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf4:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c0c:	4a44      	ldr	r2, [pc, #272]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d01f      	beq.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <HAL_GPIO_Init+0x2b4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d019      	beq.n	8001c74 <HAL_GPIO_Init+0x200>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_GPIO_Init+0x2b8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_GPIO_Init+0x1fc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_GPIO_Init+0x1f8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a38      	ldr	r2, [pc, #224]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0x1f4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a37      	ldr	r2, [pc, #220]	; (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_GPIO_Init+0x1f0>
 8001c60:	2305      	movs	r3, #5
 8001c62:	e00a      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c64:	2306      	movs	r3, #6
 8001c66:	e008      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c8a:	4925      	ldr	r1, [pc, #148]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4924      	ldr	r1, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4920      	ldr	r1, [pc, #128]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	491a      	ldr	r1, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4916      	ldr	r1, [pc, #88]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d025      	beq.n	8001d40 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4910      	ldr	r1, [pc, #64]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
 8001d00:	e025      	b.n	8001d4e <HAL_GPIO_Init+0x2da>
 8001d02:	bf00      	nop
 8001d04:	10320000 	.word	0x10320000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10220000 	.word	0x10220000
 8001d10:	10210000 	.word	0x10210000
 8001d14:	10120000 	.word	0x10120000
 8001d18:	10110000 	.word	0x10110000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40011000 	.word	0x40011000
 8001d30:	40011400 	.word	0x40011400
 8001d34:	40011800 	.word	0x40011800
 8001d38:	40011c00 	.word	0x40011c00
 8001d3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	4913      	ldr	r1, [pc, #76]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60cb      	str	r3, [r1, #12]
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4909      	ldr	r1, [pc, #36]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f47f ae7e 	bne.w	8001a88 <HAL_GPIO_Init+0x14>
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	372c      	adds	r7, #44	; 0x2c
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40010400 	.word	0x40010400

08001d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e001      	b.n	8001dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dda:	787b      	ldrb	r3, [r7, #1]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001de6:	e003      	b.n	8001df0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	041a      	lsls	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	611a      	str	r2, [r3, #16]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e0c:	887a      	ldrh	r2, [r7, #2]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	041a      	lsls	r2, r3, #16
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e272      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d00c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e58:	4b8f      	ldr	r3, [pc, #572]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d112      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
 8001e64:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d10b      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x12c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d168      	bne.n	8001f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e24c      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x76>
 8001e94:	4b80      	ldr	r3, [pc, #512]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7f      	ldr	r2, [pc, #508]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e02e      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a77      	ldr	r2, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xbc>
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a71      	ldr	r2, [pc, #452]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	4b6b      	ldr	r3, [pc, #428]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6a      	ldr	r2, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b68      	ldr	r3, [pc, #416]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a67      	ldr	r2, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff f884 	bl	8001014 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff f880 	bl	8001014 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e200      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe4>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f870 	bl	8001014 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff f86c 	bl	8001014 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1ec      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x10c>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
 8001f7e:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c0      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4939      	ldr	r1, [pc, #228]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f825 	bl	8001014 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff f821 	bl	8001014 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1a1      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4927      	ldr	r1, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff f804 	bl	8001014 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff f800 	bl	8001014 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e180      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03a      	beq.n	80020b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe ffe4 	bl	8001014 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe ffe0 	bl	8001014 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e160      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f000 fad8 	bl	8002624 <RCC_Delay>
 8002074:	e01c      	b.n	80020b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe ffca 	bl	8001014 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002082:	e00f      	b.n	80020a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7fe ffc6 	bl	8001014 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d908      	bls.n	80020a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e146      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	42420000 	.word	0x42420000
 80020a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b92      	ldr	r3, [pc, #584]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e9      	bne.n	8002084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a6 	beq.w	800220a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b8b      	ldr	r3, [pc, #556]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a87      	ldr	r2, [pc, #540]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b85      	ldr	r3, [pc, #532]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7e      	ldr	r2, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7fe ff87 	bl	8001014 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7fe ff83 	bl	8001014 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	; 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e103      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x312>
 8002130:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a6e      	ldr	r2, [pc, #440]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e02d      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x334>
 8002146:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	e01c      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x356>
 8002168:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e00b      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002182:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a5a      	ldr	r2, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7fe ff37 	bl	8001014 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe ff33 	bl	8001014 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0b1      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ee      	beq.n	80021aa <HAL_RCC_OscConfig+0x37e>
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe ff21 	bl	8001014 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe ff1d 	bl	8001014 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e09b      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ee      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a3b      	ldr	r2, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8087 	beq.w	8002322 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d061      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d146      	bne.n	80022b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7fe fef1 	bl	8001014 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe feed 	bl	8001014 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e06d      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225c:	d108      	bne.n	8002270 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4921      	ldr	r1, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a19      	ldr	r1, [r3, #32]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	430b      	orrs	r3, r1
 8002282:	491b      	ldr	r1, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fec1 	bl	8001014 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe febd 	bl	8001014 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e03d      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x46a>
 80022b4:	e035      	b.n	8002322 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe feaa 	bl	8001014 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fea6 	bl	8001014 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e026      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x498>
 80022e2:	e01e      	b.n	8002322 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e019      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_OscConfig+0x500>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0d0      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d910      	bls.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	4965      	ldr	r1, [pc, #404]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0b8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002396:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	494d      	ldr	r1, [pc, #308]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d040      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d115      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e073      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06b      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4936      	ldr	r1, [pc, #216]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7fe fdf8 	bl	8001014 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7fe fdf4 	bl	8001014 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e053      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d210      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0207 	bic.w	r2, r3, #7
 8002466:	4922      	ldr	r1, [pc, #136]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e032      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4916      	ldr	r1, [pc, #88]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024be:	f000 f821 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1cc>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1d0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fd56 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	080041d4 	.word	0x080041d4
 80024fc:	20000004 	.word	0x20000004
 8002500:	20000008 	.word	0x20000008

08002504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	b490      	push	{r4, r7}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800250c:	1d3c      	adds	r4, r7, #4
 800250e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002514:	f240 2301 	movw	r3, #513	; 0x201
 8002518:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d002      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x40>
 800253e:	2b08      	cmp	r3, #8
 8002540:	d003      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x46>
 8002542:	e02b      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002546:	623b      	str	r3, [r7, #32]
      break;
 8002548:	e02b      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3328      	adds	r3, #40	; 0x28
 8002554:	443b      	add	r3, r7
 8002556:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800255a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d012      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	3328      	adds	r3, #40	; 0x28
 8002572:	443b      	add	r3, r7
 8002574:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002578:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800257e:	fb03 f202 	mul.w	r2, r3, r2
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
 800258a:	e004      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	623b      	str	r3, [r7, #32]
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800259e:	623b      	str	r3, [r7, #32]
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	6a3b      	ldr	r3, [r7, #32]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc90      	pop	{r4, r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	080041c4 	.word	0x080041c4
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	003d0900 	.word	0x003d0900

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b02      	ldr	r3, [pc, #8]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d8:	f7ff fff2 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	080041e4 	.word	0x080041e4

080025fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002600:	f7ff ffde 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0adb      	lsrs	r3, r3, #11
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	080041e4 	.word	0x080041e4

08002624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <RCC_Delay+0x34>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <RCC_Delay+0x38>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a5b      	lsrs	r3, r3, #9
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002640:	bf00      	nop
  }
  while (Delay --);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	60fa      	str	r2, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f9      	bne.n	8002640 <RCC_Delay+0x1c>
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000004 	.word	0x20000004
 800265c:	10624dd3 	.word	0x10624dd3

08002660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e03f      	b.n	80026f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fb88 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fc85 	bl	8002fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b08a      	sub	sp, #40	; 0x28
 80026fe:	af02      	add	r7, sp, #8
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d17c      	bne.n	8002814 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_UART_Transmit+0x2c>
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e075      	b.n	8002816 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_UART_Transmit+0x3e>
 8002734:	2302      	movs	r3, #2
 8002736:	e06e      	b.n	8002816 <HAL_UART_Transmit+0x11c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2221      	movs	r2, #33	; 0x21
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800274e:	f7fe fc61 	bl	8001014 <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	88fa      	ldrh	r2, [r7, #6]
 8002758:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002768:	d108      	bne.n	800277c <HAL_UART_Transmit+0x82>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	e003      	b.n	8002784 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800278c:	e02a      	b.n	80027e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fa38 	bl	8002c0e <UART_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e036      	b.n	8002816 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3302      	adds	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e007      	b.n	80027d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1cf      	bne.n	800278e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fa08 	bl	8002c0e <UART_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	d11d      	bne.n	8002874 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_UART_Receive_IT+0x26>
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e016      	b.n	8002876 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_UART_Receive_IT+0x38>
 8002852:	2302      	movs	r3, #2
 8002854:	e00f      	b.n	8002876 <HAL_UART_Receive_IT+0x58>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	461a      	mov	r2, r3
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa19 	bl	8002ca2 <UART_Start_Receive_IT>
 8002870:	4603      	mov	r3, r0
 8002872:	e000      	b.n	8002876 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_UART_IRQHandler+0x52>
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fac9 	bl	8002e62 <UART_Receive_IT>
      return;
 80028d0:	e17b      	b.n	8002bca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80b1 	beq.w	8002a3c <HAL_UART_IRQHandler+0x1bc>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_UART_IRQHandler+0x70>
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80a6 	beq.w	8002a3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_UART_IRQHandler+0x90>
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_UART_IRQHandler+0xb0>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0202 	orr.w	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_UART_IRQHandler+0xd0>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00f      	beq.n	800297a <HAL_UART_IRQHandler+0xfa>
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d104      	bne.n	800296e <HAL_UART_IRQHandler+0xee>
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f043 0208 	orr.w	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 811e 	beq.w	8002bc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_UART_IRQHandler+0x11e>
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fa62 	bl	8002e62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_UART_IRQHandler+0x146>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d031      	beq.n	8002a2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f9a4 	bl	8002d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d023      	beq.n	8002a22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d013      	beq.n	8002a1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	4a76      	ldr	r2, [pc, #472]	; (8002bd0 <HAL_UART_IRQHandler+0x350>)
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fcf4 	bl	80013ec <HAL_DMA_Abort_IT>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a14:	4610      	mov	r0, r2
 8002a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e00e      	b.n	8002a38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f8e3 	bl	8002be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a20:	e00a      	b.n	8002a38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8df 	bl	8002be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	e006      	b.n	8002a38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8db 	bl	8002be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a36:	e0c3      	b.n	8002bc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	bf00      	nop
    return;
 8002a3a:	e0c1      	b.n	8002bc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f040 80a1 	bne.w	8002b88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 809b 	beq.w	8002b88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8095 	beq.w	8002b88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d04e      	beq.n	8002b20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002a8c:	8a3b      	ldrh	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8098 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a98:	8a3a      	ldrh	r2, [r7, #16]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	f080 8092 	bcs.w	8002bc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8a3a      	ldrh	r2, [r7, #16]
 8002aa4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d02b      	beq.n	8002b08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002abe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ade:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0210 	bic.w	r2, r2, #16
 8002afc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fc38 	bl	8001378 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f86d 	bl	8002bf8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b1e:	e051      	b.n	8002bc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d047      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002b38:	8a7b      	ldrh	r3, [r7, #18]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d044      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0210 	bic.w	r2, r2, #16
 8002b7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b7c:	8a7b      	ldrh	r3, [r7, #18]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f839 	bl	8002bf8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b86:	e01f      	b.n	8002bc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x324>
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f8f9 	bl	8002d94 <UART_Transmit_IT>
    return;
 8002ba2:	e012      	b.n	8002bca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <HAL_UART_IRQHandler+0x34a>
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f93a 	bl	8002e32 <UART_EndTransmit_IT>
    return;
 8002bbe:	e004      	b.n	8002bca <HAL_UART_IRQHandler+0x34a>
    return;
 8002bc0:	bf00      	nop
 8002bc2:	e002      	b.n	8002bca <HAL_UART_IRQHandler+0x34a>
      return;
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <HAL_UART_IRQHandler+0x34a>
      return;
 8002bc8:	bf00      	nop
  }
}
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	08002d6d 	.word	0x08002d6d

08002bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1e:	e02c      	b.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d028      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c2e:	f7fe f9f1 	bl	8001014 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d21d      	bcs.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e00f      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d0c3      	beq.n	8002c20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2222      	movs	r2, #34	; 0x22
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0220 	orr.w	r2, r2, #32
 8002d06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0210 	bic.w	r2, r2, #16
 8002d52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff ff2d 	bl	8002be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b21      	cmp	r3, #33	; 0x21
 8002da6:	d13e      	bne.n	8002e26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d114      	bne.n	8002ddc <UART_Transmit_IT+0x48>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d110      	bne.n	8002ddc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]
 8002dda:	e008      	b.n	8002dee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	1c59      	adds	r1, r3, #1
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6211      	str	r1, [r2, #32]
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff febe 	bl	8002bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b22      	cmp	r3, #34	; 0x22
 8002e74:	f040 8099 	bne.w	8002faa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d117      	bne.n	8002eb2 <UART_Receive_IT+0x50>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	1c9a      	adds	r2, r3, #2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb0:	e026      	b.n	8002f00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec4:	d007      	beq.n	8002ed6 <UART_Receive_IT+0x74>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <UART_Receive_IT+0x82>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e008      	b.n	8002ef6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d148      	bne.n	8002fa6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0220 	bic.w	r2, r2, #32
 8002f22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d123      	bne.n	8002f9c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0210 	bic.w	r2, r2, #16
 8002f68:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d10a      	bne.n	8002f8e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fe2f 	bl	8002bf8 <HAL_UARTEx_RxEventCallback>
 8002f9a:	e002      	b.n	8002fa2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fd fc73 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e002      	b.n	8002fac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fee:	f023 030c 	bic.w	r3, r3, #12
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <UART_SetConfig+0x114>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7ff faee 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	e002      	b.n	800302a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7ff fad6 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8003028:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	4a22      	ldr	r2, [pc, #136]	; (80030cc <UART_SetConfig+0x118>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	0119      	lsls	r1, r3, #4
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <UART_SetConfig+0x118>)
 8003062:	fba3 0302 	umull	r0, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003080:	4419      	add	r1, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fbb2 f2f3 	udiv	r2, r2, r3
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <UART_SetConfig+0x118>)
 800309a:	fba3 0302 	umull	r0, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2064      	movs	r0, #100	; 0x64
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	3332      	adds	r3, #50	; 0x32
 80030ac:	4a07      	ldr	r2, [pc, #28]	; (80030cc <UART_SetConfig+0x118>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	440a      	add	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40013800 	.word	0x40013800
 80030cc:	51eb851f 	.word	0x51eb851f

080030d0 <__errno>:
 80030d0:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <__errno+0x8>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000010 	.word	0x20000010

080030dc <__libc_init_array>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	2600      	movs	r6, #0
 80030e0:	4d0c      	ldr	r5, [pc, #48]	; (8003114 <__libc_init_array+0x38>)
 80030e2:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <__libc_init_array+0x3c>)
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	42a6      	cmp	r6, r4
 80030ea:	d109      	bne.n	8003100 <__libc_init_array+0x24>
 80030ec:	f001 f82c 	bl	8004148 <_init>
 80030f0:	2600      	movs	r6, #0
 80030f2:	4d0a      	ldr	r5, [pc, #40]	; (800311c <__libc_init_array+0x40>)
 80030f4:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <__libc_init_array+0x44>)
 80030f6:	1b64      	subs	r4, r4, r5
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	42a6      	cmp	r6, r4
 80030fc:	d105      	bne.n	800310a <__libc_init_array+0x2e>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	f855 3b04 	ldr.w	r3, [r5], #4
 8003104:	4798      	blx	r3
 8003106:	3601      	adds	r6, #1
 8003108:	e7ee      	b.n	80030e8 <__libc_init_array+0xc>
 800310a:	f855 3b04 	ldr.w	r3, [r5], #4
 800310e:	4798      	blx	r3
 8003110:	3601      	adds	r6, #1
 8003112:	e7f2      	b.n	80030fa <__libc_init_array+0x1e>
 8003114:	08004284 	.word	0x08004284
 8003118:	08004284 	.word	0x08004284
 800311c:	08004284 	.word	0x08004284
 8003120:	08004288 	.word	0x08004288

08003124 <memset>:
 8003124:	4603      	mov	r3, r0
 8003126:	4402      	add	r2, r0
 8003128:	4293      	cmp	r3, r2
 800312a:	d100      	bne.n	800312e <memset+0xa>
 800312c:	4770      	bx	lr
 800312e:	f803 1b01 	strb.w	r1, [r3], #1
 8003132:	e7f9      	b.n	8003128 <memset+0x4>

08003134 <iprintf>:
 8003134:	b40f      	push	{r0, r1, r2, r3}
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <iprintf+0x2c>)
 8003138:	b513      	push	{r0, r1, r4, lr}
 800313a:	681c      	ldr	r4, [r3, #0]
 800313c:	b124      	cbz	r4, 8003148 <iprintf+0x14>
 800313e:	69a3      	ldr	r3, [r4, #24]
 8003140:	b913      	cbnz	r3, 8003148 <iprintf+0x14>
 8003142:	4620      	mov	r0, r4
 8003144:	f000 fa5a 	bl	80035fc <__sinit>
 8003148:	ab05      	add	r3, sp, #20
 800314a:	4620      	mov	r0, r4
 800314c:	9a04      	ldr	r2, [sp, #16]
 800314e:	68a1      	ldr	r1, [r4, #8]
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	f000 fc5d 	bl	8003a10 <_vfiprintf_r>
 8003156:	b002      	add	sp, #8
 8003158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800315c:	b004      	add	sp, #16
 800315e:	4770      	bx	lr
 8003160:	20000010 	.word	0x20000010

08003164 <_puts_r>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	460e      	mov	r6, r1
 8003168:	4605      	mov	r5, r0
 800316a:	b118      	cbz	r0, 8003174 <_puts_r+0x10>
 800316c:	6983      	ldr	r3, [r0, #24]
 800316e:	b90b      	cbnz	r3, 8003174 <_puts_r+0x10>
 8003170:	f000 fa44 	bl	80035fc <__sinit>
 8003174:	69ab      	ldr	r3, [r5, #24]
 8003176:	68ac      	ldr	r4, [r5, #8]
 8003178:	b913      	cbnz	r3, 8003180 <_puts_r+0x1c>
 800317a:	4628      	mov	r0, r5
 800317c:	f000 fa3e 	bl	80035fc <__sinit>
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <_puts_r+0xd0>)
 8003182:	429c      	cmp	r4, r3
 8003184:	d120      	bne.n	80031c8 <_puts_r+0x64>
 8003186:	686c      	ldr	r4, [r5, #4]
 8003188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800318a:	07db      	lsls	r3, r3, #31
 800318c:	d405      	bmi.n	800319a <_puts_r+0x36>
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	0598      	lsls	r0, r3, #22
 8003192:	d402      	bmi.n	800319a <_puts_r+0x36>
 8003194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003196:	f000 facf 	bl	8003738 <__retarget_lock_acquire_recursive>
 800319a:	89a3      	ldrh	r3, [r4, #12]
 800319c:	0719      	lsls	r1, r3, #28
 800319e:	d51d      	bpl.n	80031dc <_puts_r+0x78>
 80031a0:	6923      	ldr	r3, [r4, #16]
 80031a2:	b1db      	cbz	r3, 80031dc <_puts_r+0x78>
 80031a4:	3e01      	subs	r6, #1
 80031a6:	68a3      	ldr	r3, [r4, #8]
 80031a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60a3      	str	r3, [r4, #8]
 80031b0:	bb39      	cbnz	r1, 8003202 <_puts_r+0x9e>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da38      	bge.n	8003228 <_puts_r+0xc4>
 80031b6:	4622      	mov	r2, r4
 80031b8:	210a      	movs	r1, #10
 80031ba:	4628      	mov	r0, r5
 80031bc:	f000 f848 	bl	8003250 <__swbuf_r>
 80031c0:	3001      	adds	r0, #1
 80031c2:	d011      	beq.n	80031e8 <_puts_r+0x84>
 80031c4:	250a      	movs	r5, #10
 80031c6:	e011      	b.n	80031ec <_puts_r+0x88>
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <_puts_r+0xd4>)
 80031ca:	429c      	cmp	r4, r3
 80031cc:	d101      	bne.n	80031d2 <_puts_r+0x6e>
 80031ce:	68ac      	ldr	r4, [r5, #8]
 80031d0:	e7da      	b.n	8003188 <_puts_r+0x24>
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <_puts_r+0xd8>)
 80031d4:	429c      	cmp	r4, r3
 80031d6:	bf08      	it	eq
 80031d8:	68ec      	ldreq	r4, [r5, #12]
 80031da:	e7d5      	b.n	8003188 <_puts_r+0x24>
 80031dc:	4621      	mov	r1, r4
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 f888 	bl	80032f4 <__swsetup_r>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d0dd      	beq.n	80031a4 <_puts_r+0x40>
 80031e8:	f04f 35ff 	mov.w	r5, #4294967295
 80031ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031ee:	07da      	lsls	r2, r3, #31
 80031f0:	d405      	bmi.n	80031fe <_puts_r+0x9a>
 80031f2:	89a3      	ldrh	r3, [r4, #12]
 80031f4:	059b      	lsls	r3, r3, #22
 80031f6:	d402      	bmi.n	80031fe <_puts_r+0x9a>
 80031f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031fa:	f000 fa9e 	bl	800373a <__retarget_lock_release_recursive>
 80031fe:	4628      	mov	r0, r5
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	2b00      	cmp	r3, #0
 8003204:	da04      	bge.n	8003210 <_puts_r+0xac>
 8003206:	69a2      	ldr	r2, [r4, #24]
 8003208:	429a      	cmp	r2, r3
 800320a:	dc06      	bgt.n	800321a <_puts_r+0xb6>
 800320c:	290a      	cmp	r1, #10
 800320e:	d004      	beq.n	800321a <_puts_r+0xb6>
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	6022      	str	r2, [r4, #0]
 8003216:	7019      	strb	r1, [r3, #0]
 8003218:	e7c5      	b.n	80031a6 <_puts_r+0x42>
 800321a:	4622      	mov	r2, r4
 800321c:	4628      	mov	r0, r5
 800321e:	f000 f817 	bl	8003250 <__swbuf_r>
 8003222:	3001      	adds	r0, #1
 8003224:	d1bf      	bne.n	80031a6 <_puts_r+0x42>
 8003226:	e7df      	b.n	80031e8 <_puts_r+0x84>
 8003228:	250a      	movs	r5, #10
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	6022      	str	r2, [r4, #0]
 8003230:	701d      	strb	r5, [r3, #0]
 8003232:	e7db      	b.n	80031ec <_puts_r+0x88>
 8003234:	08004210 	.word	0x08004210
 8003238:	08004230 	.word	0x08004230
 800323c:	080041f0 	.word	0x080041f0

08003240 <puts>:
 8003240:	4b02      	ldr	r3, [pc, #8]	; (800324c <puts+0xc>)
 8003242:	4601      	mov	r1, r0
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	f7ff bf8d 	b.w	8003164 <_puts_r>
 800324a:	bf00      	nop
 800324c:	20000010 	.word	0x20000010

08003250 <__swbuf_r>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	460e      	mov	r6, r1
 8003254:	4614      	mov	r4, r2
 8003256:	4605      	mov	r5, r0
 8003258:	b118      	cbz	r0, 8003262 <__swbuf_r+0x12>
 800325a:	6983      	ldr	r3, [r0, #24]
 800325c:	b90b      	cbnz	r3, 8003262 <__swbuf_r+0x12>
 800325e:	f000 f9cd 	bl	80035fc <__sinit>
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <__swbuf_r+0x98>)
 8003264:	429c      	cmp	r4, r3
 8003266:	d12b      	bne.n	80032c0 <__swbuf_r+0x70>
 8003268:	686c      	ldr	r4, [r5, #4]
 800326a:	69a3      	ldr	r3, [r4, #24]
 800326c:	60a3      	str	r3, [r4, #8]
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	071a      	lsls	r2, r3, #28
 8003272:	d52f      	bpl.n	80032d4 <__swbuf_r+0x84>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	b36b      	cbz	r3, 80032d4 <__swbuf_r+0x84>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	b2f6      	uxtb	r6, r6
 800327e:	1ac0      	subs	r0, r0, r3
 8003280:	6963      	ldr	r3, [r4, #20]
 8003282:	4637      	mov	r7, r6
 8003284:	4283      	cmp	r3, r0
 8003286:	dc04      	bgt.n	8003292 <__swbuf_r+0x42>
 8003288:	4621      	mov	r1, r4
 800328a:	4628      	mov	r0, r5
 800328c:	f000 f922 	bl	80034d4 <_fflush_r>
 8003290:	bb30      	cbnz	r0, 80032e0 <__swbuf_r+0x90>
 8003292:	68a3      	ldr	r3, [r4, #8]
 8003294:	3001      	adds	r0, #1
 8003296:	3b01      	subs	r3, #1
 8003298:	60a3      	str	r3, [r4, #8]
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	6022      	str	r2, [r4, #0]
 80032a0:	701e      	strb	r6, [r3, #0]
 80032a2:	6963      	ldr	r3, [r4, #20]
 80032a4:	4283      	cmp	r3, r0
 80032a6:	d004      	beq.n	80032b2 <__swbuf_r+0x62>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	07db      	lsls	r3, r3, #31
 80032ac:	d506      	bpl.n	80032bc <__swbuf_r+0x6c>
 80032ae:	2e0a      	cmp	r6, #10
 80032b0:	d104      	bne.n	80032bc <__swbuf_r+0x6c>
 80032b2:	4621      	mov	r1, r4
 80032b4:	4628      	mov	r0, r5
 80032b6:	f000 f90d 	bl	80034d4 <_fflush_r>
 80032ba:	b988      	cbnz	r0, 80032e0 <__swbuf_r+0x90>
 80032bc:	4638      	mov	r0, r7
 80032be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <__swbuf_r+0x9c>)
 80032c2:	429c      	cmp	r4, r3
 80032c4:	d101      	bne.n	80032ca <__swbuf_r+0x7a>
 80032c6:	68ac      	ldr	r4, [r5, #8]
 80032c8:	e7cf      	b.n	800326a <__swbuf_r+0x1a>
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <__swbuf_r+0xa0>)
 80032cc:	429c      	cmp	r4, r3
 80032ce:	bf08      	it	eq
 80032d0:	68ec      	ldreq	r4, [r5, #12]
 80032d2:	e7ca      	b.n	800326a <__swbuf_r+0x1a>
 80032d4:	4621      	mov	r1, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f80c 	bl	80032f4 <__swsetup_r>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d0cb      	beq.n	8003278 <__swbuf_r+0x28>
 80032e0:	f04f 37ff 	mov.w	r7, #4294967295
 80032e4:	e7ea      	b.n	80032bc <__swbuf_r+0x6c>
 80032e6:	bf00      	nop
 80032e8:	08004210 	.word	0x08004210
 80032ec:	08004230 	.word	0x08004230
 80032f0:	080041f0 	.word	0x080041f0

080032f4 <__swsetup_r>:
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <__swsetup_r+0xcc>)
 80032f6:	b570      	push	{r4, r5, r6, lr}
 80032f8:	681d      	ldr	r5, [r3, #0]
 80032fa:	4606      	mov	r6, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	b125      	cbz	r5, 800330a <__swsetup_r+0x16>
 8003300:	69ab      	ldr	r3, [r5, #24]
 8003302:	b913      	cbnz	r3, 800330a <__swsetup_r+0x16>
 8003304:	4628      	mov	r0, r5
 8003306:	f000 f979 	bl	80035fc <__sinit>
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <__swsetup_r+0xd0>)
 800330c:	429c      	cmp	r4, r3
 800330e:	d10f      	bne.n	8003330 <__swsetup_r+0x3c>
 8003310:	686c      	ldr	r4, [r5, #4]
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003318:	0719      	lsls	r1, r3, #28
 800331a:	d42c      	bmi.n	8003376 <__swsetup_r+0x82>
 800331c:	06dd      	lsls	r5, r3, #27
 800331e:	d411      	bmi.n	8003344 <__swsetup_r+0x50>
 8003320:	2309      	movs	r3, #9
 8003322:	6033      	str	r3, [r6, #0]
 8003324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	81a3      	strh	r3, [r4, #12]
 800332e:	e03e      	b.n	80033ae <__swsetup_r+0xba>
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <__swsetup_r+0xd4>)
 8003332:	429c      	cmp	r4, r3
 8003334:	d101      	bne.n	800333a <__swsetup_r+0x46>
 8003336:	68ac      	ldr	r4, [r5, #8]
 8003338:	e7eb      	b.n	8003312 <__swsetup_r+0x1e>
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <__swsetup_r+0xd8>)
 800333c:	429c      	cmp	r4, r3
 800333e:	bf08      	it	eq
 8003340:	68ec      	ldreq	r4, [r5, #12]
 8003342:	e7e6      	b.n	8003312 <__swsetup_r+0x1e>
 8003344:	0758      	lsls	r0, r3, #29
 8003346:	d512      	bpl.n	800336e <__swsetup_r+0x7a>
 8003348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800334a:	b141      	cbz	r1, 800335e <__swsetup_r+0x6a>
 800334c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003350:	4299      	cmp	r1, r3
 8003352:	d002      	beq.n	800335a <__swsetup_r+0x66>
 8003354:	4630      	mov	r0, r6
 8003356:	f000 fa57 	bl	8003808 <_free_r>
 800335a:	2300      	movs	r3, #0
 800335c:	6363      	str	r3, [r4, #52]	; 0x34
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	2300      	movs	r3, #0
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6923      	ldr	r3, [r4, #16]
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	81a3      	strh	r3, [r4, #12]
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	b94b      	cbnz	r3, 800338e <__swsetup_r+0x9a>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d003      	beq.n	800338e <__swsetup_r+0x9a>
 8003386:	4621      	mov	r1, r4
 8003388:	4630      	mov	r0, r6
 800338a:	f000 f9fd 	bl	8003788 <__smakebuf_r>
 800338e:	89a0      	ldrh	r0, [r4, #12]
 8003390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003394:	f010 0301 	ands.w	r3, r0, #1
 8003398:	d00a      	beq.n	80033b0 <__swsetup_r+0xbc>
 800339a:	2300      	movs	r3, #0
 800339c:	60a3      	str	r3, [r4, #8]
 800339e:	6963      	ldr	r3, [r4, #20]
 80033a0:	425b      	negs	r3, r3
 80033a2:	61a3      	str	r3, [r4, #24]
 80033a4:	6923      	ldr	r3, [r4, #16]
 80033a6:	b943      	cbnz	r3, 80033ba <__swsetup_r+0xc6>
 80033a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033ac:	d1ba      	bne.n	8003324 <__swsetup_r+0x30>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	0781      	lsls	r1, r0, #30
 80033b2:	bf58      	it	pl
 80033b4:	6963      	ldrpl	r3, [r4, #20]
 80033b6:	60a3      	str	r3, [r4, #8]
 80033b8:	e7f4      	b.n	80033a4 <__swsetup_r+0xb0>
 80033ba:	2000      	movs	r0, #0
 80033bc:	e7f7      	b.n	80033ae <__swsetup_r+0xba>
 80033be:	bf00      	nop
 80033c0:	20000010 	.word	0x20000010
 80033c4:	08004210 	.word	0x08004210
 80033c8:	08004230 	.word	0x08004230
 80033cc:	080041f0 	.word	0x080041f0

080033d0 <__sflush_r>:
 80033d0:	898a      	ldrh	r2, [r1, #12]
 80033d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d4:	4605      	mov	r5, r0
 80033d6:	0710      	lsls	r0, r2, #28
 80033d8:	460c      	mov	r4, r1
 80033da:	d457      	bmi.n	800348c <__sflush_r+0xbc>
 80033dc:	684b      	ldr	r3, [r1, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	dc04      	bgt.n	80033ec <__sflush_r+0x1c>
 80033e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dc01      	bgt.n	80033ec <__sflush_r+0x1c>
 80033e8:	2000      	movs	r0, #0
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ee:	2e00      	cmp	r6, #0
 80033f0:	d0fa      	beq.n	80033e8 <__sflush_r+0x18>
 80033f2:	2300      	movs	r3, #0
 80033f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033f8:	682f      	ldr	r7, [r5, #0]
 80033fa:	602b      	str	r3, [r5, #0]
 80033fc:	d032      	beq.n	8003464 <__sflush_r+0x94>
 80033fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	075a      	lsls	r2, r3, #29
 8003404:	d505      	bpl.n	8003412 <__sflush_r+0x42>
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	1ac0      	subs	r0, r0, r3
 800340a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800340c:	b10b      	cbz	r3, 8003412 <__sflush_r+0x42>
 800340e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003410:	1ac0      	subs	r0, r0, r3
 8003412:	2300      	movs	r3, #0
 8003414:	4602      	mov	r2, r0
 8003416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003418:	4628      	mov	r0, r5
 800341a:	6a21      	ldr	r1, [r4, #32]
 800341c:	47b0      	blx	r6
 800341e:	1c43      	adds	r3, r0, #1
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	d106      	bne.n	8003432 <__sflush_r+0x62>
 8003424:	6829      	ldr	r1, [r5, #0]
 8003426:	291d      	cmp	r1, #29
 8003428:	d82c      	bhi.n	8003484 <__sflush_r+0xb4>
 800342a:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <__sflush_r+0x100>)
 800342c:	40ca      	lsrs	r2, r1
 800342e:	07d6      	lsls	r6, r2, #31
 8003430:	d528      	bpl.n	8003484 <__sflush_r+0xb4>
 8003432:	2200      	movs	r2, #0
 8003434:	6062      	str	r2, [r4, #4]
 8003436:	6922      	ldr	r2, [r4, #16]
 8003438:	04d9      	lsls	r1, r3, #19
 800343a:	6022      	str	r2, [r4, #0]
 800343c:	d504      	bpl.n	8003448 <__sflush_r+0x78>
 800343e:	1c42      	adds	r2, r0, #1
 8003440:	d101      	bne.n	8003446 <__sflush_r+0x76>
 8003442:	682b      	ldr	r3, [r5, #0]
 8003444:	b903      	cbnz	r3, 8003448 <__sflush_r+0x78>
 8003446:	6560      	str	r0, [r4, #84]	; 0x54
 8003448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800344a:	602f      	str	r7, [r5, #0]
 800344c:	2900      	cmp	r1, #0
 800344e:	d0cb      	beq.n	80033e8 <__sflush_r+0x18>
 8003450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003454:	4299      	cmp	r1, r3
 8003456:	d002      	beq.n	800345e <__sflush_r+0x8e>
 8003458:	4628      	mov	r0, r5
 800345a:	f000 f9d5 	bl	8003808 <_free_r>
 800345e:	2000      	movs	r0, #0
 8003460:	6360      	str	r0, [r4, #52]	; 0x34
 8003462:	e7c2      	b.n	80033ea <__sflush_r+0x1a>
 8003464:	6a21      	ldr	r1, [r4, #32]
 8003466:	2301      	movs	r3, #1
 8003468:	4628      	mov	r0, r5
 800346a:	47b0      	blx	r6
 800346c:	1c41      	adds	r1, r0, #1
 800346e:	d1c7      	bne.n	8003400 <__sflush_r+0x30>
 8003470:	682b      	ldr	r3, [r5, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0c4      	beq.n	8003400 <__sflush_r+0x30>
 8003476:	2b1d      	cmp	r3, #29
 8003478:	d001      	beq.n	800347e <__sflush_r+0xae>
 800347a:	2b16      	cmp	r3, #22
 800347c:	d101      	bne.n	8003482 <__sflush_r+0xb2>
 800347e:	602f      	str	r7, [r5, #0]
 8003480:	e7b2      	b.n	80033e8 <__sflush_r+0x18>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003488:	81a3      	strh	r3, [r4, #12]
 800348a:	e7ae      	b.n	80033ea <__sflush_r+0x1a>
 800348c:	690f      	ldr	r7, [r1, #16]
 800348e:	2f00      	cmp	r7, #0
 8003490:	d0aa      	beq.n	80033e8 <__sflush_r+0x18>
 8003492:	0793      	lsls	r3, r2, #30
 8003494:	bf18      	it	ne
 8003496:	2300      	movne	r3, #0
 8003498:	680e      	ldr	r6, [r1, #0]
 800349a:	bf08      	it	eq
 800349c:	694b      	ldreq	r3, [r1, #20]
 800349e:	1bf6      	subs	r6, r6, r7
 80034a0:	600f      	str	r7, [r1, #0]
 80034a2:	608b      	str	r3, [r1, #8]
 80034a4:	2e00      	cmp	r6, #0
 80034a6:	dd9f      	ble.n	80033e8 <__sflush_r+0x18>
 80034a8:	4633      	mov	r3, r6
 80034aa:	463a      	mov	r2, r7
 80034ac:	4628      	mov	r0, r5
 80034ae:	6a21      	ldr	r1, [r4, #32]
 80034b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80034b4:	47e0      	blx	ip
 80034b6:	2800      	cmp	r0, #0
 80034b8:	dc06      	bgt.n	80034c8 <__sflush_r+0xf8>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	e790      	b.n	80033ea <__sflush_r+0x1a>
 80034c8:	4407      	add	r7, r0
 80034ca:	1a36      	subs	r6, r6, r0
 80034cc:	e7ea      	b.n	80034a4 <__sflush_r+0xd4>
 80034ce:	bf00      	nop
 80034d0:	20400001 	.word	0x20400001

080034d4 <_fflush_r>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	690b      	ldr	r3, [r1, #16]
 80034d8:	4605      	mov	r5, r0
 80034da:	460c      	mov	r4, r1
 80034dc:	b913      	cbnz	r3, 80034e4 <_fflush_r+0x10>
 80034de:	2500      	movs	r5, #0
 80034e0:	4628      	mov	r0, r5
 80034e2:	bd38      	pop	{r3, r4, r5, pc}
 80034e4:	b118      	cbz	r0, 80034ee <_fflush_r+0x1a>
 80034e6:	6983      	ldr	r3, [r0, #24]
 80034e8:	b90b      	cbnz	r3, 80034ee <_fflush_r+0x1a>
 80034ea:	f000 f887 	bl	80035fc <__sinit>
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <_fflush_r+0x6c>)
 80034f0:	429c      	cmp	r4, r3
 80034f2:	d11b      	bne.n	800352c <_fflush_r+0x58>
 80034f4:	686c      	ldr	r4, [r5, #4]
 80034f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ef      	beq.n	80034de <_fflush_r+0xa>
 80034fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003500:	07d0      	lsls	r0, r2, #31
 8003502:	d404      	bmi.n	800350e <_fflush_r+0x3a>
 8003504:	0599      	lsls	r1, r3, #22
 8003506:	d402      	bmi.n	800350e <_fflush_r+0x3a>
 8003508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800350a:	f000 f915 	bl	8003738 <__retarget_lock_acquire_recursive>
 800350e:	4628      	mov	r0, r5
 8003510:	4621      	mov	r1, r4
 8003512:	f7ff ff5d 	bl	80033d0 <__sflush_r>
 8003516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003518:	4605      	mov	r5, r0
 800351a:	07da      	lsls	r2, r3, #31
 800351c:	d4e0      	bmi.n	80034e0 <_fflush_r+0xc>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	059b      	lsls	r3, r3, #22
 8003522:	d4dd      	bmi.n	80034e0 <_fflush_r+0xc>
 8003524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003526:	f000 f908 	bl	800373a <__retarget_lock_release_recursive>
 800352a:	e7d9      	b.n	80034e0 <_fflush_r+0xc>
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <_fflush_r+0x70>)
 800352e:	429c      	cmp	r4, r3
 8003530:	d101      	bne.n	8003536 <_fflush_r+0x62>
 8003532:	68ac      	ldr	r4, [r5, #8]
 8003534:	e7df      	b.n	80034f6 <_fflush_r+0x22>
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <_fflush_r+0x74>)
 8003538:	429c      	cmp	r4, r3
 800353a:	bf08      	it	eq
 800353c:	68ec      	ldreq	r4, [r5, #12]
 800353e:	e7da      	b.n	80034f6 <_fflush_r+0x22>
 8003540:	08004210 	.word	0x08004210
 8003544:	08004230 	.word	0x08004230
 8003548:	080041f0 	.word	0x080041f0

0800354c <std>:
 800354c:	2300      	movs	r3, #0
 800354e:	b510      	push	{r4, lr}
 8003550:	4604      	mov	r4, r0
 8003552:	e9c0 3300 	strd	r3, r3, [r0]
 8003556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800355a:	6083      	str	r3, [r0, #8]
 800355c:	8181      	strh	r1, [r0, #12]
 800355e:	6643      	str	r3, [r0, #100]	; 0x64
 8003560:	81c2      	strh	r2, [r0, #14]
 8003562:	6183      	str	r3, [r0, #24]
 8003564:	4619      	mov	r1, r3
 8003566:	2208      	movs	r2, #8
 8003568:	305c      	adds	r0, #92	; 0x5c
 800356a:	f7ff fddb 	bl	8003124 <memset>
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <std+0x38>)
 8003570:	6224      	str	r4, [r4, #32]
 8003572:	6263      	str	r3, [r4, #36]	; 0x24
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <std+0x3c>)
 8003576:	62a3      	str	r3, [r4, #40]	; 0x28
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <std+0x40>)
 800357a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <std+0x44>)
 800357e:	6323      	str	r3, [r4, #48]	; 0x30
 8003580:	bd10      	pop	{r4, pc}
 8003582:	bf00      	nop
 8003584:	08003fbd 	.word	0x08003fbd
 8003588:	08003fdf 	.word	0x08003fdf
 800358c:	08004017 	.word	0x08004017
 8003590:	0800403b 	.word	0x0800403b

08003594 <_cleanup_r>:
 8003594:	4901      	ldr	r1, [pc, #4]	; (800359c <_cleanup_r+0x8>)
 8003596:	f000 b8af 	b.w	80036f8 <_fwalk_reent>
 800359a:	bf00      	nop
 800359c:	080034d5 	.word	0x080034d5

080035a0 <__sfmoreglue>:
 80035a0:	2268      	movs	r2, #104	; 0x68
 80035a2:	b570      	push	{r4, r5, r6, lr}
 80035a4:	1e4d      	subs	r5, r1, #1
 80035a6:	4355      	muls	r5, r2
 80035a8:	460e      	mov	r6, r1
 80035aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035ae:	f000 f993 	bl	80038d8 <_malloc_r>
 80035b2:	4604      	mov	r4, r0
 80035b4:	b140      	cbz	r0, 80035c8 <__sfmoreglue+0x28>
 80035b6:	2100      	movs	r1, #0
 80035b8:	e9c0 1600 	strd	r1, r6, [r0]
 80035bc:	300c      	adds	r0, #12
 80035be:	60a0      	str	r0, [r4, #8]
 80035c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035c4:	f7ff fdae 	bl	8003124 <memset>
 80035c8:	4620      	mov	r0, r4
 80035ca:	bd70      	pop	{r4, r5, r6, pc}

080035cc <__sfp_lock_acquire>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__sfp_lock_acquire+0x8>)
 80035ce:	f000 b8b3 	b.w	8003738 <__retarget_lock_acquire_recursive>
 80035d2:	bf00      	nop
 80035d4:	200001d9 	.word	0x200001d9

080035d8 <__sfp_lock_release>:
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <__sfp_lock_release+0x8>)
 80035da:	f000 b8ae 	b.w	800373a <__retarget_lock_release_recursive>
 80035de:	bf00      	nop
 80035e0:	200001d9 	.word	0x200001d9

080035e4 <__sinit_lock_acquire>:
 80035e4:	4801      	ldr	r0, [pc, #4]	; (80035ec <__sinit_lock_acquire+0x8>)
 80035e6:	f000 b8a7 	b.w	8003738 <__retarget_lock_acquire_recursive>
 80035ea:	bf00      	nop
 80035ec:	200001da 	.word	0x200001da

080035f0 <__sinit_lock_release>:
 80035f0:	4801      	ldr	r0, [pc, #4]	; (80035f8 <__sinit_lock_release+0x8>)
 80035f2:	f000 b8a2 	b.w	800373a <__retarget_lock_release_recursive>
 80035f6:	bf00      	nop
 80035f8:	200001da 	.word	0x200001da

080035fc <__sinit>:
 80035fc:	b510      	push	{r4, lr}
 80035fe:	4604      	mov	r4, r0
 8003600:	f7ff fff0 	bl	80035e4 <__sinit_lock_acquire>
 8003604:	69a3      	ldr	r3, [r4, #24]
 8003606:	b11b      	cbz	r3, 8003610 <__sinit+0x14>
 8003608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800360c:	f7ff bff0 	b.w	80035f0 <__sinit_lock_release>
 8003610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003614:	6523      	str	r3, [r4, #80]	; 0x50
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <__sinit+0x68>)
 8003618:	4a13      	ldr	r2, [pc, #76]	; (8003668 <__sinit+0x6c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	62a2      	str	r2, [r4, #40]	; 0x28
 800361e:	42a3      	cmp	r3, r4
 8003620:	bf08      	it	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	4620      	mov	r0, r4
 8003626:	bf08      	it	eq
 8003628:	61a3      	streq	r3, [r4, #24]
 800362a:	f000 f81f 	bl	800366c <__sfp>
 800362e:	6060      	str	r0, [r4, #4]
 8003630:	4620      	mov	r0, r4
 8003632:	f000 f81b 	bl	800366c <__sfp>
 8003636:	60a0      	str	r0, [r4, #8]
 8003638:	4620      	mov	r0, r4
 800363a:	f000 f817 	bl	800366c <__sfp>
 800363e:	2200      	movs	r2, #0
 8003640:	2104      	movs	r1, #4
 8003642:	60e0      	str	r0, [r4, #12]
 8003644:	6860      	ldr	r0, [r4, #4]
 8003646:	f7ff ff81 	bl	800354c <std>
 800364a:	2201      	movs	r2, #1
 800364c:	2109      	movs	r1, #9
 800364e:	68a0      	ldr	r0, [r4, #8]
 8003650:	f7ff ff7c 	bl	800354c <std>
 8003654:	2202      	movs	r2, #2
 8003656:	2112      	movs	r1, #18
 8003658:	68e0      	ldr	r0, [r4, #12]
 800365a:	f7ff ff77 	bl	800354c <std>
 800365e:	2301      	movs	r3, #1
 8003660:	61a3      	str	r3, [r4, #24]
 8003662:	e7d1      	b.n	8003608 <__sinit+0xc>
 8003664:	080041ec 	.word	0x080041ec
 8003668:	08003595 	.word	0x08003595

0800366c <__sfp>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	4607      	mov	r7, r0
 8003670:	f7ff ffac 	bl	80035cc <__sfp_lock_acquire>
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <__sfp+0x84>)
 8003676:	681e      	ldr	r6, [r3, #0]
 8003678:	69b3      	ldr	r3, [r6, #24]
 800367a:	b913      	cbnz	r3, 8003682 <__sfp+0x16>
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff ffbd 	bl	80035fc <__sinit>
 8003682:	3648      	adds	r6, #72	; 0x48
 8003684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003688:	3b01      	subs	r3, #1
 800368a:	d503      	bpl.n	8003694 <__sfp+0x28>
 800368c:	6833      	ldr	r3, [r6, #0]
 800368e:	b30b      	cbz	r3, 80036d4 <__sfp+0x68>
 8003690:	6836      	ldr	r6, [r6, #0]
 8003692:	e7f7      	b.n	8003684 <__sfp+0x18>
 8003694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003698:	b9d5      	cbnz	r5, 80036d0 <__sfp+0x64>
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <__sfp+0x88>)
 800369c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036a0:	60e3      	str	r3, [r4, #12]
 80036a2:	6665      	str	r5, [r4, #100]	; 0x64
 80036a4:	f000 f847 	bl	8003736 <__retarget_lock_init_recursive>
 80036a8:	f7ff ff96 	bl	80035d8 <__sfp_lock_release>
 80036ac:	2208      	movs	r2, #8
 80036ae:	4629      	mov	r1, r5
 80036b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036b8:	6025      	str	r5, [r4, #0]
 80036ba:	61a5      	str	r5, [r4, #24]
 80036bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036c0:	f7ff fd30 	bl	8003124 <memset>
 80036c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036cc:	4620      	mov	r0, r4
 80036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d0:	3468      	adds	r4, #104	; 0x68
 80036d2:	e7d9      	b.n	8003688 <__sfp+0x1c>
 80036d4:	2104      	movs	r1, #4
 80036d6:	4638      	mov	r0, r7
 80036d8:	f7ff ff62 	bl	80035a0 <__sfmoreglue>
 80036dc:	4604      	mov	r4, r0
 80036de:	6030      	str	r0, [r6, #0]
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d1d5      	bne.n	8003690 <__sfp+0x24>
 80036e4:	f7ff ff78 	bl	80035d8 <__sfp_lock_release>
 80036e8:	230c      	movs	r3, #12
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	e7ee      	b.n	80036cc <__sfp+0x60>
 80036ee:	bf00      	nop
 80036f0:	080041ec 	.word	0x080041ec
 80036f4:	ffff0001 	.word	0xffff0001

080036f8 <_fwalk_reent>:
 80036f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036fc:	4606      	mov	r6, r0
 80036fe:	4688      	mov	r8, r1
 8003700:	2700      	movs	r7, #0
 8003702:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800370a:	f1b9 0901 	subs.w	r9, r9, #1
 800370e:	d505      	bpl.n	800371c <_fwalk_reent+0x24>
 8003710:	6824      	ldr	r4, [r4, #0]
 8003712:	2c00      	cmp	r4, #0
 8003714:	d1f7      	bne.n	8003706 <_fwalk_reent+0xe>
 8003716:	4638      	mov	r0, r7
 8003718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800371c:	89ab      	ldrh	r3, [r5, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d907      	bls.n	8003732 <_fwalk_reent+0x3a>
 8003722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003726:	3301      	adds	r3, #1
 8003728:	d003      	beq.n	8003732 <_fwalk_reent+0x3a>
 800372a:	4629      	mov	r1, r5
 800372c:	4630      	mov	r0, r6
 800372e:	47c0      	blx	r8
 8003730:	4307      	orrs	r7, r0
 8003732:	3568      	adds	r5, #104	; 0x68
 8003734:	e7e9      	b.n	800370a <_fwalk_reent+0x12>

08003736 <__retarget_lock_init_recursive>:
 8003736:	4770      	bx	lr

08003738 <__retarget_lock_acquire_recursive>:
 8003738:	4770      	bx	lr

0800373a <__retarget_lock_release_recursive>:
 800373a:	4770      	bx	lr

0800373c <__swhatbuf_r>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	460e      	mov	r6, r1
 8003740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003744:	4614      	mov	r4, r2
 8003746:	2900      	cmp	r1, #0
 8003748:	461d      	mov	r5, r3
 800374a:	b096      	sub	sp, #88	; 0x58
 800374c:	da08      	bge.n	8003760 <__swhatbuf_r+0x24>
 800374e:	2200      	movs	r2, #0
 8003750:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003754:	602a      	str	r2, [r5, #0]
 8003756:	061a      	lsls	r2, r3, #24
 8003758:	d410      	bmi.n	800377c <__swhatbuf_r+0x40>
 800375a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375e:	e00e      	b.n	800377e <__swhatbuf_r+0x42>
 8003760:	466a      	mov	r2, sp
 8003762:	f000 fc91 	bl	8004088 <_fstat_r>
 8003766:	2800      	cmp	r0, #0
 8003768:	dbf1      	blt.n	800374e <__swhatbuf_r+0x12>
 800376a:	9a01      	ldr	r2, [sp, #4]
 800376c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003774:	425a      	negs	r2, r3
 8003776:	415a      	adcs	r2, r3
 8003778:	602a      	str	r2, [r5, #0]
 800377a:	e7ee      	b.n	800375a <__swhatbuf_r+0x1e>
 800377c:	2340      	movs	r3, #64	; 0x40
 800377e:	2000      	movs	r0, #0
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	b016      	add	sp, #88	; 0x58
 8003784:	bd70      	pop	{r4, r5, r6, pc}
	...

08003788 <__smakebuf_r>:
 8003788:	898b      	ldrh	r3, [r1, #12]
 800378a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800378c:	079d      	lsls	r5, r3, #30
 800378e:	4606      	mov	r6, r0
 8003790:	460c      	mov	r4, r1
 8003792:	d507      	bpl.n	80037a4 <__smakebuf_r+0x1c>
 8003794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	6123      	str	r3, [r4, #16]
 800379c:	2301      	movs	r3, #1
 800379e:	6163      	str	r3, [r4, #20]
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	466a      	mov	r2, sp
 80037a6:	ab01      	add	r3, sp, #4
 80037a8:	f7ff ffc8 	bl	800373c <__swhatbuf_r>
 80037ac:	9900      	ldr	r1, [sp, #0]
 80037ae:	4605      	mov	r5, r0
 80037b0:	4630      	mov	r0, r6
 80037b2:	f000 f891 	bl	80038d8 <_malloc_r>
 80037b6:	b948      	cbnz	r0, 80037cc <__smakebuf_r+0x44>
 80037b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037bc:	059a      	lsls	r2, r3, #22
 80037be:	d4ef      	bmi.n	80037a0 <__smakebuf_r+0x18>
 80037c0:	f023 0303 	bic.w	r3, r3, #3
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	e7e3      	b.n	8003794 <__smakebuf_r+0xc>
 80037cc:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <__smakebuf_r+0x7c>)
 80037ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	6020      	str	r0, [r4, #0]
 80037d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d8:	81a3      	strh	r3, [r4, #12]
 80037da:	9b00      	ldr	r3, [sp, #0]
 80037dc:	6120      	str	r0, [r4, #16]
 80037de:	6163      	str	r3, [r4, #20]
 80037e0:	9b01      	ldr	r3, [sp, #4]
 80037e2:	b15b      	cbz	r3, 80037fc <__smakebuf_r+0x74>
 80037e4:	4630      	mov	r0, r6
 80037e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ea:	f000 fc5f 	bl	80040ac <_isatty_r>
 80037ee:	b128      	cbz	r0, 80037fc <__smakebuf_r+0x74>
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	89a0      	ldrh	r0, [r4, #12]
 80037fe:	4305      	orrs	r5, r0
 8003800:	81a5      	strh	r5, [r4, #12]
 8003802:	e7cd      	b.n	80037a0 <__smakebuf_r+0x18>
 8003804:	08003595 	.word	0x08003595

08003808 <_free_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4605      	mov	r5, r0
 800380c:	2900      	cmp	r1, #0
 800380e:	d040      	beq.n	8003892 <_free_r+0x8a>
 8003810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003814:	1f0c      	subs	r4, r1, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfb8      	it	lt
 800381a:	18e4      	addlt	r4, r4, r3
 800381c:	f000 fc76 	bl	800410c <__malloc_lock>
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <_free_r+0x8c>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	b933      	cbnz	r3, 8003834 <_free_r+0x2c>
 8003826:	6063      	str	r3, [r4, #4]
 8003828:	6014      	str	r4, [r2, #0]
 800382a:	4628      	mov	r0, r5
 800382c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003830:	f000 bc72 	b.w	8004118 <__malloc_unlock>
 8003834:	42a3      	cmp	r3, r4
 8003836:	d908      	bls.n	800384a <_free_r+0x42>
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	1821      	adds	r1, r4, r0
 800383c:	428b      	cmp	r3, r1
 800383e:	bf01      	itttt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	1809      	addeq	r1, r1, r0
 8003846:	6021      	streq	r1, [r4, #0]
 8003848:	e7ed      	b.n	8003826 <_free_r+0x1e>
 800384a:	461a      	mov	r2, r3
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	b10b      	cbz	r3, 8003854 <_free_r+0x4c>
 8003850:	42a3      	cmp	r3, r4
 8003852:	d9fa      	bls.n	800384a <_free_r+0x42>
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	1850      	adds	r0, r2, r1
 8003858:	42a0      	cmp	r0, r4
 800385a:	d10b      	bne.n	8003874 <_free_r+0x6c>
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	4401      	add	r1, r0
 8003860:	1850      	adds	r0, r2, r1
 8003862:	4283      	cmp	r3, r0
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	d1e0      	bne.n	800382a <_free_r+0x22>
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4401      	add	r1, r0
 800386e:	6011      	str	r1, [r2, #0]
 8003870:	6053      	str	r3, [r2, #4]
 8003872:	e7da      	b.n	800382a <_free_r+0x22>
 8003874:	d902      	bls.n	800387c <_free_r+0x74>
 8003876:	230c      	movs	r3, #12
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	e7d6      	b.n	800382a <_free_r+0x22>
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	1821      	adds	r1, r4, r0
 8003880:	428b      	cmp	r3, r1
 8003882:	bf01      	itttt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	1809      	addeq	r1, r1, r0
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	6054      	str	r4, [r2, #4]
 8003890:	e7cb      	b.n	800382a <_free_r+0x22>
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	200001dc 	.word	0x200001dc

08003898 <sbrk_aligned>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4e0e      	ldr	r6, [pc, #56]	; (80038d4 <sbrk_aligned+0x3c>)
 800389c:	460c      	mov	r4, r1
 800389e:	6831      	ldr	r1, [r6, #0]
 80038a0:	4605      	mov	r5, r0
 80038a2:	b911      	cbnz	r1, 80038aa <sbrk_aligned+0x12>
 80038a4:	f000 fb7a 	bl	8003f9c <_sbrk_r>
 80038a8:	6030      	str	r0, [r6, #0]
 80038aa:	4621      	mov	r1, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 fb75 	bl	8003f9c <_sbrk_r>
 80038b2:	1c43      	adds	r3, r0, #1
 80038b4:	d00a      	beq.n	80038cc <sbrk_aligned+0x34>
 80038b6:	1cc4      	adds	r4, r0, #3
 80038b8:	f024 0403 	bic.w	r4, r4, #3
 80038bc:	42a0      	cmp	r0, r4
 80038be:	d007      	beq.n	80038d0 <sbrk_aligned+0x38>
 80038c0:	1a21      	subs	r1, r4, r0
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 fb6a 	bl	8003f9c <_sbrk_r>
 80038c8:	3001      	adds	r0, #1
 80038ca:	d101      	bne.n	80038d0 <sbrk_aligned+0x38>
 80038cc:	f04f 34ff 	mov.w	r4, #4294967295
 80038d0:	4620      	mov	r0, r4
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	200001e0 	.word	0x200001e0

080038d8 <_malloc_r>:
 80038d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038dc:	1ccd      	adds	r5, r1, #3
 80038de:	f025 0503 	bic.w	r5, r5, #3
 80038e2:	3508      	adds	r5, #8
 80038e4:	2d0c      	cmp	r5, #12
 80038e6:	bf38      	it	cc
 80038e8:	250c      	movcc	r5, #12
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	4607      	mov	r7, r0
 80038ee:	db01      	blt.n	80038f4 <_malloc_r+0x1c>
 80038f0:	42a9      	cmp	r1, r5
 80038f2:	d905      	bls.n	8003900 <_malloc_r+0x28>
 80038f4:	230c      	movs	r3, #12
 80038f6:	2600      	movs	r6, #0
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4630      	mov	r0, r6
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003900:	4e2e      	ldr	r6, [pc, #184]	; (80039bc <_malloc_r+0xe4>)
 8003902:	f000 fc03 	bl	800410c <__malloc_lock>
 8003906:	6833      	ldr	r3, [r6, #0]
 8003908:	461c      	mov	r4, r3
 800390a:	bb34      	cbnz	r4, 800395a <_malloc_r+0x82>
 800390c:	4629      	mov	r1, r5
 800390e:	4638      	mov	r0, r7
 8003910:	f7ff ffc2 	bl	8003898 <sbrk_aligned>
 8003914:	1c43      	adds	r3, r0, #1
 8003916:	4604      	mov	r4, r0
 8003918:	d14d      	bne.n	80039b6 <_malloc_r+0xde>
 800391a:	6834      	ldr	r4, [r6, #0]
 800391c:	4626      	mov	r6, r4
 800391e:	2e00      	cmp	r6, #0
 8003920:	d140      	bne.n	80039a4 <_malloc_r+0xcc>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	4631      	mov	r1, r6
 8003926:	4638      	mov	r0, r7
 8003928:	eb04 0803 	add.w	r8, r4, r3
 800392c:	f000 fb36 	bl	8003f9c <_sbrk_r>
 8003930:	4580      	cmp	r8, r0
 8003932:	d13a      	bne.n	80039aa <_malloc_r+0xd2>
 8003934:	6821      	ldr	r1, [r4, #0]
 8003936:	3503      	adds	r5, #3
 8003938:	1a6d      	subs	r5, r5, r1
 800393a:	f025 0503 	bic.w	r5, r5, #3
 800393e:	3508      	adds	r5, #8
 8003940:	2d0c      	cmp	r5, #12
 8003942:	bf38      	it	cc
 8003944:	250c      	movcc	r5, #12
 8003946:	4638      	mov	r0, r7
 8003948:	4629      	mov	r1, r5
 800394a:	f7ff ffa5 	bl	8003898 <sbrk_aligned>
 800394e:	3001      	adds	r0, #1
 8003950:	d02b      	beq.n	80039aa <_malloc_r+0xd2>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	442b      	add	r3, r5
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e00e      	b.n	8003978 <_malloc_r+0xa0>
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	1b52      	subs	r2, r2, r5
 800395e:	d41e      	bmi.n	800399e <_malloc_r+0xc6>
 8003960:	2a0b      	cmp	r2, #11
 8003962:	d916      	bls.n	8003992 <_malloc_r+0xba>
 8003964:	1961      	adds	r1, r4, r5
 8003966:	42a3      	cmp	r3, r4
 8003968:	6025      	str	r5, [r4, #0]
 800396a:	bf18      	it	ne
 800396c:	6059      	strne	r1, [r3, #4]
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	bf08      	it	eq
 8003972:	6031      	streq	r1, [r6, #0]
 8003974:	5162      	str	r2, [r4, r5]
 8003976:	604b      	str	r3, [r1, #4]
 8003978:	4638      	mov	r0, r7
 800397a:	f104 060b 	add.w	r6, r4, #11
 800397e:	f000 fbcb 	bl	8004118 <__malloc_unlock>
 8003982:	f026 0607 	bic.w	r6, r6, #7
 8003986:	1d23      	adds	r3, r4, #4
 8003988:	1af2      	subs	r2, r6, r3
 800398a:	d0b6      	beq.n	80038fa <_malloc_r+0x22>
 800398c:	1b9b      	subs	r3, r3, r6
 800398e:	50a3      	str	r3, [r4, r2]
 8003990:	e7b3      	b.n	80038fa <_malloc_r+0x22>
 8003992:	6862      	ldr	r2, [r4, #4]
 8003994:	42a3      	cmp	r3, r4
 8003996:	bf0c      	ite	eq
 8003998:	6032      	streq	r2, [r6, #0]
 800399a:	605a      	strne	r2, [r3, #4]
 800399c:	e7ec      	b.n	8003978 <_malloc_r+0xa0>
 800399e:	4623      	mov	r3, r4
 80039a0:	6864      	ldr	r4, [r4, #4]
 80039a2:	e7b2      	b.n	800390a <_malloc_r+0x32>
 80039a4:	4634      	mov	r4, r6
 80039a6:	6876      	ldr	r6, [r6, #4]
 80039a8:	e7b9      	b.n	800391e <_malloc_r+0x46>
 80039aa:	230c      	movs	r3, #12
 80039ac:	4638      	mov	r0, r7
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	f000 fbb2 	bl	8004118 <__malloc_unlock>
 80039b4:	e7a1      	b.n	80038fa <_malloc_r+0x22>
 80039b6:	6025      	str	r5, [r4, #0]
 80039b8:	e7de      	b.n	8003978 <_malloc_r+0xa0>
 80039ba:	bf00      	nop
 80039bc:	200001dc 	.word	0x200001dc

080039c0 <__sfputc_r>:
 80039c0:	6893      	ldr	r3, [r2, #8]
 80039c2:	b410      	push	{r4}
 80039c4:	3b01      	subs	r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	6093      	str	r3, [r2, #8]
 80039ca:	da07      	bge.n	80039dc <__sfputc_r+0x1c>
 80039cc:	6994      	ldr	r4, [r2, #24]
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	db01      	blt.n	80039d6 <__sfputc_r+0x16>
 80039d2:	290a      	cmp	r1, #10
 80039d4:	d102      	bne.n	80039dc <__sfputc_r+0x1c>
 80039d6:	bc10      	pop	{r4}
 80039d8:	f7ff bc3a 	b.w	8003250 <__swbuf_r>
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	1c58      	adds	r0, r3, #1
 80039e0:	6010      	str	r0, [r2, #0]
 80039e2:	7019      	strb	r1, [r3, #0]
 80039e4:	4608      	mov	r0, r1
 80039e6:	bc10      	pop	{r4}
 80039e8:	4770      	bx	lr

080039ea <__sfputs_r>:
 80039ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ec:	4606      	mov	r6, r0
 80039ee:	460f      	mov	r7, r1
 80039f0:	4614      	mov	r4, r2
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	42ac      	cmp	r4, r5
 80039f6:	d101      	bne.n	80039fc <__sfputs_r+0x12>
 80039f8:	2000      	movs	r0, #0
 80039fa:	e007      	b.n	8003a0c <__sfputs_r+0x22>
 80039fc:	463a      	mov	r2, r7
 80039fe:	4630      	mov	r0, r6
 8003a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a04:	f7ff ffdc 	bl	80039c0 <__sfputc_r>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d1f3      	bne.n	80039f4 <__sfputs_r+0xa>
 8003a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a10 <_vfiprintf_r>:
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	460d      	mov	r5, r1
 8003a16:	4614      	mov	r4, r2
 8003a18:	4698      	mov	r8, r3
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	b09d      	sub	sp, #116	; 0x74
 8003a1e:	b118      	cbz	r0, 8003a28 <_vfiprintf_r+0x18>
 8003a20:	6983      	ldr	r3, [r0, #24]
 8003a22:	b90b      	cbnz	r3, 8003a28 <_vfiprintf_r+0x18>
 8003a24:	f7ff fdea 	bl	80035fc <__sinit>
 8003a28:	4b89      	ldr	r3, [pc, #548]	; (8003c50 <_vfiprintf_r+0x240>)
 8003a2a:	429d      	cmp	r5, r3
 8003a2c:	d11b      	bne.n	8003a66 <_vfiprintf_r+0x56>
 8003a2e:	6875      	ldr	r5, [r6, #4]
 8003a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a32:	07d9      	lsls	r1, r3, #31
 8003a34:	d405      	bmi.n	8003a42 <_vfiprintf_r+0x32>
 8003a36:	89ab      	ldrh	r3, [r5, #12]
 8003a38:	059a      	lsls	r2, r3, #22
 8003a3a:	d402      	bmi.n	8003a42 <_vfiprintf_r+0x32>
 8003a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a3e:	f7ff fe7b 	bl	8003738 <__retarget_lock_acquire_recursive>
 8003a42:	89ab      	ldrh	r3, [r5, #12]
 8003a44:	071b      	lsls	r3, r3, #28
 8003a46:	d501      	bpl.n	8003a4c <_vfiprintf_r+0x3c>
 8003a48:	692b      	ldr	r3, [r5, #16]
 8003a4a:	b9eb      	cbnz	r3, 8003a88 <_vfiprintf_r+0x78>
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f7ff fc50 	bl	80032f4 <__swsetup_r>
 8003a54:	b1c0      	cbz	r0, 8003a88 <_vfiprintf_r+0x78>
 8003a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a58:	07dc      	lsls	r4, r3, #31
 8003a5a:	d50e      	bpl.n	8003a7a <_vfiprintf_r+0x6a>
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	b01d      	add	sp, #116	; 0x74
 8003a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a66:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <_vfiprintf_r+0x244>)
 8003a68:	429d      	cmp	r5, r3
 8003a6a:	d101      	bne.n	8003a70 <_vfiprintf_r+0x60>
 8003a6c:	68b5      	ldr	r5, [r6, #8]
 8003a6e:	e7df      	b.n	8003a30 <_vfiprintf_r+0x20>
 8003a70:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <_vfiprintf_r+0x248>)
 8003a72:	429d      	cmp	r5, r3
 8003a74:	bf08      	it	eq
 8003a76:	68f5      	ldreq	r5, [r6, #12]
 8003a78:	e7da      	b.n	8003a30 <_vfiprintf_r+0x20>
 8003a7a:	89ab      	ldrh	r3, [r5, #12]
 8003a7c:	0598      	lsls	r0, r3, #22
 8003a7e:	d4ed      	bmi.n	8003a5c <_vfiprintf_r+0x4c>
 8003a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a82:	f7ff fe5a 	bl	800373a <__retarget_lock_release_recursive>
 8003a86:	e7e9      	b.n	8003a5c <_vfiprintf_r+0x4c>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a92:	2330      	movs	r3, #48	; 0x30
 8003a94:	f04f 0901 	mov.w	r9, #1
 8003a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003c5c <_vfiprintf_r+0x24c>
 8003aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	469a      	mov	sl, r3
 8003aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aac:	b10a      	cbz	r2, 8003ab2 <_vfiprintf_r+0xa2>
 8003aae:	2a25      	cmp	r2, #37	; 0x25
 8003ab0:	d1f9      	bne.n	8003aa6 <_vfiprintf_r+0x96>
 8003ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab6:	d00b      	beq.n	8003ad0 <_vfiprintf_r+0xc0>
 8003ab8:	465b      	mov	r3, fp
 8003aba:	4622      	mov	r2, r4
 8003abc:	4629      	mov	r1, r5
 8003abe:	4630      	mov	r0, r6
 8003ac0:	f7ff ff93 	bl	80039ea <__sfputs_r>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	f000 80aa 	beq.w	8003c1e <_vfiprintf_r+0x20e>
 8003aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003acc:	445a      	add	r2, fp
 8003ace:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a2 	beq.w	8003c1e <_vfiprintf_r+0x20e>
 8003ada:	2300      	movs	r3, #0
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae4:	f10a 0a01 	add.w	sl, sl, #1
 8003ae8:	9304      	str	r3, [sp, #16]
 8003aea:	9307      	str	r3, [sp, #28]
 8003aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003af0:	931a      	str	r3, [sp, #104]	; 0x68
 8003af2:	4654      	mov	r4, sl
 8003af4:	2205      	movs	r2, #5
 8003af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afa:	4858      	ldr	r0, [pc, #352]	; (8003c5c <_vfiprintf_r+0x24c>)
 8003afc:	f000 faf8 	bl	80040f0 <memchr>
 8003b00:	9a04      	ldr	r2, [sp, #16]
 8003b02:	b9d8      	cbnz	r0, 8003b3c <_vfiprintf_r+0x12c>
 8003b04:	06d1      	lsls	r1, r2, #27
 8003b06:	bf44      	itt	mi
 8003b08:	2320      	movmi	r3, #32
 8003b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b0e:	0713      	lsls	r3, r2, #28
 8003b10:	bf44      	itt	mi
 8003b12:	232b      	movmi	r3, #43	; 0x2b
 8003b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b18:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1e:	d015      	beq.n	8003b4c <_vfiprintf_r+0x13c>
 8003b20:	4654      	mov	r4, sl
 8003b22:	2000      	movs	r0, #0
 8003b24:	f04f 0c0a 	mov.w	ip, #10
 8003b28:	9a07      	ldr	r2, [sp, #28]
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b30:	3b30      	subs	r3, #48	; 0x30
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	d94e      	bls.n	8003bd4 <_vfiprintf_r+0x1c4>
 8003b36:	b1b0      	cbz	r0, 8003b66 <_vfiprintf_r+0x156>
 8003b38:	9207      	str	r2, [sp, #28]
 8003b3a:	e014      	b.n	8003b66 <_vfiprintf_r+0x156>
 8003b3c:	eba0 0308 	sub.w	r3, r0, r8
 8003b40:	fa09 f303 	lsl.w	r3, r9, r3
 8003b44:	4313      	orrs	r3, r2
 8003b46:	46a2      	mov	sl, r4
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	e7d2      	b.n	8003af2 <_vfiprintf_r+0xe2>
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	1d19      	adds	r1, r3, #4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	9103      	str	r1, [sp, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bfbb      	ittet	lt
 8003b58:	425b      	neglt	r3, r3
 8003b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b5e:	9307      	strge	r3, [sp, #28]
 8003b60:	9307      	strlt	r3, [sp, #28]
 8003b62:	bfb8      	it	lt
 8003b64:	9204      	strlt	r2, [sp, #16]
 8003b66:	7823      	ldrb	r3, [r4, #0]
 8003b68:	2b2e      	cmp	r3, #46	; 0x2e
 8003b6a:	d10c      	bne.n	8003b86 <_vfiprintf_r+0x176>
 8003b6c:	7863      	ldrb	r3, [r4, #1]
 8003b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b70:	d135      	bne.n	8003bde <_vfiprintf_r+0x1ce>
 8003b72:	9b03      	ldr	r3, [sp, #12]
 8003b74:	3402      	adds	r4, #2
 8003b76:	1d1a      	adds	r2, r3, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	9203      	str	r2, [sp, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfb8      	it	lt
 8003b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003c60 <_vfiprintf_r+0x250>
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	7821      	ldrb	r1, [r4, #0]
 8003b90:	f000 faae 	bl	80040f0 <memchr>
 8003b94:	b140      	cbz	r0, 8003ba8 <_vfiprintf_r+0x198>
 8003b96:	2340      	movs	r3, #64	; 0x40
 8003b98:	eba0 000a 	sub.w	r0, r0, sl
 8003b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8003ba0:	9b04      	ldr	r3, [sp, #16]
 8003ba2:	3401      	adds	r4, #1
 8003ba4:	4303      	orrs	r3, r0
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bac:	2206      	movs	r2, #6
 8003bae:	482d      	ldr	r0, [pc, #180]	; (8003c64 <_vfiprintf_r+0x254>)
 8003bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bb4:	f000 fa9c 	bl	80040f0 <memchr>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d03f      	beq.n	8003c3c <_vfiprintf_r+0x22c>
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <_vfiprintf_r+0x258>)
 8003bbe:	bb1b      	cbnz	r3, 8003c08 <_vfiprintf_r+0x1f8>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	3307      	adds	r3, #7
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	3308      	adds	r3, #8
 8003bca:	9303      	str	r3, [sp, #12]
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bce:	443b      	add	r3, r7
 8003bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd2:	e767      	b.n	8003aa4 <_vfiprintf_r+0x94>
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bdc:	e7a5      	b.n	8003b2a <_vfiprintf_r+0x11a>
 8003bde:	2300      	movs	r3, #0
 8003be0:	f04f 0c0a 	mov.w	ip, #10
 8003be4:	4619      	mov	r1, r3
 8003be6:	3401      	adds	r4, #1
 8003be8:	9305      	str	r3, [sp, #20]
 8003bea:	4620      	mov	r0, r4
 8003bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf0:	3a30      	subs	r2, #48	; 0x30
 8003bf2:	2a09      	cmp	r2, #9
 8003bf4:	d903      	bls.n	8003bfe <_vfiprintf_r+0x1ee>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0c5      	beq.n	8003b86 <_vfiprintf_r+0x176>
 8003bfa:	9105      	str	r1, [sp, #20]
 8003bfc:	e7c3      	b.n	8003b86 <_vfiprintf_r+0x176>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	2301      	movs	r3, #1
 8003c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c06:	e7f0      	b.n	8003bea <_vfiprintf_r+0x1da>
 8003c08:	ab03      	add	r3, sp, #12
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	4630      	mov	r0, r6
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <_vfiprintf_r+0x25c>)
 8003c12:	a904      	add	r1, sp, #16
 8003c14:	f3af 8000 	nop.w
 8003c18:	4607      	mov	r7, r0
 8003c1a:	1c78      	adds	r0, r7, #1
 8003c1c:	d1d6      	bne.n	8003bcc <_vfiprintf_r+0x1bc>
 8003c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c20:	07d9      	lsls	r1, r3, #31
 8003c22:	d405      	bmi.n	8003c30 <_vfiprintf_r+0x220>
 8003c24:	89ab      	ldrh	r3, [r5, #12]
 8003c26:	059a      	lsls	r2, r3, #22
 8003c28:	d402      	bmi.n	8003c30 <_vfiprintf_r+0x220>
 8003c2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c2c:	f7ff fd85 	bl	800373a <__retarget_lock_release_recursive>
 8003c30:	89ab      	ldrh	r3, [r5, #12]
 8003c32:	065b      	lsls	r3, r3, #25
 8003c34:	f53f af12 	bmi.w	8003a5c <_vfiprintf_r+0x4c>
 8003c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c3a:	e711      	b.n	8003a60 <_vfiprintf_r+0x50>
 8003c3c:	ab03      	add	r3, sp, #12
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	462a      	mov	r2, r5
 8003c42:	4630      	mov	r0, r6
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <_vfiprintf_r+0x25c>)
 8003c46:	a904      	add	r1, sp, #16
 8003c48:	f000 f882 	bl	8003d50 <_printf_i>
 8003c4c:	e7e4      	b.n	8003c18 <_vfiprintf_r+0x208>
 8003c4e:	bf00      	nop
 8003c50:	08004210 	.word	0x08004210
 8003c54:	08004230 	.word	0x08004230
 8003c58:	080041f0 	.word	0x080041f0
 8003c5c:	08004250 	.word	0x08004250
 8003c60:	08004256 	.word	0x08004256
 8003c64:	0800425a 	.word	0x0800425a
 8003c68:	00000000 	.word	0x00000000
 8003c6c:	080039eb 	.word	0x080039eb

08003c70 <_printf_common>:
 8003c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	4616      	mov	r6, r2
 8003c76:	4699      	mov	r9, r3
 8003c78:	688a      	ldr	r2, [r1, #8]
 8003c7a:	690b      	ldr	r3, [r1, #16]
 8003c7c:	4607      	mov	r7, r0
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	bfb8      	it	lt
 8003c82:	4613      	movlt	r3, r2
 8003c84:	6033      	str	r3, [r6, #0]
 8003c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c90:	b10a      	cbz	r2, 8003c96 <_printf_common+0x26>
 8003c92:	3301      	adds	r3, #1
 8003c94:	6033      	str	r3, [r6, #0]
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	0699      	lsls	r1, r3, #26
 8003c9a:	bf42      	ittt	mi
 8003c9c:	6833      	ldrmi	r3, [r6, #0]
 8003c9e:	3302      	addmi	r3, #2
 8003ca0:	6033      	strmi	r3, [r6, #0]
 8003ca2:	6825      	ldr	r5, [r4, #0]
 8003ca4:	f015 0506 	ands.w	r5, r5, #6
 8003ca8:	d106      	bne.n	8003cb8 <_printf_common+0x48>
 8003caa:	f104 0a19 	add.w	sl, r4, #25
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	6832      	ldr	r2, [r6, #0]
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	42ab      	cmp	r3, r5
 8003cb6:	dc28      	bgt.n	8003d0a <_printf_common+0x9a>
 8003cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cbc:	1e13      	subs	r3, r2, #0
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	bf18      	it	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	0692      	lsls	r2, r2, #26
 8003cc6:	d42d      	bmi.n	8003d24 <_printf_common+0xb4>
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cd0:	47c0      	blx	r8
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d020      	beq.n	8003d18 <_printf_common+0xa8>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	68e5      	ldr	r5, [r4, #12]
 8003cda:	f003 0306 	and.w	r3, r3, #6
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	bf18      	it	ne
 8003ce2:	2500      	movne	r5, #0
 8003ce4:	6832      	ldr	r2, [r6, #0]
 8003ce6:	f04f 0600 	mov.w	r6, #0
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	bf08      	it	eq
 8003cee:	1aad      	subeq	r5, r5, r2
 8003cf0:	6922      	ldr	r2, [r4, #16]
 8003cf2:	bf08      	it	eq
 8003cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bfc4      	itt	gt
 8003cfc:	1a9b      	subgt	r3, r3, r2
 8003cfe:	18ed      	addgt	r5, r5, r3
 8003d00:	341a      	adds	r4, #26
 8003d02:	42b5      	cmp	r5, r6
 8003d04:	d11a      	bne.n	8003d3c <_printf_common+0xcc>
 8003d06:	2000      	movs	r0, #0
 8003d08:	e008      	b.n	8003d1c <_printf_common+0xac>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	4652      	mov	r2, sl
 8003d0e:	4649      	mov	r1, r9
 8003d10:	4638      	mov	r0, r7
 8003d12:	47c0      	blx	r8
 8003d14:	3001      	adds	r0, #1
 8003d16:	d103      	bne.n	8003d20 <_printf_common+0xb0>
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d20:	3501      	adds	r5, #1
 8003d22:	e7c4      	b.n	8003cae <_printf_common+0x3e>
 8003d24:	2030      	movs	r0, #48	; 0x30
 8003d26:	18e1      	adds	r1, r4, r3
 8003d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d32:	4422      	add	r2, r4
 8003d34:	3302      	adds	r3, #2
 8003d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d3a:	e7c5      	b.n	8003cc8 <_printf_common+0x58>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	4622      	mov	r2, r4
 8003d40:	4649      	mov	r1, r9
 8003d42:	4638      	mov	r0, r7
 8003d44:	47c0      	blx	r8
 8003d46:	3001      	adds	r0, #1
 8003d48:	d0e6      	beq.n	8003d18 <_printf_common+0xa8>
 8003d4a:	3601      	adds	r6, #1
 8003d4c:	e7d9      	b.n	8003d02 <_printf_common+0x92>
	...

08003d50 <_printf_i>:
 8003d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d54:	7e0f      	ldrb	r7, [r1, #24]
 8003d56:	4691      	mov	r9, r2
 8003d58:	2f78      	cmp	r7, #120	; 0x78
 8003d5a:	4680      	mov	r8, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	469a      	mov	sl, r3
 8003d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d66:	d807      	bhi.n	8003d78 <_printf_i+0x28>
 8003d68:	2f62      	cmp	r7, #98	; 0x62
 8003d6a:	d80a      	bhi.n	8003d82 <_printf_i+0x32>
 8003d6c:	2f00      	cmp	r7, #0
 8003d6e:	f000 80d9 	beq.w	8003f24 <_printf_i+0x1d4>
 8003d72:	2f58      	cmp	r7, #88	; 0x58
 8003d74:	f000 80a4 	beq.w	8003ec0 <_printf_i+0x170>
 8003d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d80:	e03a      	b.n	8003df8 <_printf_i+0xa8>
 8003d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d86:	2b15      	cmp	r3, #21
 8003d88:	d8f6      	bhi.n	8003d78 <_printf_i+0x28>
 8003d8a:	a101      	add	r1, pc, #4	; (adr r1, 8003d90 <_printf_i+0x40>)
 8003d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d90:	08003de9 	.word	0x08003de9
 8003d94:	08003dfd 	.word	0x08003dfd
 8003d98:	08003d79 	.word	0x08003d79
 8003d9c:	08003d79 	.word	0x08003d79
 8003da0:	08003d79 	.word	0x08003d79
 8003da4:	08003d79 	.word	0x08003d79
 8003da8:	08003dfd 	.word	0x08003dfd
 8003dac:	08003d79 	.word	0x08003d79
 8003db0:	08003d79 	.word	0x08003d79
 8003db4:	08003d79 	.word	0x08003d79
 8003db8:	08003d79 	.word	0x08003d79
 8003dbc:	08003f0b 	.word	0x08003f0b
 8003dc0:	08003e2d 	.word	0x08003e2d
 8003dc4:	08003eed 	.word	0x08003eed
 8003dc8:	08003d79 	.word	0x08003d79
 8003dcc:	08003d79 	.word	0x08003d79
 8003dd0:	08003f2d 	.word	0x08003f2d
 8003dd4:	08003d79 	.word	0x08003d79
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003d79 	.word	0x08003d79
 8003de0:	08003d79 	.word	0x08003d79
 8003de4:	08003ef5 	.word	0x08003ef5
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	602a      	str	r2, [r5, #0]
 8003df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0a4      	b.n	8003f46 <_printf_i+0x1f6>
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	6829      	ldr	r1, [r5, #0]
 8003e00:	0606      	lsls	r6, r0, #24
 8003e02:	f101 0304 	add.w	r3, r1, #4
 8003e06:	d50a      	bpl.n	8003e1e <_printf_i+0xce>
 8003e08:	680e      	ldr	r6, [r1, #0]
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	2e00      	cmp	r6, #0
 8003e0e:	da03      	bge.n	8003e18 <_printf_i+0xc8>
 8003e10:	232d      	movs	r3, #45	; 0x2d
 8003e12:	4276      	negs	r6, r6
 8003e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e18:	230a      	movs	r3, #10
 8003e1a:	485e      	ldr	r0, [pc, #376]	; (8003f94 <_printf_i+0x244>)
 8003e1c:	e019      	b.n	8003e52 <_printf_i+0x102>
 8003e1e:	680e      	ldr	r6, [r1, #0]
 8003e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e24:	602b      	str	r3, [r5, #0]
 8003e26:	bf18      	it	ne
 8003e28:	b236      	sxthne	r6, r6
 8003e2a:	e7ef      	b.n	8003e0c <_printf_i+0xbc>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	1d19      	adds	r1, r3, #4
 8003e32:	6029      	str	r1, [r5, #0]
 8003e34:	0601      	lsls	r1, r0, #24
 8003e36:	d501      	bpl.n	8003e3c <_printf_i+0xec>
 8003e38:	681e      	ldr	r6, [r3, #0]
 8003e3a:	e002      	b.n	8003e42 <_printf_i+0xf2>
 8003e3c:	0646      	lsls	r6, r0, #25
 8003e3e:	d5fb      	bpl.n	8003e38 <_printf_i+0xe8>
 8003e40:	881e      	ldrh	r6, [r3, #0]
 8003e42:	2f6f      	cmp	r7, #111	; 0x6f
 8003e44:	bf0c      	ite	eq
 8003e46:	2308      	moveq	r3, #8
 8003e48:	230a      	movne	r3, #10
 8003e4a:	4852      	ldr	r0, [pc, #328]	; (8003f94 <_printf_i+0x244>)
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e52:	6865      	ldr	r5, [r4, #4]
 8003e54:	2d00      	cmp	r5, #0
 8003e56:	bfa8      	it	ge
 8003e58:	6821      	ldrge	r1, [r4, #0]
 8003e5a:	60a5      	str	r5, [r4, #8]
 8003e5c:	bfa4      	itt	ge
 8003e5e:	f021 0104 	bicge.w	r1, r1, #4
 8003e62:	6021      	strge	r1, [r4, #0]
 8003e64:	b90e      	cbnz	r6, 8003e6a <_printf_i+0x11a>
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	d04d      	beq.n	8003f06 <_printf_i+0x1b6>
 8003e6a:	4615      	mov	r5, r2
 8003e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e70:	fb03 6711 	mls	r7, r3, r1, r6
 8003e74:	5dc7      	ldrb	r7, [r0, r7]
 8003e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e7a:	4637      	mov	r7, r6
 8003e7c:	42bb      	cmp	r3, r7
 8003e7e:	460e      	mov	r6, r1
 8003e80:	d9f4      	bls.n	8003e6c <_printf_i+0x11c>
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d10b      	bne.n	8003e9e <_printf_i+0x14e>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	07de      	lsls	r6, r3, #31
 8003e8a:	d508      	bpl.n	8003e9e <_printf_i+0x14e>
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	6861      	ldr	r1, [r4, #4]
 8003e90:	4299      	cmp	r1, r3
 8003e92:	bfde      	ittt	le
 8003e94:	2330      	movle	r3, #48	; 0x30
 8003e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e9e:	1b52      	subs	r2, r2, r5
 8003ea0:	6122      	str	r2, [r4, #16]
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	f8cd a000 	str.w	sl, [sp]
 8003eac:	aa03      	add	r2, sp, #12
 8003eae:	f7ff fedf 	bl	8003c70 <_printf_common>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d14c      	bne.n	8003f50 <_printf_i+0x200>
 8003eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eba:	b004      	add	sp, #16
 8003ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec0:	4834      	ldr	r0, [pc, #208]	; (8003f94 <_printf_i+0x244>)
 8003ec2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ec6:	6829      	ldr	r1, [r5, #0]
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ece:	6029      	str	r1, [r5, #0]
 8003ed0:	061d      	lsls	r5, r3, #24
 8003ed2:	d514      	bpl.n	8003efe <_printf_i+0x1ae>
 8003ed4:	07df      	lsls	r7, r3, #31
 8003ed6:	bf44      	itt	mi
 8003ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8003edc:	6023      	strmi	r3, [r4, #0]
 8003ede:	b91e      	cbnz	r6, 8003ee8 <_printf_i+0x198>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	f023 0320 	bic.w	r3, r3, #32
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	2310      	movs	r3, #16
 8003eea:	e7af      	b.n	8003e4c <_printf_i+0xfc>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	f043 0320 	orr.w	r3, r3, #32
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	2378      	movs	r3, #120	; 0x78
 8003ef6:	4828      	ldr	r0, [pc, #160]	; (8003f98 <_printf_i+0x248>)
 8003ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003efc:	e7e3      	b.n	8003ec6 <_printf_i+0x176>
 8003efe:	0659      	lsls	r1, r3, #25
 8003f00:	bf48      	it	mi
 8003f02:	b2b6      	uxthmi	r6, r6
 8003f04:	e7e6      	b.n	8003ed4 <_printf_i+0x184>
 8003f06:	4615      	mov	r5, r2
 8003f08:	e7bb      	b.n	8003e82 <_printf_i+0x132>
 8003f0a:	682b      	ldr	r3, [r5, #0]
 8003f0c:	6826      	ldr	r6, [r4, #0]
 8003f0e:	1d18      	adds	r0, r3, #4
 8003f10:	6961      	ldr	r1, [r4, #20]
 8003f12:	6028      	str	r0, [r5, #0]
 8003f14:	0635      	lsls	r5, r6, #24
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	d501      	bpl.n	8003f1e <_printf_i+0x1ce>
 8003f1a:	6019      	str	r1, [r3, #0]
 8003f1c:	e002      	b.n	8003f24 <_printf_i+0x1d4>
 8003f1e:	0670      	lsls	r0, r6, #25
 8003f20:	d5fb      	bpl.n	8003f1a <_printf_i+0x1ca>
 8003f22:	8019      	strh	r1, [r3, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	4615      	mov	r5, r2
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	e7ba      	b.n	8003ea2 <_printf_i+0x152>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	2100      	movs	r1, #0
 8003f30:	1d1a      	adds	r2, r3, #4
 8003f32:	602a      	str	r2, [r5, #0]
 8003f34:	681d      	ldr	r5, [r3, #0]
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 f8d9 	bl	80040f0 <memchr>
 8003f3e:	b108      	cbz	r0, 8003f44 <_printf_i+0x1f4>
 8003f40:	1b40      	subs	r0, r0, r5
 8003f42:	6060      	str	r0, [r4, #4]
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4e:	e7a8      	b.n	8003ea2 <_printf_i+0x152>
 8003f50:	462a      	mov	r2, r5
 8003f52:	4649      	mov	r1, r9
 8003f54:	4640      	mov	r0, r8
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	47d0      	blx	sl
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0ab      	beq.n	8003eb6 <_printf_i+0x166>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	079b      	lsls	r3, r3, #30
 8003f62:	d413      	bmi.n	8003f8c <_printf_i+0x23c>
 8003f64:	68e0      	ldr	r0, [r4, #12]
 8003f66:	9b03      	ldr	r3, [sp, #12]
 8003f68:	4298      	cmp	r0, r3
 8003f6a:	bfb8      	it	lt
 8003f6c:	4618      	movlt	r0, r3
 8003f6e:	e7a4      	b.n	8003eba <_printf_i+0x16a>
 8003f70:	2301      	movs	r3, #1
 8003f72:	4632      	mov	r2, r6
 8003f74:	4649      	mov	r1, r9
 8003f76:	4640      	mov	r0, r8
 8003f78:	47d0      	blx	sl
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d09b      	beq.n	8003eb6 <_printf_i+0x166>
 8003f7e:	3501      	adds	r5, #1
 8003f80:	68e3      	ldr	r3, [r4, #12]
 8003f82:	9903      	ldr	r1, [sp, #12]
 8003f84:	1a5b      	subs	r3, r3, r1
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	dcf2      	bgt.n	8003f70 <_printf_i+0x220>
 8003f8a:	e7eb      	b.n	8003f64 <_printf_i+0x214>
 8003f8c:	2500      	movs	r5, #0
 8003f8e:	f104 0619 	add.w	r6, r4, #25
 8003f92:	e7f5      	b.n	8003f80 <_printf_i+0x230>
 8003f94:	08004261 	.word	0x08004261
 8003f98:	08004272 	.word	0x08004272

08003f9c <_sbrk_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	4d05      	ldr	r5, [pc, #20]	; (8003fb8 <_sbrk_r+0x1c>)
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	602b      	str	r3, [r5, #0]
 8003fa8:	f7fc fe64 	bl	8000c74 <_sbrk>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d102      	bne.n	8003fb6 <_sbrk_r+0x1a>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	b103      	cbz	r3, 8003fb6 <_sbrk_r+0x1a>
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	200001e4 	.word	0x200001e4

08003fbc <__sread>:
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc4:	f000 f8ae 	bl	8004124 <_read_r>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	bfab      	itete	ge
 8003fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fce:	89a3      	ldrhlt	r3, [r4, #12]
 8003fd0:	181b      	addge	r3, r3, r0
 8003fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fd6:	bfac      	ite	ge
 8003fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fda:	81a3      	strhlt	r3, [r4, #12]
 8003fdc:	bd10      	pop	{r4, pc}

08003fde <__swrite>:
 8003fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe2:	461f      	mov	r7, r3
 8003fe4:	898b      	ldrh	r3, [r1, #12]
 8003fe6:	4605      	mov	r5, r0
 8003fe8:	05db      	lsls	r3, r3, #23
 8003fea:	460c      	mov	r4, r1
 8003fec:	4616      	mov	r6, r2
 8003fee:	d505      	bpl.n	8003ffc <__swrite+0x1e>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff8:	f000 f868 	bl	80040cc <_lseek_r>
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	4632      	mov	r2, r6
 8004000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	4628      	mov	r0, r5
 8004008:	463b      	mov	r3, r7
 800400a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004012:	f000 b817 	b.w	8004044 <_write_r>

08004016 <__sseek>:
 8004016:	b510      	push	{r4, lr}
 8004018:	460c      	mov	r4, r1
 800401a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401e:	f000 f855 	bl	80040cc <_lseek_r>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	bf15      	itete	ne
 8004028:	6560      	strne	r0, [r4, #84]	; 0x54
 800402a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800402e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004032:	81a3      	strheq	r3, [r4, #12]
 8004034:	bf18      	it	ne
 8004036:	81a3      	strhne	r3, [r4, #12]
 8004038:	bd10      	pop	{r4, pc}

0800403a <__sclose>:
 800403a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403e:	f000 b813 	b.w	8004068 <_close_r>
	...

08004044 <_write_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4604      	mov	r4, r0
 8004048:	4608      	mov	r0, r1
 800404a:	4611      	mov	r1, r2
 800404c:	2200      	movs	r2, #0
 800404e:	4d05      	ldr	r5, [pc, #20]	; (8004064 <_write_r+0x20>)
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f7fc fdc1 	bl	8000bda <_write>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_write_r+0x1e>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_write_r+0x1e>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	200001e4 	.word	0x200001e4

08004068 <_close_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	2300      	movs	r3, #0
 800406c:	4d05      	ldr	r5, [pc, #20]	; (8004084 <_close_r+0x1c>)
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc fdcd 	bl	8000c12 <_close>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_close_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_close_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200001e4 	.word	0x200001e4

08004088 <_fstat_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	2300      	movs	r3, #0
 800408c:	4d06      	ldr	r5, [pc, #24]	; (80040a8 <_fstat_r+0x20>)
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	4611      	mov	r1, r2
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	f7fc fdc7 	bl	8000c28 <_fstat>
 800409a:	1c43      	adds	r3, r0, #1
 800409c:	d102      	bne.n	80040a4 <_fstat_r+0x1c>
 800409e:	682b      	ldr	r3, [r5, #0]
 80040a0:	b103      	cbz	r3, 80040a4 <_fstat_r+0x1c>
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
 80040a6:	bf00      	nop
 80040a8:	200001e4 	.word	0x200001e4

080040ac <_isatty_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	2300      	movs	r3, #0
 80040b0:	4d05      	ldr	r5, [pc, #20]	; (80040c8 <_isatty_r+0x1c>)
 80040b2:	4604      	mov	r4, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	602b      	str	r3, [r5, #0]
 80040b8:	f7fc fdc5 	bl	8000c46 <_isatty>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_isatty_r+0x1a>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_isatty_r+0x1a>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	200001e4 	.word	0x200001e4

080040cc <_lseek_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4604      	mov	r4, r0
 80040d0:	4608      	mov	r0, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	2200      	movs	r2, #0
 80040d6:	4d05      	ldr	r5, [pc, #20]	; (80040ec <_lseek_r+0x20>)
 80040d8:	602a      	str	r2, [r5, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	f7fc fdbd 	bl	8000c5a <_lseek>
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	d102      	bne.n	80040ea <_lseek_r+0x1e>
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	b103      	cbz	r3, 80040ea <_lseek_r+0x1e>
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	200001e4 	.word	0x200001e4

080040f0 <memchr>:
 80040f0:	4603      	mov	r3, r0
 80040f2:	b510      	push	{r4, lr}
 80040f4:	b2c9      	uxtb	r1, r1
 80040f6:	4402      	add	r2, r0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	d101      	bne.n	8004102 <memchr+0x12>
 80040fe:	2000      	movs	r0, #0
 8004100:	e003      	b.n	800410a <memchr+0x1a>
 8004102:	7804      	ldrb	r4, [r0, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	428c      	cmp	r4, r1
 8004108:	d1f6      	bne.n	80040f8 <memchr+0x8>
 800410a:	bd10      	pop	{r4, pc}

0800410c <__malloc_lock>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__malloc_lock+0x8>)
 800410e:	f7ff bb13 	b.w	8003738 <__retarget_lock_acquire_recursive>
 8004112:	bf00      	nop
 8004114:	200001d8 	.word	0x200001d8

08004118 <__malloc_unlock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_unlock+0x8>)
 800411a:	f7ff bb0e 	b.w	800373a <__retarget_lock_release_recursive>
 800411e:	bf00      	nop
 8004120:	200001d8 	.word	0x200001d8

08004124 <_read_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	2200      	movs	r2, #0
 800412e:	4d05      	ldr	r5, [pc, #20]	; (8004144 <_read_r+0x20>)
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fd34 	bl	8000ba0 <_read>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_read_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_read_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	200001e4 	.word	0x200001e4

08004148 <_init>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr

08004154 <_fini>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	bf00      	nop
 8004158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415a:	bc08      	pop	{r3}
 800415c:	469e      	mov	lr, r3
 800415e:	4770      	bx	lr
