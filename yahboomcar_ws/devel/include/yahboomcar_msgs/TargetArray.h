// Generated by gencpp from file yahboomcar_msgs/TargetArray.msg
// DO NOT EDIT!


#ifndef YAHBOOMCAR_MSGS_MESSAGE_TARGETARRAY_H
#define YAHBOOMCAR_MSGS_MESSAGE_TARGETARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yahboomcar_msgs/Target.h>

namespace yahboomcar_msgs
{
template <class ContainerAllocator>
struct TargetArray_
{
  typedef TargetArray_<ContainerAllocator> Type;

  TargetArray_()
    : data()  {
    }
  TargetArray_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::yahboomcar_msgs::Target_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::yahboomcar_msgs::Target_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> const> ConstPtr;

}; // struct TargetArray_

typedef ::yahboomcar_msgs::TargetArray_<std::allocator<void> > TargetArray;

typedef boost::shared_ptr< ::yahboomcar_msgs::TargetArray > TargetArrayPtr;
typedef boost::shared_ptr< ::yahboomcar_msgs::TargetArray const> TargetArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yahboomcar_msgs::TargetArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yahboomcar_msgs::TargetArray_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::TargetArray_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yahboomcar_msgs::TargetArray_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::TargetArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yahboomcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c74c52b301e4b25679f3941c4f6f23f";
  }

  static const char* value(const ::yahboomcar_msgs::TargetArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c74c52b301e4b25ULL;
  static const uint64_t static_value2 = 0x679f3941c4f6f23fULL;
};

template<class ContainerAllocator>
struct DataType< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yahboomcar_msgs/TargetArray";
  }

  static const char* value(const ::yahboomcar_msgs::TargetArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yahboomcar_msgs/Target[] data\n"
"\n"
"================================================================================\n"
"MSG: yahboomcar_msgs/Target\n"
"string frame_id\n"
"time stamp\n"
"float32 scores\n"
"float32 ptx\n"
"float32 pty\n"
"float32 distw\n"
"float32 disth\n"
"float32 centerx\n"
"float32 centery\n"
;
  }

  static const char* value(const ::yahboomcar_msgs::TargetArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yahboomcar_msgs::TargetArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yahboomcar_msgs::TargetArray_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::yahboomcar_msgs::Target_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YAHBOOMCAR_MSGS_MESSAGE_TARGETARRAY_H
